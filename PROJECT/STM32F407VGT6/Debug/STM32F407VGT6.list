
STM32F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c378  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b34  0800c508  0800c508  0000d508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d03c  0800d03c  0000f200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d03c  0800d03c  0000e03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d044  0800d044  0000f200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d044  0800d044  0000e044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d048  0800d048  0000e048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800d04c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f200  2**0
                  CONTENTS
 10 .bss          0000120c  20000200  20000200  0000f200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000140c  2000140c  0000f200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ee4  00000000  00000000  0000f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fac  00000000  00000000  00023114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  000260c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5e  00000000  00000000  00027328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a34  00000000  00000000  00028186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018135  00000000  00000000  0004bbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0dd0  00000000  00000000  00063cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134abf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006390  00000000  00000000  00134b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0013ae94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4f0 	.word	0x0800c4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800c4f0 	.word	0x0800c4f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <MX_DMA_Init+0xe8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <MX_DMA_Init+0xe8>)
 8001030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <MX_DMA_Init+0xe8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <MX_DMA_Init+0xe8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <MX_DMA_Init+0xe8>)
 800104c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <MX_DMA_Init+0xe8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200b      	movs	r0, #11
 8001064:	f002 f95f 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001068:	200b      	movs	r0, #11
 800106a:	f002 f978 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200c      	movs	r0, #12
 8001074:	f002 f957 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001078:	200c      	movs	r0, #12
 800107a:	f002 f970 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200e      	movs	r0, #14
 8001084:	f002 f94f 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001088:	200e      	movs	r0, #14
 800108a:	f002 f968 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2010      	movs	r0, #16
 8001094:	f002 f947 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001098:	2010      	movs	r0, #16
 800109a:	f002 f960 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2011      	movs	r0, #17
 80010a4:	f002 f93f 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010a8:	2011      	movs	r0, #17
 80010aa:	f002 f958 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	202f      	movs	r0, #47	@ 0x2f
 80010b4:	f002 f937 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80010b8:	202f      	movs	r0, #47	@ 0x2f
 80010ba:	f002 f950 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2039      	movs	r0, #57	@ 0x39
 80010c4:	f002 f92f 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010c8:	2039      	movs	r0, #57	@ 0x39
 80010ca:	f002 f948 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	203a      	movs	r0, #58	@ 0x3a
 80010d4:	f002 f927 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010d8:	203a      	movs	r0, #58	@ 0x3a
 80010da:	f002 f940 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2045      	movs	r0, #69	@ 0x45
 80010e4:	f002 f91f 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010e8:	2045      	movs	r0, #69	@ 0x45
 80010ea:	f002 f938 	bl	800335e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	2046      	movs	r0, #70	@ 0x46
 80010f4:	f002 f917 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010f8:	2046      	movs	r0, #70	@ 0x46
 80010fa:	f002 f930 	bl	800335e <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b3a      	ldr	r3, [pc, #232]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a39      	ldr	r2, [pc, #228]	@ (8001210 <MX_GPIO_Init+0x104>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a32      	ldr	r2, [pc, #200]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a2b      	ldr	r2, [pc, #172]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <MX_GPIO_Init+0x104>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <MX_GPIO_Init+0x104>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a24      	ldr	r2, [pc, #144]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <MX_GPIO_Init+0x104>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a1d      	ldr	r2, [pc, #116]	@ (8001210 <MX_GPIO_Init+0x104>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <MX_GPIO_Init+0x104>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|LED_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	210c      	movs	r1, #12
 80011b2:	4818      	ldr	r0, [pc, #96]	@ (8001214 <MX_GPIO_Init+0x108>)
 80011b4:	f002 fe8c 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY2_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 80011b8:	2303      	movs	r3, #3
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4812      	ldr	r0, [pc, #72]	@ (8001214 <MX_GPIO_Init+0x108>)
 80011cc:	f002 fce4 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LED_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_Pin;
 80011d0:	230c      	movs	r3, #12
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	@ (8001214 <MX_GPIO_Init+0x108>)
 80011e8:	f002 fcd6 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY4_Pin KEY3_Pin */
  GPIO_InitStruct.Pin = KEY4_Pin|KEY3_Pin;
 80011ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_GPIO_Init+0x10c>)
 8001202:	f002 fcc9 	bl	8003b98 <HAL_GPIO_Init>

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40020800 	.word	0x40020800
 8001218:	40020400 	.word	0x40020400

0800121c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_I2C1_Init+0x50>)
 8001222:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <MX_I2C1_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_I2C1_Init+0x50>)
 8001228:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <MX_I2C1_Init+0x58>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <MX_I2C1_Init+0x50>)
 800123a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800123e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <MX_I2C1_Init+0x50>)
 800125a:	f002 fe53 	bl	8003f04 <HAL_I2C_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001264:	f000 fb08 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000021c 	.word	0x2000021c
 8001270:	40005400 	.word	0x40005400
 8001274:	00061a80 	.word	0x00061a80

08001278 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	@ 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <HAL_I2C_MspInit+0x84>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12b      	bne.n	80012f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80012b6:	23c0      	movs	r3, #192	@ 0xc0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ba:	2312      	movs	r3, #18
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012c6:	2304      	movs	r3, #4
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <HAL_I2C_MspInit+0x8c>)
 80012d2:	f002 fc61 	bl	8003b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_I2C_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

Angle_PID.target_val=0;
 800130e:	4b80      	ldr	r3, [pc, #512]	@ (8001510 <main+0x208>)
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
Servo_PID_Down.target_val=320;
 8001316:	4b7f      	ldr	r3, [pc, #508]	@ (8001514 <main+0x20c>)
 8001318:	4a7f      	ldr	r2, [pc, #508]	@ (8001518 <main+0x210>)
 800131a:	601a      	str	r2, [r3, #0]
Servo_PID_Up.target_val=240;
 800131c:	4b7f      	ldr	r3, [pc, #508]	@ (800151c <main+0x214>)
 800131e:	4a80      	ldr	r2, [pc, #512]	@ (8001520 <main+0x218>)
 8001320:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001322:	f001 fe8f 	bl	8003044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001326:	f000 f937 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f7ff feef 	bl	800110c <MX_GPIO_Init>
  MX_DMA_Init();
 800132e:	f7ff fe77 	bl	8001020 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001332:	f000 fe93 	bl	800205c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001336:	f7ff ff71 	bl	800121c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800133a:	f000 feb9 	bl	80020b0 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800133e:	f000 fcfd 	bl	8001d3c <MX_TIM12_Init>
  MX_TIM7_Init();
 8001342:	f000 fcc5 	bl	8001cd0 <MX_TIM7_Init>
  MX_UART5_Init();
 8001346:	f000 fe35 	bl	8001fb4 <MX_UART5_Init>
  MX_TIM2_Init();
 800134a:	f000 fc75 	bl	8001c38 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800134e:	f000 fed9 	bl	8002104 <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8001352:	f000 fd61 	bl	8001e18 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8001356:	f000 fe57 	bl	8002008 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*USER Init BEGIN*/
  HAL_Delay(20);
 800135a:	2014      	movs	r0, #20
 800135c:	f001 fee4 	bl	8003128 <HAL_Delay>
  OLED_Init();
 8001360:	f001 fad2 	bl	8002908 <OLED_Init>


  PID_Angle_init(&Angle_PID, Angle_PID.target_val, Angle_PID_Kp, Angle_PID_Ki, Angle_PID_Kd);
 8001364:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <main+0x208>)
 8001366:	edd3 7a06 	vldr	s15, [r3, #24]
 800136a:	4b6e      	ldr	r3, [pc, #440]	@ (8001524 <main+0x21c>)
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	4b6d      	ldr	r3, [pc, #436]	@ (8001528 <main+0x220>)
 8001372:	edd3 6a00 	vldr	s13, [r3]
 8001376:	4b6d      	ldr	r3, [pc, #436]	@ (800152c <main+0x224>)
 8001378:	ed93 6a00 	vldr	s12, [r3]
 800137c:	eef0 1a46 	vmov.f32	s3, s12
 8001380:	eeb0 1a66 	vmov.f32	s2, s13
 8001384:	eef0 0a47 	vmov.f32	s1, s14
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	4860      	ldr	r0, [pc, #384]	@ (8001510 <main+0x208>)
 800138e:	f001 fa74 	bl	800287a <PID_Angle_init>
  PID_Servo_init(&Servo_PID_Down, Servo_PID_Down.target_val, Servo2_PID_Kp, Servo2_PID_Ki, Servo2_PID_Kd);
 8001392:	4b60      	ldr	r3, [pc, #384]	@ (8001514 <main+0x20c>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	4b65      	ldr	r3, [pc, #404]	@ (8001530 <main+0x228>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	4b65      	ldr	r3, [pc, #404]	@ (8001534 <main+0x22c>)
 80013a0:	edd3 6a00 	vldr	s13, [r3]
 80013a4:	4b64      	ldr	r3, [pc, #400]	@ (8001538 <main+0x230>)
 80013a6:	ed93 6a00 	vldr	s12, [r3]
 80013aa:	eef0 1a46 	vmov.f32	s3, s12
 80013ae:	eeb0 1a66 	vmov.f32	s2, s13
 80013b2:	eef0 0a47 	vmov.f32	s1, s14
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	4856      	ldr	r0, [pc, #344]	@ (8001514 <main+0x20c>)
 80013bc:	f001 fe24 	bl	8003008 <PID_Servo_init>
  PID_Servo_init(&Servo_PID_Up, Servo_PID_Up.target_val, Servo_PID_Kp, Servo_PID_Ki, Servo_PID_Kd);
 80013c0:	4b56      	ldr	r3, [pc, #344]	@ (800151c <main+0x214>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <main+0x234>)
 80013c8:	ed93 7a00 	vldr	s14, [r3]
 80013cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001540 <main+0x238>)
 80013ce:	edd3 6a00 	vldr	s13, [r3]
 80013d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001544 <main+0x23c>)
 80013d4:	ed93 6a00 	vldr	s12, [r3]
 80013d8:	eef0 1a46 	vmov.f32	s3, s12
 80013dc:	eeb0 1a66 	vmov.f32	s2, s13
 80013e0:	eef0 0a47 	vmov.f32	s1, s14
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	484c      	ldr	r0, [pc, #304]	@ (800151c <main+0x214>)
 80013ea:	f001 fe0d 	bl	8003008 <PID_Servo_init>
  /*USER Init END*/
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 80013ee:	22ff      	movs	r2, #255	@ 0xff
 80013f0:	4955      	ldr	r1, [pc, #340]	@ (8001548 <main+0x240>)
 80013f2:	4856      	ldr	r0, [pc, #344]	@ (800154c <main+0x244>)
 80013f4:	f004 ff72 	bl	80062dc <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)RxBuffer3,sizeof(RxBuffer3));   //开启接受不定长
 80013f8:	22ff      	movs	r2, #255	@ 0xff
 80013fa:	4955      	ldr	r1, [pc, #340]	@ (8001550 <main+0x248>)
 80013fc:	4855      	ldr	r0, [pc, #340]	@ (8001554 <main+0x24c>)
 80013fe:	f004 ff6d 	bl	80062dc <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 8001402:	22ff      	movs	r2, #255	@ 0xff
 8001404:	4954      	ldr	r1, [pc, #336]	@ (8001558 <main+0x250>)
 8001406:	4855      	ldr	r0, [pc, #340]	@ (800155c <main+0x254>)
 8001408:	f004 ff68 	bl	80062dc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(huart2.hdmarx, DMA_IT_HT);          //关闭接受半中断
 800140c:	4b4f      	ldr	r3, [pc, #316]	@ (800154c <main+0x244>)
 800140e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b4d      	ldr	r3, [pc, #308]	@ (800154c <main+0x244>)
 8001416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0208 	bic.w	r2, r2, #8
 800141e:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT);          //关闭接受半中断
 8001420:	4b4e      	ldr	r3, [pc, #312]	@ (800155c <main+0x254>)
 8001422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b4c      	ldr	r3, [pc, #304]	@ (800155c <main+0x254>)
 800142a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0208 	bic.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);          //关闭接受半中断
 8001434:	4b47      	ldr	r3, [pc, #284]	@ (8001554 <main+0x24c>)
 8001436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b45      	ldr	r3, [pc, #276]	@ (8001554 <main+0x24c>)
 800143e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0208 	bic.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit_DMA(&huart2, JY62_z_Zero, sizeof(JY62_z_Zero));
 8001448:	2203      	movs	r2, #3
 800144a:	4945      	ldr	r1, [pc, #276]	@ (8001560 <main+0x258>)
 800144c:	483f      	ldr	r0, [pc, #252]	@ (800154c <main+0x244>)
 800144e:	f004 fec9 	bl	80061e4 <HAL_UART_Transmit_DMA>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001452:	2100      	movs	r1, #0
 8001454:	4843      	ldr	r0, [pc, #268]	@ (8001564 <main+0x25c>)
 8001456:	f003 ff65 	bl	8005324 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 800145a:	2104      	movs	r1, #4
 800145c:	4841      	ldr	r0, [pc, #260]	@ (8001564 <main+0x25c>)
 800145e:	f003 ff61 	bl	8005324 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim7);
 8001462:	4841      	ldr	r0, [pc, #260]	@ (8001568 <main+0x260>)
 8001464:	f003 fe94 	bl	8005190 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8001468:	4840      	ldr	r0, [pc, #256]	@ (800156c <main+0x264>)
 800146a:	f003 fe91 	bl	8005190 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//	PID_Servo_realize(&Servo_PID_Down,Angle_x);
//	PID_Servo_realize(&Servo_PID_Up,Angle_y);
//	Set_Servo_Angle_Down(Get_Servo_Angle_Down()+Servo_PID_Down.output_val);
//	Set_Servo_Angle_Up(Get_Servo_Angle_Up()+Servo_PID_Up.output_val);
  Set_Servo_Angle(1, 90.0f,0);
 800146e:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8001570 <main+0x268>
 8001472:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001574 <main+0x26c>
 8001476:	2001      	movs	r0, #1
 8001478:	f001 fd6e 	bl	8002f58 <Set_Servo_Angle>
  Set_Servo_Angle(0, 10.0f,1000);
 800147c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8001578 <main+0x270>
 8001480:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001484:	2000      	movs	r0, #0
 8001486:	f001 fd67 	bl	8002f58 <Set_Servo_Angle>
  HAL_Delay(1000);
 800148a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800148e:	f001 fe4b 	bl	8003128 <HAL_Delay>

  while (1)
  {

  	OLED_NewFrame();
 8001492:	f001 fa95 	bl	80029c0 <OLED_NewFrame>
	 sprintf(message,"x:%.2f",Angle_x);
 8001496:	4b39      	ldr	r3, [pc, #228]	@ (800157c <main+0x274>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f854 	bl	8000548 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4936      	ldr	r1, [pc, #216]	@ (8001580 <main+0x278>)
 80014a6:	4837      	ldr	r0, [pc, #220]	@ (8001584 <main+0x27c>)
 80014a8:	f006 ffa0 	bl	80083ec <siprintf>
	 OLED_PrintString(1, 16, message, &font16x16, 0);
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <main+0x280>)
 80014b2:	4a34      	ldr	r2, [pc, #208]	@ (8001584 <main+0x27c>)
 80014b4:	2110      	movs	r1, #16
 80014b6:	2001      	movs	r0, #1
 80014b8:	f001 fca8 	bl	8002e0c <OLED_PrintString>
  sprintf(message,"y:%.2f",Angle_y);
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <main+0x284>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4931      	ldr	r1, [pc, #196]	@ (8001590 <main+0x288>)
 80014cc:	482d      	ldr	r0, [pc, #180]	@ (8001584 <main+0x27c>)
 80014ce:	f006 ff8d 	bl	80083ec <siprintf>
	 OLED_PrintString(1, 32, message, &font16x16, 0);
 80014d2:	2300      	movs	r3, #0
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <main+0x280>)
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <main+0x27c>)
 80014da:	2120      	movs	r1, #32
 80014dc:	2001      	movs	r0, #1
 80014de:	f001 fc95 	bl	8002e0c <OLED_PrintString>
	 sprintf(message,"speedr:%f",Servo_PID_Down.output_val);
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <main+0x20c>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4928      	ldr	r1, [pc, #160]	@ (8001594 <main+0x28c>)
 80014f2:	4824      	ldr	r0, [pc, #144]	@ (8001584 <main+0x27c>)
 80014f4:	f006 ff7a 	bl	80083ec <siprintf>
	 OLED_PrintString(1, 48, message, &font16x16, 0);
 80014f8:	2300      	movs	r3, #0
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <main+0x280>)
 80014fe:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <main+0x27c>)
 8001500:	2130      	movs	r1, #48	@ 0x30
 8001502:	2001      	movs	r0, #1
 8001504:	f001 fc82 	bl	8002e0c <OLED_PrintString>
	 OLED_ShowFrame();
 8001508:	f001 fa66 	bl	80029d8 <OLED_ShowFrame>
  	OLED_NewFrame();
 800150c:	bf00      	nop
 800150e:	e7c0      	b.n	8001492 <main+0x18a>
 8001510:	20000274 	.word	0x20000274
 8001514:	20000294 	.word	0x20000294
 8001518:	43a00000 	.word	0x43a00000
 800151c:	200002b8 	.word	0x200002b8
 8001520:	43700000 	.word	0x43700000
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004
 800152c:	20000008 	.word	0x20000008
 8001530:	20000014 	.word	0x20000014
 8001534:	20000018 	.word	0x20000018
 8001538:	2000001c 	.word	0x2000001c
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000270 	.word	0x20000270
 8001544:	20000010 	.word	0x20000010
 8001548:	200003dc 	.word	0x200003dc
 800154c:	2000099c 	.word	0x2000099c
 8001550:	200004dc 	.word	0x200004dc
 8001554:	20000954 	.word	0x20000954
 8001558:	200005dc 	.word	0x200005dc
 800155c:	200009e4 	.word	0x200009e4
 8001560:	20000020 	.word	0x20000020
 8001564:	2000087c 	.word	0x2000087c
 8001568:	20000834 	.word	0x20000834
 800156c:	200008c4 	.word	0x200008c4
 8001570:	00000000 	.word	0x00000000
 8001574:	42b40000 	.word	0x42b40000
 8001578:	447a0000 	.word	0x447a0000
 800157c:	20000024 	.word	0x20000024
 8001580:	0800c508 	.word	0x0800c508
 8001584:	200002dc 	.word	0x200002dc
 8001588:	0800cbe4 	.word	0x0800cbe4
 800158c:	20000028 	.word	0x20000028
 8001590:	0800c510 	.word	0x0800c510
 8001594:	0800c518 	.word	0x0800c518

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	@ 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2230      	movs	r2, #48	@ 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 ffc3 	bl	8008532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <SystemClock_Config+0xcc>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <SystemClock_Config+0xcc>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <SystemClock_Config+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <SystemClock_Config+0xd0>)
 80015e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fc:	2310      	movs	r3, #16
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	2302      	movs	r3, #2
 8001602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001608:	2308      	movs	r3, #8
 800160a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800160c:	23a8      	movs	r3, #168	@ 0xa8
 800160e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f90f 	bl	8004840 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001628:	f000 f926 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001638:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800163e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2105      	movs	r1, #5
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fb70 	bl	8004d30 <HAL_RCC_ClockConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001656:	f000 f90f 	bl	8001878 <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3750      	adds	r7, #80	@ 0x50
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40007000 	.word	0x40007000

0800166c <HAL_UARTEx_RxEventCallback>:
}




void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){ //串口接收中断
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
	if(huart==&huart1){
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a5d      	ldr	r2, [pc, #372]	@ (80017f0 <HAL_UARTEx_RxEventCallback+0x184>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d11c      	bne.n	80016ba <HAL_UARTEx_RxEventCallback+0x4e>
		memset(message, 0, sizeof(message));  // 整个数组
 8001680:	22ff      	movs	r2, #255	@ 0xff
 8001682:	2100      	movs	r1, #0
 8001684:	485b      	ldr	r0, [pc, #364]	@ (80017f4 <HAL_UARTEx_RxEventCallback+0x188>)
 8001686:	f006 ff54 	bl	8008532 <memset>
		 if (Size < sizeof(RxBuffer3)) {
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	2bfe      	cmp	r3, #254	@ 0xfe
 800168e:	d804      	bhi.n	800169a <HAL_UARTEx_RxEventCallback+0x2e>
		            RxBuffer3[Size] = '\0';  // 添加字符串结束符
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4a59      	ldr	r2, [pc, #356]	@ (80017f8 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001694:	2100      	movs	r1, #0
 8001696:	54d1      	strb	r1, [r2, r3]
 8001698:	e003      	b.n	80016a2 <HAL_UARTEx_RxEventCallback+0x36>
		        } else {
		            RxBuffer3[sizeof(RxBuffer3) - 1] = '\0';  // 防止越界
 800169a:	4b57      	ldr	r3, [pc, #348]	@ (80017f8 <HAL_UARTEx_RxEventCallback+0x18c>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		        }
//左边电机PID在线调参

		 if  (sscanf(RxBuffer3, "anglex %f,angley %f", &Angle_x,&Angle_y)== 2){
 80016a2:	4b56      	ldr	r3, [pc, #344]	@ (80017fc <HAL_UARTEx_RxEventCallback+0x190>)
 80016a4:	4a56      	ldr	r2, [pc, #344]	@ (8001800 <HAL_UARTEx_RxEventCallback+0x194>)
 80016a6:	4957      	ldr	r1, [pc, #348]	@ (8001804 <HAL_UARTEx_RxEventCallback+0x198>)
 80016a8:	4853      	ldr	r0, [pc, #332]	@ (80017f8 <HAL_UARTEx_RxEventCallback+0x18c>)
 80016aa:	f006 fec1 	bl	8008430 <siscanf>



           //sprintf(message,"RECEIVE:%s\n",RxBuffer3);
           //HAL_UART_Transmit_DMA(&huart1, (uint8_t*)message, strlen(message));
           HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)RxBuffer3,sizeof(RxBuffer3));   //开启接受不定长
 80016ae:	22ff      	movs	r2, #255	@ 0xff
 80016b0:	4951      	ldr	r1, [pc, #324]	@ (80017f8 <HAL_UARTEx_RxEventCallback+0x18c>)
 80016b2:	484f      	ldr	r0, [pc, #316]	@ (80017f0 <HAL_UARTEx_RxEventCallback+0x184>)
 80016b4:	f004 fe12 	bl	80062dc <HAL_UARTEx_ReceiveToIdle_DMA>





}
 80016b8:	e096      	b.n	80017e8 <HAL_UARTEx_RxEventCallback+0x17c>
	else if(huart==&huart2){  //接收JY62 数据中断
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a52      	ldr	r2, [pc, #328]	@ (8001808 <HAL_UARTEx_RxEventCallback+0x19c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d178      	bne.n	80017b4 <HAL_UARTEx_RxEventCallback+0x148>
		if(RxBuffer[22]==0x55){
 80016c2:	4b52      	ldr	r3, [pc, #328]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 80016c4:	7d9b      	ldrb	r3, [r3, #22]
 80016c6:	2b55      	cmp	r3, #85	@ 0x55
 80016c8:	d16e      	bne.n	80017a8 <HAL_UARTEx_RxEventCallback+0x13c>
			if(RxBuffer[23]==0x53){
 80016ca:	4b50      	ldr	r3, [pc, #320]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 80016cc:	7ddb      	ldrb	r3, [r3, #23]
 80016ce:	2b53      	cmp	r3, #83	@ 0x53
 80016d0:	d16a      	bne.n	80017a8 <HAL_UARTEx_RxEventCallback+0x13c>
				RollX = (float)(((short)(RxBuffer[25]<<8)|RxBuffer[24])/32768.0*180);//处理数据，依据官方所给文档
 80016d2:	4b4e      	ldr	r3, [pc, #312]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 80016d4:	7e5b      	ldrb	r3, [r3, #25]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21b      	sxth	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 80016e0:	7e1b      	ldrb	r3, [r3, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff1d 	bl	8000524 <__aeabi_i2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b48      	ldr	r3, [pc, #288]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80016f0:	f7ff f8ac 	bl	800084c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b44      	ldr	r3, [pc, #272]	@ (8001814 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001702:	f7fe ff79 	bl	80005f8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa6b 	bl	8000be8 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	4a40      	ldr	r2, [pc, #256]	@ (8001818 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001716:	6013      	str	r3, [r2, #0]
				PitchY = (float)((short)((RxBuffer[27]<<8)|RxBuffer[26])/32768.0*180);
 8001718:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 800171a:	7edb      	ldrb	r3, [r3, #27]
 800171c:	b21b      	sxth	r3, r3
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b3a      	ldr	r3, [pc, #232]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001724:	7e9b      	ldrb	r3, [r3, #26]
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21b      	sxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fef9 	bl	8000524 <__aeabi_i2d>
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b36      	ldr	r3, [pc, #216]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001738:	f7ff f888 	bl	800084c <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800174a:	f7fe ff55 	bl	80005f8 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa47 	bl	8000be8 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	4a2f      	ldr	r2, [pc, #188]	@ (800181c <HAL_UARTEx_RxEventCallback+0x1b0>)
 800175e:	6013      	str	r3, [r2, #0]
				YawZ = (float)((short)((RxBuffer[29]<<8)|RxBuffer[28])/32768.0*180);
 8001760:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001762:	7f5b      	ldrb	r3, [r3, #29]
 8001764:	b21b      	sxth	r3, r3
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b28      	ldr	r3, [pc, #160]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 800176c:	7f1b      	ldrb	r3, [r3, #28]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21b      	sxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fed5 	bl	8000524 <__aeabi_i2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001780:	f7ff f864 	bl	800084c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001792:	f7fe ff31 	bl	80005f8 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff fa23 	bl	8000be8 <__aeabi_d2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80017a6:	6013      	str	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer,sizeof(RxBuffer));   //开启接受不定长
 80017a8:	22ff      	movs	r2, #255	@ 0xff
 80017aa:	4918      	ldr	r1, [pc, #96]	@ (800180c <HAL_UARTEx_RxEventCallback+0x1a0>)
 80017ac:	4816      	ldr	r0, [pc, #88]	@ (8001808 <HAL_UARTEx_RxEventCallback+0x19c>)
 80017ae:	f004 fd95 	bl	80062dc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80017b2:	e019      	b.n	80017e8 <HAL_UARTEx_RxEventCallback+0x17c>
	else if(huart==&huart3){
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d115      	bne.n	80017e8 <HAL_UARTEx_RxEventCallback+0x17c>
		memset(message, 0, sizeof(message));  // 整个数组
 80017bc:	22ff      	movs	r2, #255	@ 0xff
 80017be:	2100      	movs	r1, #0
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <HAL_UARTEx_RxEventCallback+0x188>)
 80017c2:	f006 feb6 	bl	8008532 <memset>
		 if (Size < sizeof(RxBuffer2)) {
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80017ca:	d804      	bhi.n	80017d6 <HAL_UARTEx_RxEventCallback+0x16a>
		            RxBuffer2[Size] = '\0';  // 添加字符串结束符
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	4a16      	ldr	r2, [pc, #88]	@ (8001828 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80017d0:	2100      	movs	r1, #0
 80017d2:	54d1      	strb	r1, [r2, r3]
 80017d4:	e003      	b.n	80017de <HAL_UARTEx_RxEventCallback+0x172>
		            RxBuffer2[sizeof(RxBuffer2) - 1] = '\0';  // 防止越界
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *)RxBuffer2,sizeof(RxBuffer2));   //开启接受不定长
 80017de:	22ff      	movs	r2, #255	@ 0xff
 80017e0:	4911      	ldr	r1, [pc, #68]	@ (8001828 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80017e2:	4810      	ldr	r0, [pc, #64]	@ (8001824 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80017e4:	f004 fd7a 	bl	80062dc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000954 	.word	0x20000954
 80017f4:	200002dc 	.word	0x200002dc
 80017f8:	200004dc 	.word	0x200004dc
 80017fc:	20000028 	.word	0x20000028
 8001800:	20000024 	.word	0x20000024
 8001804:	0800c524 	.word	0x0800c524
 8001808:	2000099c 	.word	0x2000099c
 800180c:	200003dc 	.word	0x200003dc
 8001810:	40e00000 	.word	0x40e00000
 8001814:	40668000 	.word	0x40668000
 8001818:	200007dc 	.word	0x200007dc
 800181c:	200007e0 	.word	0x200007e0
 8001820:	200007e4 	.word	0x200007e4
 8001824:	200009e4 	.word	0x200009e4
 8001828:	200005dc 	.word	0x200005dc

0800182c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {//处理数据发送完成后的操作
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_UART_TxCpltCallback+0x2c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d008      	beq.n	800184e <HAL_UART_TxCpltCallback+0x22>


	}

	else if(huart == &huart2) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a07      	ldr	r2, [pc, #28]	@ (800185c <HAL_UART_TxCpltCallback+0x30>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d104      	bne.n	800184e <HAL_UART_TxCpltCallback+0x22>

	     memset(TxBuffer, 0, sizeof(TxBuffer));
 8001844:	22ff      	movs	r2, #255	@ 0xff
 8001846:	2100      	movs	r1, #0
 8001848:	4805      	ldr	r0, [pc, #20]	@ (8001860 <HAL_UART_TxCpltCallback+0x34>)
 800184a:	f006 fe72 	bl	8008532 <memset>


  }
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000954 	.word	0x20000954
 800185c:	2000099c 	.word	0x2000099c
 8001860:	200006dc 	.word	0x200006dc

08001864 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]





}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <Error_Handler+0x8>

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_MspInit+0x4c>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_MspInit+0x4c>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001898:	6453      	str	r3, [r2, #68]	@ 0x44
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_MspInit+0x4c>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_MspInit+0x4c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <NMI_Handler+0x4>

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <MemManage_Handler+0x4>

080018ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192a:	f001 fbdd 	bl	80030e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA1_Stream0_IRQHandler+0x10>)
 800193a:	f001 fec3 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000a74 	.word	0x20000a74

08001948 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Stream1_IRQHandler+0x10>)
 800194e:	f001 feb9 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000cb4 	.word	0x20000cb4

0800195c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Stream3_IRQHandler+0x10>)
 8001962:	f001 feaf 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000d14 	.word	0x20000d14

08001970 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Stream5_IRQHandler+0x10>)
 8001976:	f001 fea5 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000bf4 	.word	0x20000bf4

08001984 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <DMA1_Stream6_IRQHandler+0x10>)
 800198a:	f001 fe9b 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000c54 	.word	0x20000c54

08001998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <USART1_IRQHandler+0x10>)
 800199e:	f004 fcf7 	bl	8006390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000954 	.word	0x20000954

080019ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <USART2_IRQHandler+0x10>)
 80019b2:	f004 fced 	bl	8006390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000099c 	.word	0x2000099c

080019c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <USART3_IRQHandler+0x10>)
 80019c6:	f004 fce3 	bl	8006390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200009e4 	.word	0x200009e4

080019d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80019da:	f003 fd6b 	bl	80054b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200008c4 	.word	0x200008c4

080019e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <DMA1_Stream7_IRQHandler+0x10>)
 80019ee:	f001 fe69 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000ad4 	.word	0x20000ad4

080019fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <UART5_IRQHandler+0x10>)
 8001a02:	f004 fcc5 	bl	8006390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000090c 	.word	0x2000090c

08001a10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM7_IRQHandler+0x10>)
 8001a16:	f003 fd4d 	bl	80054b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000834 	.word	0x20000834

08001a24 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <DMA2_Stream1_IRQHandler+0x10>)
 8001a2a:	f001 fe4b 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000d74 	.word	0x20000d74

08001a38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <DMA2_Stream2_IRQHandler+0x10>)
 8001a3e:	f001 fe41 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000b34 	.word	0x20000b34

08001a4c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <DMA2_Stream6_IRQHandler+0x10>)
 8001a52:	f001 fe37 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000dd4 	.word	0x20000dd4

08001a60 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <DMA2_Stream7_IRQHandler+0x10>)
 8001a66:	f001 fe2d 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000b94 	.word	0x20000b94

08001a74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <USART6_IRQHandler+0x10>)
 8001a7a:	f004 fc89 	bl	8006390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000a2c 	.word	0x20000a2c

08001a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return 1;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_kill>:

int _kill(int pid, int sig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aa2:	f006 fd99 	bl	80085d8 <__errno>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2216      	movs	r2, #22
 8001aaa:	601a      	str	r2, [r3, #0]
  return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_exit>:

void _exit (int status)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffe7 	bl	8001a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aca:	bf00      	nop
 8001acc:	e7fd      	b.n	8001aca <_exit+0x12>

08001ace <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e00a      	b.n	8001af6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae0:	f3af 8000 	nop.w
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	60ba      	str	r2, [r7, #8]
 8001aec:	b2ca      	uxtb	r2, r1
 8001aee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3301      	adds	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dbf0      	blt.n	8001ae0 <_read+0x12>
  }

  return len;
 8001afe:	687b      	ldr	r3, [r7, #4]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e009      	b.n	8001b2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	60ba      	str	r2, [r7, #8]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbf1      	blt.n	8001b1a <_write+0x12>
  }
  return len;
 8001b36:	687b      	ldr	r3, [r7, #4]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_close>:

int _close(int file)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b68:	605a      	str	r2, [r3, #4]
  return 0;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_isatty>:

int _isatty(int file)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b80:	2301      	movs	r3, #1
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b085      	sub	sp, #20
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f006 fcfe 	bl	80085d8 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20020000 	.word	0x20020000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	200007e8 	.word	0x200007e8
 8001c10:	20001410 	.word	0x20001410

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <SystemInit+0x20>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <SystemInit+0x20>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c5e:	2253      	movs	r2, #83	@ 0x53
 8001c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c7c:	4813      	ldr	r0, [pc, #76]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c7e:	f003 fa37 	bl	80050f0 <HAL_TIM_Base_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c88:	f7ff fdf6 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001c9a:	f003 fdbd 	bl	8005818 <HAL_TIM_ConfigClockSource>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ca4:	f7ff fde8 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <MX_TIM2_Init+0x94>)
 8001cb6:	f004 f9b5 	bl	8006024 <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cc0:	f7ff fdda 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200007ec 	.word	0x200007ec

08001cd0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <MX_TIM7_Init+0x64>)
 8001ce0:	4a15      	ldr	r2, [pc, #84]	@ (8001d38 <MX_TIM7_Init+0x68>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <MX_TIM7_Init+0x64>)
 8001ce6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001cea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <MX_TIM7_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <MX_TIM7_Init+0x64>)
 8001cf4:	2263      	movs	r2, #99	@ 0x63
 8001cf6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_TIM7_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cfe:	480d      	ldr	r0, [pc, #52]	@ (8001d34 <MX_TIM7_Init+0x64>)
 8001d00:	f003 f9f6 	bl	80050f0 <HAL_TIM_Base_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d0a:	f7ff fdb5 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	@ (8001d34 <MX_TIM7_Init+0x64>)
 8001d1c:	f004 f982 	bl	8006024 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d26:	f7ff fda7 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000834 	.word	0x20000834
 8001d38:	40001400 	.word	0x40001400

08001d3c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	@ 0x30
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]
 8001d5e:	615a      	str	r2, [r3, #20]
 8001d60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d62:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001d64:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <MX_TIM12_Init+0xd8>)
 8001d66:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 8001d68:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001d6a:	2253      	movs	r2, #83	@ 0x53
 8001d6c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b28      	ldr	r3, [pc, #160]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 20000-1;
 8001d74:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001d76:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001d7a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d82:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d88:	4821      	ldr	r0, [pc, #132]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001d8a:	f003 f9b1 	bl	80050f0 <HAL_TIM_Base_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001d94:	f7ff fd70 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	481a      	ldr	r0, [pc, #104]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001da6:	f003 fd37 	bl	8005818 <HAL_TIM_ConfigClockSource>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001db0:	f7ff fd62 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001db4:	4816      	ldr	r0, [pc, #88]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001db6:	f003 fa5b 	bl	8005270 <HAL_TIM_PWM_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001dc0:	f7ff fd5a 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc4:	2360      	movs	r3, #96	@ 0x60
 8001dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480d      	ldr	r0, [pc, #52]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001ddc:	f003 fc5a 	bl	8005694 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001de6:	f7ff fd47 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2204      	movs	r2, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4807      	ldr	r0, [pc, #28]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001df2:	f003 fc4f 	bl	8005694 <HAL_TIM_PWM_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001dfc:	f7ff fd3c 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e00:	4803      	ldr	r0, [pc, #12]	@ (8001e10 <MX_TIM12_Init+0xd4>)
 8001e02:	f000 f89d 	bl	8001f40 <HAL_TIM_MspPostInit>

}
 8001e06:	bf00      	nop
 8001e08:	3730      	adds	r7, #48	@ 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000087c 	.word	0x2000087c
 8001e14:	40001800 	.word	0x40001800

08001e18 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <MX_TIM14_Init+0x40>)
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <MX_TIM14_Init+0x44>)
 8001e20:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3000-1;
 8001e22:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <MX_TIM14_Init+0x40>)
 8001e24:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001e28:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <MX_TIM14_Init+0x40>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400-1;
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <MX_TIM14_Init+0x40>)
 8001e32:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001e36:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e38:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <MX_TIM14_Init+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <MX_TIM14_Init+0x40>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <MX_TIM14_Init+0x40>)
 8001e46:	f003 f953 	bl	80050f0 <HAL_TIM_Base_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001e50:	f7ff fd12 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200008c4 	.word	0x200008c4
 8001e5c:	40002000 	.word	0x40002000

08001e60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001e8e:	e04a      	b.n	8001f26 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a27      	ldr	r2, [pc, #156]	@ (8001f34 <HAL_TIM_Base_MspInit+0xd4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d116      	bne.n	8001ec8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a23      	ldr	r2, [pc, #140]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001ea4:	f043 0320 	orr.w	r3, r3, #32
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2101      	movs	r1, #1
 8001eba:	2037      	movs	r0, #55	@ 0x37
 8001ebc:	f001 fa33 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ec0:	2037      	movs	r0, #55	@ 0x37
 8001ec2:	f001 fa4c 	bl	800335e <HAL_NVIC_EnableIRQ>
}
 8001ec6:	e02e      	b.n	8001f26 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM12)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_TIM_Base_MspInit+0xd8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a15      	ldr	r2, [pc, #84]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
}
 8001eee:	e01a      	b.n	8001f26 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <HAL_TIM_Base_MspInit+0xdc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d115      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_TIM_Base_MspInit+0xd0>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	202d      	movs	r0, #45	@ 0x2d
 8001f1c:	f001 fa03 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f20:	202d      	movs	r0, #45	@ 0x2d
 8001f22:	f001 fa1c 	bl	800335e <HAL_NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40001400 	.word	0x40001400
 8001f38:	40001800 	.word	0x40001800
 8001f3c:	40002000 	.word	0x40002000

08001f40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <HAL_TIM_MspPostInit+0x68>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d11e      	bne.n	8001fa0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_TIM_MspPostInit+0x6c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a10      	ldr	r2, [pc, #64]	@ (8001fac <HAL_TIM_MspPostInit+0x6c>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <HAL_TIM_MspPostInit+0x6c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM2_Pin|SERVO_PWM1_Pin;
 8001f7e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f90:	2309      	movs	r3, #9
 8001f92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <HAL_TIM_MspPostInit+0x70>)
 8001f9c:	f001 fdfc 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40001800 	.word	0x40001800
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <MX_UART5_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_UART5_Init+0x4c>)
 8001fec:	f004 f8aa 	bl	8006144 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f7ff fc3f 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000090c 	.word	0x2000090c
 8002004:	40005000 	.word	0x40005000

08002008 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_USART1_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART1_UART_Init+0x4c>)
 8002040:	f004 f880 	bl	8006144 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f7ff fc15 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000954 	.word	0x20000954
 8002058:	40011000 	.word	0x40011000

0800205c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 8002062:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <MX_USART2_UART_Init+0x50>)
 8002064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 8002068:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800206c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002080:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 8002082:	220c      	movs	r2, #12
 8002084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_USART2_UART_Init+0x4c>)
 8002094:	f004 f856 	bl	8006144 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800209e:	f7ff fbeb 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000099c 	.word	0x2000099c
 80020ac:	40004400 	.word	0x40004400

080020b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_USART3_UART_Init+0x50>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <MX_USART3_UART_Init+0x4c>)
 80020e8:	f004 f82c 	bl	8006144 <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020f2:	f7ff fbc1 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200009e4 	.word	0x200009e4
 8002100:	40004800 	.word	0x40004800

08002104 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <MX_USART6_UART_Init+0x50>)
 800210c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 8002110:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002114:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 800212a:	220c      	movs	r2, #12
 800212c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212e:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	@ (8002150 <MX_USART6_UART_Init+0x4c>)
 800213c:	f004 f802 	bl	8006144 <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002146:	f7ff fb97 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000a2c 	.word	0x20000a2c
 8002154:	40011400 	.word	0x40011400

08002158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b092      	sub	sp, #72	@ 0x48
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <HAL_UART_MspInit+0x184>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f040 80c0 	bne.w	80022fc <HAL_UART_MspInit+0x1a4>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800217c:	2300      	movs	r3, #0
 800217e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002180:	4b57      	ldr	r3, [pc, #348]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	4a56      	ldr	r2, [pc, #344]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800218a:	6413      	str	r3, [r2, #64]	@ 0x40
 800218c:	4b54      	ldr	r3, [pc, #336]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002194:	633b      	str	r3, [r7, #48]	@ 0x30
 8002196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800219c:	4b50      	ldr	r3, [pc, #320]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a4f      	ldr	r2, [pc, #316]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b4d      	ldr	r3, [pc, #308]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b8:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021bc:	4a48      	ldr	r2, [pc, #288]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c4:	4b46      	ldr	r3, [pc, #280]	@ (80022e0 <HAL_UART_MspInit+0x188>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = HC06_RX_Pin;
 80021d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021e2:	2308      	movs	r3, #8
 80021e4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(HC06_RX_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021ea:	4619      	mov	r1, r3
 80021ec:	483d      	ldr	r0, [pc, #244]	@ (80022e4 <HAL_UART_MspInit+0x18c>)
 80021ee:	f001 fcd3 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HC06_TX_Pin;
 80021f2:	2304      	movs	r3, #4
 80021f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002202:	2308      	movs	r3, #8
 8002204:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(HC06_TX_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800220a:	4619      	mov	r1, r3
 800220c:	4836      	ldr	r0, [pc, #216]	@ (80022e8 <HAL_UART_MspInit+0x190>)
 800220e:	f001 fcc3 	bl	8003b98 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002212:	4b36      	ldr	r3, [pc, #216]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002214:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <HAL_UART_MspInit+0x198>)
 8002216:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002218:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <HAL_UART_MspInit+0x194>)
 800221a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800221e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002220:	4b32      	ldr	r3, [pc, #200]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800222c:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <HAL_UART_MspInit+0x194>)
 800222e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002232:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002234:	4b2d      	ldr	r3, [pc, #180]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223a:	4b2c      	ldr	r3, [pc, #176]	@ (80022ec <HAL_UART_MspInit+0x194>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002240:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002246:	4b29      	ldr	r3, [pc, #164]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224c:	4b27      	ldr	r3, [pc, #156]	@ (80022ec <HAL_UART_MspInit+0x194>)
 800224e:	2200      	movs	r2, #0
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002252:	4826      	ldr	r0, [pc, #152]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002254:	f001 f89e 	bl	8003394 <HAL_DMA_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800225e:	f7ff fb0b 	bl	8001878 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <HAL_UART_MspInit+0x194>)
 8002266:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002268:	4a20      	ldr	r2, [pc, #128]	@ (80022ec <HAL_UART_MspInit+0x194>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800226e:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 8002270:	4a21      	ldr	r2, [pc, #132]	@ (80022f8 <HAL_UART_MspInit+0x1a0>)
 8002272:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002274:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 8002276:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800227a:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 800227e:	2240      	movs	r2, #64	@ 0x40
 8002280:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002282:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002288:	4b1a      	ldr	r3, [pc, #104]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 800228a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800228e:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800229c:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022a2:	4b14      	ldr	r3, [pc, #80]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80022ae:	4811      	ldr	r0, [pc, #68]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 80022b0:	f001 f870 	bl	8003394 <HAL_DMA_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80022ba:	f7ff fadd 	bl	8001878 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80022c4:	4a0b      	ldr	r2, [pc, #44]	@ (80022f4 <HAL_UART_MspInit+0x19c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2035      	movs	r0, #53	@ 0x35
 80022d0:	f001 f829 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80022d4:	2035      	movs	r0, #53	@ 0x35
 80022d6:	f001 f842 	bl	800335e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80022da:	e287      	b.n	80027ec <HAL_UART_MspInit+0x694>
 80022dc:	40005000 	.word	0x40005000
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	20000a74 	.word	0x20000a74
 80022f0:	40026010 	.word	0x40026010
 80022f4:	20000ad4 	.word	0x20000ad4
 80022f8:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a96      	ldr	r2, [pc, #600]	@ (800255c <HAL_UART_MspInit+0x404>)
 8002302:	4293      	cmp	r3, r2
 8002304:	f040 8092 	bne.w	800242c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
 800230c:	4b94      	ldr	r3, [pc, #592]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800230e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002310:	4a93      	ldr	r2, [pc, #588]	@ (8002560 <HAL_UART_MspInit+0x408>)
 8002312:	f043 0310 	orr.w	r3, r3, #16
 8002316:	6453      	str	r3, [r2, #68]	@ 0x44
 8002318:	4b91      	ldr	r3, [pc, #580]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800231a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	4b8d      	ldr	r3, [pc, #564]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	4a8c      	ldr	r2, [pc, #560]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6313      	str	r3, [r2, #48]	@ 0x30
 8002334:	4b8a      	ldr	r3, [pc, #552]	@ (8002560 <HAL_UART_MspInit+0x408>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002340:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002352:	2307      	movs	r3, #7
 8002354:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800235a:	4619      	mov	r1, r3
 800235c:	4881      	ldr	r0, [pc, #516]	@ (8002564 <HAL_UART_MspInit+0x40c>)
 800235e:	f001 fc1b 	bl	8003b98 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002362:	4b81      	ldr	r3, [pc, #516]	@ (8002568 <HAL_UART_MspInit+0x410>)
 8002364:	4a81      	ldr	r2, [pc, #516]	@ (800256c <HAL_UART_MspInit+0x414>)
 8002366:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002368:	4b7f      	ldr	r3, [pc, #508]	@ (8002568 <HAL_UART_MspInit+0x410>)
 800236a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800236e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002370:	4b7d      	ldr	r3, [pc, #500]	@ (8002568 <HAL_UART_MspInit+0x410>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002376:	4b7c      	ldr	r3, [pc, #496]	@ (8002568 <HAL_UART_MspInit+0x410>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800237c:	4b7a      	ldr	r3, [pc, #488]	@ (8002568 <HAL_UART_MspInit+0x410>)
 800237e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002382:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002384:	4b78      	ldr	r3, [pc, #480]	@ (8002568 <HAL_UART_MspInit+0x410>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238a:	4b77      	ldr	r3, [pc, #476]	@ (8002568 <HAL_UART_MspInit+0x410>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002390:	4b75      	ldr	r3, [pc, #468]	@ (8002568 <HAL_UART_MspInit+0x410>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002396:	4b74      	ldr	r3, [pc, #464]	@ (8002568 <HAL_UART_MspInit+0x410>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239c:	4b72      	ldr	r3, [pc, #456]	@ (8002568 <HAL_UART_MspInit+0x410>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023a2:	4871      	ldr	r0, [pc, #452]	@ (8002568 <HAL_UART_MspInit+0x410>)
 80023a4:	f000 fff6 	bl	8003394 <HAL_DMA_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 80023ae:	f7ff fa63 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a6c      	ldr	r2, [pc, #432]	@ (8002568 <HAL_UART_MspInit+0x410>)
 80023b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002568 <HAL_UART_MspInit+0x410>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80023be:	4b6c      	ldr	r3, [pc, #432]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023c0:	4a6c      	ldr	r2, [pc, #432]	@ (8002574 <HAL_UART_MspInit+0x41c>)
 80023c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80023c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023cc:	4b68      	ldr	r3, [pc, #416]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023ce:	2240      	movs	r2, #64	@ 0x40
 80023d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d2:	4b67      	ldr	r3, [pc, #412]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023d8:	4b65      	ldr	r3, [pc, #404]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e0:	4b63      	ldr	r3, [pc, #396]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e6:	4b62      	ldr	r3, [pc, #392]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023ec:	4b60      	ldr	r3, [pc, #384]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <HAL_UART_MspInit+0x418>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023fe:	485c      	ldr	r0, [pc, #368]	@ (8002570 <HAL_UART_MspInit+0x418>)
 8002400:	f000 ffc8 	bl	8003394 <HAL_DMA_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 800240a:	f7ff fa35 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a57      	ldr	r2, [pc, #348]	@ (8002570 <HAL_UART_MspInit+0x418>)
 8002412:	639a      	str	r2, [r3, #56]	@ 0x38
 8002414:	4a56      	ldr	r2, [pc, #344]	@ (8002570 <HAL_UART_MspInit+0x418>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	2025      	movs	r0, #37	@ 0x25
 8002420:	f000 ff81 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002424:	2025      	movs	r0, #37	@ 0x25
 8002426:	f000 ff9a 	bl	800335e <HAL_NVIC_EnableIRQ>
}
 800242a:	e1df      	b.n	80027ec <HAL_UART_MspInit+0x694>
  else if(uartHandle->Instance==USART2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a51      	ldr	r2, [pc, #324]	@ (8002578 <HAL_UART_MspInit+0x420>)
 8002432:	4293      	cmp	r3, r2
 8002434:	f040 80ac 	bne.w	8002590 <HAL_UART_MspInit+0x438>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	4b48      	ldr	r3, [pc, #288]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	4a47      	ldr	r2, [pc, #284]	@ (8002560 <HAL_UART_MspInit+0x408>)
 8002442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002446:	6413      	str	r3, [r2, #64]	@ 0x40
 8002448:	4b45      	ldr	r3, [pc, #276]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	4b41      	ldr	r3, [pc, #260]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	4a40      	ldr	r2, [pc, #256]	@ (8002560 <HAL_UART_MspInit+0x408>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6313      	str	r3, [r2, #48]	@ 0x30
 8002464:	4b3e      	ldr	r3, [pc, #248]	@ (8002560 <HAL_UART_MspInit+0x408>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = JY62_TX_Pin|JY62_RX_Pin;
 8002470:	2360      	movs	r3, #96	@ 0x60
 8002472:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002480:	2307      	movs	r3, #7
 8002482:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002484:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002488:	4619      	mov	r1, r3
 800248a:	483c      	ldr	r0, [pc, #240]	@ (800257c <HAL_UART_MspInit+0x424>)
 800248c:	f001 fb84 	bl	8003b98 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002490:	4b3b      	ldr	r3, [pc, #236]	@ (8002580 <HAL_UART_MspInit+0x428>)
 8002492:	4a3c      	ldr	r2, [pc, #240]	@ (8002584 <HAL_UART_MspInit+0x42c>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002496:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <HAL_UART_MspInit+0x428>)
 8002498:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800249c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a4:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024aa:	4b35      	ldr	r3, [pc, #212]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b2:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b8:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024be:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024d0:	482b      	ldr	r0, [pc, #172]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024d2:	f000 ff5f 	bl	8003394 <HAL_DMA_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_UART_MspInit+0x388>
      Error_Handler();
 80024dc:	f7ff f9cc 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a27      	ldr	r2, [pc, #156]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024e6:	4a26      	ldr	r2, [pc, #152]	@ (8002580 <HAL_UART_MspInit+0x428>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80024ec:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <HAL_UART_MspInit+0x430>)
 80024ee:	4a27      	ldr	r2, [pc, #156]	@ (800258c <HAL_UART_MspInit+0x434>)
 80024f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80024f2:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <HAL_UART_MspInit+0x430>)
 80024f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fa:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <HAL_UART_MspInit+0x430>)
 80024fc:	2240      	movs	r2, #64	@ 0x40
 80024fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800250c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002514:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800251a:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_UART_MspInit+0x430>)
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002522:	2200      	movs	r2, #0
 8002524:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002526:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800252c:	4816      	ldr	r0, [pc, #88]	@ (8002588 <HAL_UART_MspInit+0x430>)
 800252e:	f000 ff31 	bl	8003394 <HAL_DMA_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_MspInit+0x3e4>
      Error_Handler();
 8002538:	f7ff f99e 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002540:	639a      	str	r2, [r3, #56]	@ 0x38
 8002542:	4a11      	ldr	r2, [pc, #68]	@ (8002588 <HAL_UART_MspInit+0x430>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2100      	movs	r1, #0
 800254c:	2026      	movs	r0, #38	@ 0x26
 800254e:	f000 feea 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002552:	2026      	movs	r0, #38	@ 0x26
 8002554:	f000 ff03 	bl	800335e <HAL_NVIC_EnableIRQ>
}
 8002558:	e148      	b.n	80027ec <HAL_UART_MspInit+0x694>
 800255a:	bf00      	nop
 800255c:	40011000 	.word	0x40011000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000
 8002568:	20000b34 	.word	0x20000b34
 800256c:	40026440 	.word	0x40026440
 8002570:	20000b94 	.word	0x20000b94
 8002574:	400264b8 	.word	0x400264b8
 8002578:	40004400 	.word	0x40004400
 800257c:	40020c00 	.word	0x40020c00
 8002580:	20000bf4 	.word	0x20000bf4
 8002584:	40026088 	.word	0x40026088
 8002588:	20000c54 	.word	0x20000c54
 800258c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a97      	ldr	r2, [pc, #604]	@ (80027f4 <HAL_UART_MspInit+0x69c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	f040 8092 	bne.w	80026c0 <HAL_UART_MspInit+0x568>
    __HAL_RCC_USART3_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	4b95      	ldr	r3, [pc, #596]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	4a94      	ldr	r2, [pc, #592]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80025a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ac:	4b92      	ldr	r3, [pc, #584]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	4b8e      	ldr	r3, [pc, #568]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	4a8d      	ldr	r2, [pc, #564]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c8:	4b8b      	ldr	r3, [pc, #556]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025e6:	2307      	movs	r3, #7
 80025e8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025ee:	4619      	mov	r1, r3
 80025f0:	4882      	ldr	r0, [pc, #520]	@ (80027fc <HAL_UART_MspInit+0x6a4>)
 80025f2:	f001 fad1 	bl	8003b98 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80025f6:	4b82      	ldr	r3, [pc, #520]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 80025f8:	4a82      	ldr	r2, [pc, #520]	@ (8002804 <HAL_UART_MspInit+0x6ac>)
 80025fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80025fc:	4b80      	ldr	r3, [pc, #512]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 80025fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002602:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002604:	4b7e      	ldr	r3, [pc, #504]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800260a:	4b7d      	ldr	r3, [pc, #500]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002610:	4b7b      	ldr	r3, [pc, #492]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 8002612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002616:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002618:	4b79      	ldr	r3, [pc, #484]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261e:	4b78      	ldr	r3, [pc, #480]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002624:	4b76      	ldr	r3, [pc, #472]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800262a:	4b75      	ldr	r3, [pc, #468]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002630:	4b73      	ldr	r3, [pc, #460]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 8002632:	2200      	movs	r2, #0
 8002634:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002636:	4872      	ldr	r0, [pc, #456]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 8002638:	f000 feac 	bl	8003394 <HAL_DMA_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_UART_MspInit+0x4ee>
      Error_Handler();
 8002642:	f7ff f919 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a6d      	ldr	r2, [pc, #436]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 800264a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800264c:	4a6c      	ldr	r2, [pc, #432]	@ (8002800 <HAL_UART_MspInit+0x6a8>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002652:	4b6d      	ldr	r3, [pc, #436]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 8002654:	4a6d      	ldr	r2, [pc, #436]	@ (800280c <HAL_UART_MspInit+0x6b4>)
 8002656:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002658:	4b6b      	ldr	r3, [pc, #428]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 800265a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800265e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002660:	4b69      	ldr	r3, [pc, #420]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 8002662:	2240      	movs	r2, #64	@ 0x40
 8002664:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002666:	4b68      	ldr	r3, [pc, #416]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800266c:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 800266e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002672:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002674:	4b64      	ldr	r3, [pc, #400]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 8002676:	2200      	movs	r2, #0
 8002678:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800267a:	4b63      	ldr	r3, [pc, #396]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002680:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002686:	4b60      	ldr	r3, [pc, #384]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800268c:	4b5e      	ldr	r3, [pc, #376]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002692:	485d      	ldr	r0, [pc, #372]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 8002694:	f000 fe7e 	bl	8003394 <HAL_DMA_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_UART_MspInit+0x54a>
      Error_Handler();
 800269e:	f7ff f8eb 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 80026a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80026a8:	4a57      	ldr	r2, [pc, #348]	@ (8002808 <HAL_UART_MspInit+0x6b0>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2027      	movs	r0, #39	@ 0x27
 80026b4:	f000 fe37 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026b8:	2027      	movs	r0, #39	@ 0x27
 80026ba:	f000 fe50 	bl	800335e <HAL_NVIC_EnableIRQ>
}
 80026be:	e095      	b.n	80027ec <HAL_UART_MspInit+0x694>
  else if(uartHandle->Instance==USART6)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a52      	ldr	r2, [pc, #328]	@ (8002810 <HAL_UART_MspInit+0x6b8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	f040 8090 	bne.w	80027ec <HAL_UART_MspInit+0x694>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	4b49      	ldr	r3, [pc, #292]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	4a48      	ldr	r2, [pc, #288]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	6453      	str	r3, [r2, #68]	@ 0x44
 80026dc:	4b46      	ldr	r3, [pc, #280]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80026de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	4b42      	ldr	r3, [pc, #264]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	4a41      	ldr	r2, [pc, #260]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f8:	4b3f      	ldr	r3, [pc, #252]	@ (80027f8 <HAL_UART_MspInit+0x6a0>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002704:	23c0      	movs	r3, #192	@ 0xc0
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002714:	2308      	movs	r3, #8
 8002716:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800271c:	4619      	mov	r1, r3
 800271e:	483d      	ldr	r0, [pc, #244]	@ (8002814 <HAL_UART_MspInit+0x6bc>)
 8002720:	f001 fa3a 	bl	8003b98 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002724:	4b3c      	ldr	r3, [pc, #240]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002726:	4a3d      	ldr	r2, [pc, #244]	@ (800281c <HAL_UART_MspInit+0x6c4>)
 8002728:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800272a:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 800272c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002730:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002732:	4b39      	ldr	r3, [pc, #228]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002738:	4b37      	ldr	r3, [pc, #220]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800273e:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002744:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002746:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800274c:	4b32      	ldr	r3, [pc, #200]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002752:	4b31      	ldr	r3, [pc, #196]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002754:	2200      	movs	r2, #0
 8002756:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002758:	4b2f      	ldr	r3, [pc, #188]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 800275a:	2200      	movs	r2, #0
 800275c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800275e:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002760:	2200      	movs	r2, #0
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002764:	482c      	ldr	r0, [pc, #176]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002766:	f000 fe15 	bl	8003394 <HAL_DMA_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_UART_MspInit+0x61c>
      Error_Handler();
 8002770:	f7ff f882 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a28      	ldr	r2, [pc, #160]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 8002778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800277a:	4a27      	ldr	r2, [pc, #156]	@ (8002818 <HAL_UART_MspInit+0x6c0>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002780:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 8002782:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <HAL_UART_MspInit+0x6cc>)
 8002784:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 8002788:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800278c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 8002790:	2240      	movs	r2, #64	@ 0x40
 8002792:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800279a:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 800279c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027a0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80027c0:	4817      	ldr	r0, [pc, #92]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027c2:	f000 fde7 	bl	8003394 <HAL_DMA_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_UART_MspInit+0x678>
      Error_Handler();
 80027cc:	f7ff f854 	bl	8001878 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80027d6:	4a12      	ldr	r2, [pc, #72]	@ (8002820 <HAL_UART_MspInit+0x6c8>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80027dc:	2200      	movs	r2, #0
 80027de:	2100      	movs	r1, #0
 80027e0:	2047      	movs	r0, #71	@ 0x47
 80027e2:	f000 fda0 	bl	8003326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027e6:	2047      	movs	r0, #71	@ 0x47
 80027e8:	f000 fdb9 	bl	800335e <HAL_NVIC_EnableIRQ>
}
 80027ec:	bf00      	nop
 80027ee:	3748      	adds	r7, #72	@ 0x48
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40004800 	.word	0x40004800
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020400 	.word	0x40020400
 8002800:	20000cb4 	.word	0x20000cb4
 8002804:	40026028 	.word	0x40026028
 8002808:	20000d14 	.word	0x20000d14
 800280c:	40026058 	.word	0x40026058
 8002810:	40011400 	.word	0x40011400
 8002814:	40020800 	.word	0x40020800
 8002818:	20000d74 	.word	0x20000d74
 800281c:	40026428 	.word	0x40026428
 8002820:	20000dd4 	.word	0x20000dd4
 8002824:	400264a0 	.word	0x400264a0

08002828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002860 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800282c:	f7ff f9f2 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002830:	480c      	ldr	r0, [pc, #48]	@ (8002864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002832:	490d      	ldr	r1, [pc, #52]	@ (8002868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002834:	4a0d      	ldr	r2, [pc, #52]	@ (800286c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002848:	4c0a      	ldr	r4, [pc, #40]	@ (8002874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002856:	f005 fec5 	bl	80085e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285a:	f7fe fd55 	bl	8001308 <main>
  bx  lr    
 800285e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002860:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002868:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800286c:	0800d04c 	.word	0x0800d04c
  ldr r2, =_sbss
 8002870:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002874:	2000140c 	.word	0x2000140c

08002878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002878:	e7fe      	b.n	8002878 <ADC_IRQHandler>

0800287a <PID_Angle_init>:
#include "Angle_PID.h"

void PID_Angle_init(PID_Angle *pid,float target_val,float Kp,float Ki,float Kd)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	6178      	str	r0, [r7, #20]
 8002882:	ed87 0a04 	vstr	s0, [r7, #16]
 8002886:	edc7 0a03 	vstr	s1, [r7, #12]
 800288a:	ed87 1a02 	vstr	s2, [r7, #8]
 800288e:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
	pid->Kp = Kp;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	609a      	str	r2, [r3, #8]


}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af02      	add	r7, sp, #8
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	9200      	str	r2, [sp, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	2178      	movs	r1, #120	@ 0x78
 80028d2:	4803      	ldr	r0, [pc, #12]	@ (80028e0 <OLED_Send+0x28>)
 80028d4:	f001 fc5a 	bl	800418c <HAL_I2C_Master_Transmit>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	2000021c 	.word	0x2000021c

080028e4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <OLED_SendCmd+0x20>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80028f4:	2102      	movs	r1, #2
 80028f6:	4803      	ldr	r0, [pc, #12]	@ (8002904 <OLED_SendCmd+0x20>)
 80028f8:	f7ff ffde 	bl	80028b8 <OLED_Send>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20001234 	.word	0x20001234

08002908 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800290c:	20ae      	movs	r0, #174	@ 0xae
 800290e:	f7ff ffe9 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8002912:	2020      	movs	r0, #32
 8002914:	f7ff ffe6 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002918:	2010      	movs	r0, #16
 800291a:	f7ff ffe3 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800291e:	20b0      	movs	r0, #176	@ 0xb0
 8002920:	f7ff ffe0 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8002924:	20c8      	movs	r0, #200	@ 0xc8
 8002926:	f7ff ffdd 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff ffda 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8002930:	2010      	movs	r0, #16
 8002932:	f7ff ffd7 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8002936:	2040      	movs	r0, #64	@ 0x40
 8002938:	f7ff ffd4 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 800293c:	2081      	movs	r0, #129	@ 0x81
 800293e:	f7ff ffd1 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8002942:	20df      	movs	r0, #223	@ 0xdf
 8002944:	f7ff ffce 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8002948:	20a1      	movs	r0, #161	@ 0xa1
 800294a:	f7ff ffcb 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 800294e:	20a6      	movs	r0, #166	@ 0xa6
 8002950:	f7ff ffc8 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8002954:	20a8      	movs	r0, #168	@ 0xa8
 8002956:	f7ff ffc5 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800295a:	203f      	movs	r0, #63	@ 0x3f
 800295c:	f7ff ffc2 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8002960:	20a4      	movs	r0, #164	@ 0xa4
 8002962:	f7ff ffbf 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8002966:	20d3      	movs	r0, #211	@ 0xd3
 8002968:	f7ff ffbc 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff ffb9 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8002972:	20d5      	movs	r0, #213	@ 0xd5
 8002974:	f7ff ffb6 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8002978:	20f0      	movs	r0, #240	@ 0xf0
 800297a:	f7ff ffb3 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 800297e:	20d9      	movs	r0, #217	@ 0xd9
 8002980:	f7ff ffb0 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8002984:	2022      	movs	r0, #34	@ 0x22
 8002986:	f7ff ffad 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800298a:	20da      	movs	r0, #218	@ 0xda
 800298c:	f7ff ffaa 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8002990:	2012      	movs	r0, #18
 8002992:	f7ff ffa7 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8002996:	20db      	movs	r0, #219	@ 0xdb
 8002998:	f7ff ffa4 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 800299c:	2020      	movs	r0, #32
 800299e:	f7ff ffa1 	bl	80028e4 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80029a2:	208d      	movs	r0, #141	@ 0x8d
 80029a4:	f7ff ff9e 	bl	80028e4 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80029a8:	2014      	movs	r0, #20
 80029aa:	f7ff ff9b 	bl	80028e4 <OLED_SendCmd>

  OLED_NewFrame();
 80029ae:	f000 f807 	bl	80029c0 <OLED_NewFrame>
  OLED_ShowFrame();
 80029b2:	f000 f811 	bl	80029d8 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80029b6:	20af      	movs	r0, #175	@ 0xaf
 80029b8:	f7ff ff94 	bl	80028e4 <OLED_SendCmd>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80029c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c8:	2100      	movs	r1, #0
 80029ca:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <OLED_NewFrame+0x14>)
 80029cc:	f005 fdb1 	bl	8008532 <memset>
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000e34 	.word	0x20000e34

080029d8 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <OLED_ShowFrame+0x5c>)
 80029e0:	2240      	movs	r2, #64	@ 0x40
 80029e2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	e01b      	b.n	8002a22 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	3b50      	subs	r3, #80	@ 0x50
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff77 	bl	80028e4 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7ff ff74 	bl	80028e4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80029fc:	2010      	movs	r0, #16
 80029fe:	f7ff ff71 	bl	80028e4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002a02:	480d      	ldr	r0, [pc, #52]	@ (8002a38 <OLED_ShowFrame+0x60>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	01db      	lsls	r3, r3, #7
 8002a08:	4a0c      	ldr	r2, [pc, #48]	@ (8002a3c <OLED_ShowFrame+0x64>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	2280      	movs	r2, #128	@ 0x80
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f005 fe0f 	bl	8008632 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002a14:	2181      	movs	r1, #129	@ 0x81
 8002a16:	4807      	ldr	r0, [pc, #28]	@ (8002a34 <OLED_ShowFrame+0x5c>)
 8002a18:	f7ff ff4e 	bl	80028b8 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	71fb      	strb	r3, [r7, #7]
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	2b07      	cmp	r3, #7
 8002a26:	d9e0      	bls.n	80029ea <OLED_ShowFrame+0x12>
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20001238 	.word	0x20001238
 8002a38:	20001239 	.word	0x20001239
 8002a3c:	20000e34 	.word	0x20000e34

08002a40 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002a40:	b490      	push	{r4, r7}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4604      	mov	r4, r0
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	71fb      	strb	r3, [r7, #7]
 8002a52:	4603      	mov	r3, r0
 8002a54:	71bb      	strb	r3, [r7, #6]
 8002a56:	460b      	mov	r3, r1
 8002a58:	717b      	strb	r3, [r7, #5]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b07      	cmp	r3, #7
 8002a62:	d85f      	bhi.n	8002b24 <OLED_SetByte_Fine+0xe4>
 8002a64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db5b      	blt.n	8002b24 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8002a6c:	7d3b      	ldrb	r3, [r7, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8002a72:	797b      	ldrb	r3, [r7, #5]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8002a78:	7c3b      	ldrb	r3, [r7, #16]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	22ff      	movs	r2, #255	@ 0xff
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	b25a      	sxtb	r2, r3
 8002a84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	b25a      	sxtb	r2, r3
 8002a8c:	793b      	ldrb	r3, [r7, #4]
 8002a8e:	f1c3 0308 	rsb	r3, r3, #8
 8002a92:	21ff      	movs	r1, #255	@ 0xff
 8002a94:	fa41 f303 	asr.w	r3, r1, r3
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b23      	ldr	r3, [pc, #140]	@ (8002b30 <OLED_SetByte_Fine+0xf0>)
 8002aa2:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8002aa4:	79fa      	ldrb	r2, [r7, #7]
 8002aa6:	79bb      	ldrb	r3, [r7, #6]
 8002aa8:	4922      	ldr	r1, [pc, #136]	@ (8002b34 <OLED_SetByte_Fine+0xf4>)
 8002aaa:	01d2      	lsls	r2, r2, #7
 8002aac:	440a      	add	r2, r1
 8002aae:	4413      	add	r3, r2
 8002ab0:	7818      	ldrb	r0, [r3, #0]
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b30 <OLED_SetByte_Fine+0xf0>)
 8002ab4:	7819      	ldrb	r1, [r3, #0]
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	4001      	ands	r1, r0
 8002abc:	b2c8      	uxtb	r0, r1
 8002abe:	491d      	ldr	r1, [pc, #116]	@ (8002b34 <OLED_SetByte_Fine+0xf4>)
 8002ac0:	01d2      	lsls	r2, r2, #7
 8002ac2:	440a      	add	r2, r1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8002aca:	7c3b      	ldrb	r3, [r7, #16]
 8002acc:	3301      	adds	r3, #1
 8002ace:	22ff      	movs	r2, #255	@ 0xff
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	b25a      	sxtb	r2, r3
 8002ada:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	b25a      	sxtb	r2, r3
 8002ae2:	793b      	ldrb	r3, [r7, #4]
 8002ae4:	f1c3 0308 	rsb	r3, r3, #8
 8002ae8:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8002aec:	fa41 f303 	asr.w	r3, r1, r3
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	4013      	ands	r3, r2
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <OLED_SetByte_Fine+0xf0>)
 8002afa:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8002afc:	79fa      	ldrb	r2, [r7, #7]
 8002afe:	79bb      	ldrb	r3, [r7, #6]
 8002b00:	490c      	ldr	r1, [pc, #48]	@ (8002b34 <OLED_SetByte_Fine+0xf4>)
 8002b02:	01d2      	lsls	r2, r2, #7
 8002b04:	440a      	add	r2, r1
 8002b06:	4413      	add	r3, r2
 8002b08:	7818      	ldrb	r0, [r3, #0]
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <OLED_SetByte_Fine+0xf0>)
 8002b0c:	7819      	ldrb	r1, [r3, #0]
 8002b0e:	79fa      	ldrb	r2, [r7, #7]
 8002b10:	79bb      	ldrb	r3, [r7, #6]
 8002b12:	4301      	orrs	r1, r0
 8002b14:	b2c8      	uxtb	r0, r1
 8002b16:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <OLED_SetByte_Fine+0xf4>)
 8002b18:	01d2      	lsls	r2, r2, #7
 8002b1a:	440a      	add	r2, r1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4602      	mov	r2, r0
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e000      	b.n	8002b26 <OLED_SetByte_Fine+0xe6>
    return;
 8002b24:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc90      	pop	{r4, r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200012b9 	.word	0x200012b9
 8002b34:	20000e34 	.word	0x20000e34

08002b38 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4608      	mov	r0, r1
 8002b42:	4611      	mov	r1, r2
 8002b44:	461a      	mov	r2, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	71fb      	strb	r3, [r7, #7]
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71bb      	strb	r3, [r7, #6]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	717b      	strb	r3, [r7, #5]
 8002b52:	4613      	mov	r3, r2
 8002b54:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002b56:	79bb      	ldrb	r3, [r7, #6]
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002b5c:	79bb      	ldrb	r3, [r7, #6]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002b64:	7bba      	ldrb	r2, [r7, #14]
 8002b66:	793b      	ldrb	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	dd29      	ble.n	8002bc2 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002b6e:	797a      	ldrb	r2, [r7, #5]
 8002b70:	7bbb      	ldrb	r3, [r7, #14]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	7bbc      	ldrb	r4, [r7, #14]
 8002b7a:	79f9      	ldrb	r1, [r7, #7]
 8002b7c:	7bf8      	ldrb	r0, [r7, #15]
 8002b7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	2307      	movs	r3, #7
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	4623      	mov	r3, r4
 8002b8a:	f7ff ff59 	bl	8002a40 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	3301      	adds	r3, #1
 8002b92:	b2d8      	uxtb	r0, r3
 8002b94:	797a      	ldrb	r2, [r7, #5]
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	f1c3 0308 	rsb	r3, r3, #8
 8002b9c:	fa42 f303 	asr.w	r3, r2, r3
 8002ba0:	b2dc      	uxtb	r4, r3
 8002ba2:	793a      	ldrb	r2, [r7, #4]
 8002ba4:	7bbb      	ldrb	r3, [r7, #14]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	3b09      	subs	r3, #9
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	79f9      	ldrb	r1, [r7, #7]
 8002bb0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bb4:	9201      	str	r2, [sp, #4]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4622      	mov	r2, r4
 8002bbc:	f7ff ff40 	bl	8002a40 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8002bc0:	e015      	b.n	8002bee <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8002bc2:	797a      	ldrb	r2, [r7, #5]
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	b2dc      	uxtb	r4, r3
 8002bcc:	7bba      	ldrb	r2, [r7, #14]
 8002bce:	793b      	ldrb	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	7bbd      	ldrb	r5, [r7, #14]
 8002bda:	79f9      	ldrb	r1, [r7, #7]
 8002bdc:	7bf8      	ldrb	r0, [r7, #15]
 8002bde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002be2:	9201      	str	r2, [sp, #4]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	462b      	mov	r3, r5
 8002be8:	4622      	mov	r2, r4
 8002bea:	f7ff ff29 	bl	8002a40 <OLED_SetByte_Fine>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdb0      	pop	{r4, r5, r7, pc}

08002bf6 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8002bf6:	b590      	push	{r4, r7, lr}
 8002bf8:	b087      	sub	sp, #28
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	4608      	mov	r0, r1
 8002c00:	4611      	mov	r1, r2
 8002c02:	461a      	mov	r2, r3
 8002c04:	4623      	mov	r3, r4
 8002c06:	71fb      	strb	r3, [r7, #7]
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71bb      	strb	r3, [r7, #6]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	717b      	strb	r3, [r7, #5]
 8002c10:	4613      	mov	r3, r2
 8002c12:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002c14:	79bb      	ldrb	r3, [r7, #6]
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002c1a:	79bb      	ldrb	r3, [r7, #6]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002c22:	797a      	ldrb	r2, [r7, #5]
 8002c24:	7bbb      	ldrb	r3, [r7, #14]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	7bbc      	ldrb	r4, [r7, #14]
 8002c2e:	79f9      	ldrb	r1, [r7, #7]
 8002c30:	7bf8      	ldrb	r0, [r7, #15]
 8002c32:	793b      	ldrb	r3, [r7, #4]
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2307      	movs	r3, #7
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	f7ff ff00 	bl	8002a40 <OLED_SetByte_Fine>
  if (bit)
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d014      	beq.n	8002c70 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b2d8      	uxtb	r0, r3
 8002c4c:	797a      	ldrb	r2, [r7, #5]
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	f1c3 0308 	rsb	r3, r3, #8
 8002c54:	fa42 f303 	asr.w	r3, r2, r3
 8002c58:	b2dc      	uxtb	r4, r3
 8002c5a:	7bbb      	ldrb	r3, [r7, #14]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	79f9      	ldrb	r1, [r7, #7]
 8002c62:	793a      	ldrb	r2, [r7, #4]
 8002c64:	9201      	str	r2, [sp, #4]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	f7ff fee8 	bl	8002a40 <OLED_SetByte_Fine>
  }
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}

08002c78 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	603a      	str	r2, [r7, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
 8002c86:	460b      	mov	r3, r1
 8002c88:	71bb      	strb	r3, [r7, #6]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8002c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8002c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e025      	b.n	8002cf2 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73bb      	strb	r3, [r7, #14]
 8002caa:	e01b      	b.n	8002ce4 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8002cac:	79fa      	ldrb	r2, [r7, #7]
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b2d8      	uxtb	r0, r3
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	79bb      	ldrb	r3, [r7, #6]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b2dc      	uxtb	r4, r3
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	7bbb      	ldrb	r3, [r7, #14]
 8002cc4:	7979      	ldrb	r1, [r7, #5]
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002cd8:	4621      	mov	r1, r4
 8002cda:	f7ff ff8c 	bl	8002bf6 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 8002cde:	7bbb      	ldrb	r3, [r7, #14]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	73bb      	strb	r3, [r7, #14]
 8002ce4:	7bba      	ldrb	r2, [r7, #14]
 8002ce6:	7b3b      	ldrb	r3, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3df      	bcc.n	8002cac <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	797b      	ldrb	r3, [r7, #5]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d3d5      	bcc.n	8002ca6 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d028      	beq.n	8002d52 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8002d00:	797b      	ldrb	r3, [r7, #5]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	7b3b      	ldrb	r3, [r7, #12]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	fb12 f303 	smulbb	r3, r2, r3
 8002d0c:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	737b      	strb	r3, [r7, #13]
 8002d12:	e01a      	b.n	8002d4a <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8002d14:	79fa      	ldrb	r2, [r7, #7]
 8002d16:	7b7b      	ldrb	r3, [r7, #13]
 8002d18:	4413      	add	r3, r2
 8002d1a:	b2d8      	uxtb	r0, r3
 8002d1c:	7b3b      	ldrb	r3, [r7, #12]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	79bb      	ldrb	r3, [r7, #6]
 8002d24:	4413      	add	r3, r2
 8002d26:	b2d9      	uxtb	r1, r3
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	7b7b      	ldrb	r3, [r7, #13]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	461a      	mov	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	7afc      	ldrb	r4, [r7, #11]
 8002d38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4623      	mov	r3, r4
 8002d40:	f7ff fefa 	bl	8002b38 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002d44:	7b7b      	ldrb	r3, [r7, #13]
 8002d46:	3301      	adds	r3, #1
 8002d48:	737b      	strb	r3, [r7, #13]
 8002d4a:	7b7a      	ldrb	r2, [r7, #13]
 8002d4c:	797b      	ldrb	r3, [r7, #5]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3e0      	bcc.n	8002d14 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}

08002d5a <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8002d5a:	b5b0      	push	{r4, r5, r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af02      	add	r7, sp, #8
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
 8002d66:	460b      	mov	r3, r1
 8002d68:	71bb      	strb	r3, [r7, #6]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	797b      	ldrb	r3, [r7, #5]
 8002d74:	f1a3 0120 	sub.w	r1, r3, #32
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	3307      	adds	r3, #7
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da00      	bge.n	8002d84 <OLED_PrintASCIIChar+0x2a>
 8002d82:	3307      	adds	r3, #7
 8002d84:	10db      	asrs	r3, r3, #3
 8002d86:	4618      	mov	r0, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	fb00 f303 	mul.w	r3, r0, r3
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	785d      	ldrb	r5, [r3, #1]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	79b9      	ldrb	r1, [r7, #6]
 8002da0:	79f8      	ldrb	r0, [r7, #7]
 8002da2:	7e3a      	ldrb	r2, [r7, #24]
 8002da4:	9201      	str	r2, [sp, #4]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	462b      	mov	r3, r5
 8002daa:	4622      	mov	r2, r4
 8002dac:	f7ff ff64 	bl	8002c78 <OLED_SetBlock>
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bdb0      	pop	{r4, r5, r7, pc}

08002db8 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db01      	blt.n	8002dce <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e018      	b.n	8002e00 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8002dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002dd8:	d101      	bne.n	8002dde <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e010      	b.n	8002e00 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de6:	2be0      	cmp	r3, #224	@ 0xe0
 8002de8:	d101      	bne.n	8002dee <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e008      	b.n	8002e00 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8002df6:	2bf0      	cmp	r3, #240	@ 0xf0
 8002df8:	d101      	bne.n	8002dfe <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e000      	b.n	8002e00 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60ba      	str	r2, [r7, #8]
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	4603      	mov	r3, r0
 8002e18:	73fb      	strb	r3, [r7, #15]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002e1e:	2300      	movs	r3, #0
 8002e20:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	3307      	adds	r3, #7
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da00      	bge.n	8002e2e <OLED_PrintString+0x22>
 8002e2c:	3307      	adds	r3, #7
 8002e2e:	10db      	asrs	r3, r3, #3
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	fb12 f303 	smulbb	r3, r2, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8002e40:	e07d      	b.n	8002f3e <OLED_PrintString+0x132>
  {
    found = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002e46:	8bfb      	ldrh	r3, [r7, #30]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ffb3 	bl	8002db8 <_OLED_GetUTF8Len>
 8002e52:	4603      	mov	r3, r0
 8002e54:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002e56:	7ebb      	ldrb	r3, [r7, #26]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d078      	beq.n	8002f4e <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	773b      	strb	r3, [r7, #28]
 8002e60:	e032      	b.n	8002ec8 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	7f3a      	ldrb	r2, [r7, #28]
 8002e68:	7ef9      	ldrb	r1, [r7, #27]
 8002e6a:	fb01 f202 	mul.w	r2, r1, r2
 8002e6e:	4413      	add	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002e72:	8bfb      	ldrh	r3, [r7, #30]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4413      	add	r3, r2
 8002e78:	7eba      	ldrb	r2, [r7, #26]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f005 fb48 	bl	8008512 <memcmp>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11c      	bne.n	8002ec2 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1d1c      	adds	r4, r3, #4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	785d      	ldrb	r5, [r3, #1]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	7bb9      	ldrb	r1, [r7, #14]
 8002e96:	7bf8      	ldrb	r0, [r7, #15]
 8002e98:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002e9c:	9201      	str	r2, [sp, #4]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	f7ff fee8 	bl	8002c78 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	785a      	ldrb	r2, [r3, #1]
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	4413      	add	r3, r2
 8002eb0:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002eb2:	7ebb      	ldrb	r3, [r7, #26]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	8bfb      	ldrh	r3, [r7, #30]
 8002eb8:	4413      	add	r3, r2
 8002eba:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	777b      	strb	r3, [r7, #29]
        break;
 8002ec0:	e007      	b.n	8002ed2 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 8002ec2:	7f3b      	ldrb	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	773b      	strb	r3, [r7, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7a1b      	ldrb	r3, [r3, #8]
 8002ecc:	7f3a      	ldrb	r2, [r7, #28]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d3c7      	bcc.n	8002e62 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 8002ed2:	7f7b      	ldrb	r3, [r7, #29]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d132      	bne.n	8002f3e <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8002ed8:	7ebb      	ldrb	r3, [r7, #26]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d119      	bne.n	8002f12 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 8002ede:	8bfb      	ldrh	r3, [r7, #30]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68dc      	ldr	r4, [r3, #12]
 8002eea:	7bb9      	ldrb	r1, [r7, #14]
 8002eec:	7bf8      	ldrb	r0, [r7, #15]
 8002eee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	f7ff ff30 	bl	8002d5a <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	785a      	ldrb	r2, [r3, #1]
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	4413      	add	r3, r2
 8002f04:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002f06:	7ebb      	ldrb	r3, [r7, #26]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	8bfb      	ldrh	r3, [r7, #30]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	83fb      	strh	r3, [r7, #30]
 8002f10:	e015      	b.n	8002f3e <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	7bb9      	ldrb	r1, [r7, #14]
 8002f18:	7bf8      	ldrb	r0, [r7, #15]
 8002f1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	2220      	movs	r2, #32
 8002f24:	f7ff ff19 	bl	8002d5a <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	785a      	ldrb	r2, [r3, #1]
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	4413      	add	r3, r2
 8002f32:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002f34:	7ebb      	ldrb	r3, [r7, #26]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	8bfb      	ldrh	r3, [r7, #30]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8002f3e:	8bfb      	ldrh	r3, [r7, #30]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f47f af7b 	bne.w	8002e42 <OLED_PrintString+0x36>
      }
    }
  }
}
 8002f4c:	e000      	b.n	8002f50 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8002f4e:	bf00      	nop
}
 8002f50:	bf00      	nop
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bdb0      	pop	{r4, r5, r7, pc}

08002f58 <Set_Servo_Angle>:





void Set_Servo_Angle(uint8_t servo_id, float angle,float pwm) {
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f64:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f68:	73fb      	strb	r3, [r7, #15]
    uint16_t pulse = MIN_PULSE + (uint16_t)((MAX_PULSE - MIN_PULSE) * angle / ANGLE_RANGE);
 8002f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f6e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002fec <Set_Servo_Angle+0x94>
 8002f72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f76:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002ff0 <Set_Servo_Angle+0x98>
 8002f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f82:	ee17 3a90 	vmov	r3, s15
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002f8c:	82fb      	strh	r3, [r7, #22]

    switch(servo_id) {
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <Set_Servo_Angle+0x42>
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d01f      	beq.n	8002fd8 <Set_Servo_Angle+0x80>

            TIM12->CCR2 = pulse;
            break;

    }
}
 8002f98:	e022      	b.n	8002fe0 <Set_Servo_Angle+0x88>
if(pwm>2500) pwm=2500;
 8002f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f9e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002ff4 <Set_Servo_Angle+0x9c>
 8002fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	dd01      	ble.n	8002fb0 <Set_Servo_Angle+0x58>
 8002fac:	4b12      	ldr	r3, [pc, #72]	@ (8002ff8 <Set_Servo_Angle+0xa0>)
 8002fae:	607b      	str	r3, [r7, #4]
if(pwm<500)	pwm=500;
 8002fb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002ffc <Set_Servo_Angle+0xa4>
 8002fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc0:	d501      	bpl.n	8002fc6 <Set_Servo_Angle+0x6e>
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <Set_Servo_Angle+0xa8>)
 8002fc4:	607b      	str	r3, [r7, #4]
        TIM12->CCR1 = pwm;
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <Set_Servo_Angle+0xac>)
 8002fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd0:	ee17 2a90 	vmov	r2, s15
 8002fd4:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8002fd6:	e003      	b.n	8002fe0 <Set_Servo_Angle+0x88>
            TIM12->CCR2 = pulse;
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003004 <Set_Servo_Angle+0xac>)
 8002fda:	8afb      	ldrh	r3, [r7, #22]
 8002fdc:	6393      	str	r3, [r2, #56]	@ 0x38
            break;
 8002fde:	bf00      	nop
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	44fa0000 	.word	0x44fa0000
 8002ff0:	43870000 	.word	0x43870000
 8002ff4:	451c4000 	.word	0x451c4000
 8002ff8:	451c4000 	.word	0x451c4000
 8002ffc:	43fa0000 	.word	0x43fa0000
 8003000:	43fa0000 	.word	0x43fa0000
 8003004:	40001800 	.word	0x40001800

08003008 <PID_Servo_init>:
void PID_Servo_init(PID_Servo *pid,float target_val,float Kp,float Ki,float Kd)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6178      	str	r0, [r7, #20]
 8003010:	ed87 0a04 	vstr	s0, [r7, #16]
 8003014:	edc7 0a03 	vstr	s1, [r7, #12]
 8003018:	ed87 1a02 	vstr	s2, [r7, #8]
 800301c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->target_val=target_val;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	601a      	str	r2, [r3, #0]
	pid->Kp = Kp;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	611a      	str	r2, [r3, #16]
	pid->Ki = Ki;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	615a      	str	r2, [r3, #20]
	pid->Kd = Kd;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <HAL_Init+0x40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0d      	ldr	r2, [pc, #52]	@ (8003084 <HAL_Init+0x40>)
 800304e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003054:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <HAL_Init+0x40>)
 800305a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800305e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003060:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a07      	ldr	r2, [pc, #28]	@ (8003084 <HAL_Init+0x40>)
 8003066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306c:	2003      	movs	r0, #3
 800306e:	f000 f94f 	bl	8003310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003072:	2000      	movs	r0, #0
 8003074:	f000 f808 	bl	8003088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003078:	f7fe fc04 	bl	8001884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023c00 	.word	0x40023c00

08003088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003090:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <HAL_InitTick+0x54>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <HAL_InitTick+0x58>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800309e:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f967 	bl	800337a <HAL_SYSTICK_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00e      	b.n	80030d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d80a      	bhi.n	80030d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030bc:	2200      	movs	r2, #0
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f000 f92f 	bl	8003326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c8:	4a06      	ldr	r2, [pc, #24]	@ (80030e4 <HAL_InitTick+0x5c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e000      	b.n	80030d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	2000002c 	.word	0x2000002c
 80030e0:	20000034 	.word	0x20000034
 80030e4:	20000030 	.word	0x20000030

080030e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_IncTick+0x20>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <HAL_IncTick+0x24>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a04      	ldr	r2, [pc, #16]	@ (800310c <HAL_IncTick+0x24>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000034 	.word	0x20000034
 800310c:	200012bc 	.word	0x200012bc

08003110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return uwTick;
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_GetTick+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	200012bc 	.word	0x200012bc

08003128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff ffee 	bl	8003110 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d005      	beq.n	800314e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003142:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <HAL_Delay+0x44>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800314e:	bf00      	nop
 8003150:	f7ff ffde 	bl	8003110 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d8f7      	bhi.n	8003150 <HAL_Delay+0x28>
  {
  }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000034 	.word	0x20000034

08003170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800318c:	4013      	ands	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800319c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a2:	4a04      	ldr	r2, [pc, #16]	@ (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	60d3      	str	r3, [r2, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <__NVIC_GetPriorityGrouping+0x18>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 0307 	and.w	r3, r3, #7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	db0b      	blt.n	80031fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4907      	ldr	r1, [pc, #28]	@ (800320c <__NVIC_EnableIRQ+0x38>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2001      	movs	r0, #1
 80031f6:	fa00 f202 	lsl.w	r2, r0, r2
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000e100 	.word	0xe000e100

08003210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	@ (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	@ (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	@ 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
         );
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	@ 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032dc:	d301      	bcc.n	80032e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032de:	2301      	movs	r3, #1
 80032e0:	e00f      	b.n	8003302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032e2:	4a0a      	ldr	r2, [pc, #40]	@ (800330c <SysTick_Config+0x40>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ea:	210f      	movs	r1, #15
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f7ff ff8e 	bl	8003210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <SysTick_Config+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <SysTick_Config+0x40>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010

08003310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff29 	bl	8003170 <__NVIC_SetPriorityGrouping>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003338:	f7ff ff3e 	bl	80031b8 <__NVIC_GetPriorityGrouping>
 800333c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff ff8e 	bl	8003264 <NVIC_EncodePriority>
 8003348:	4602      	mov	r2, r0
 800334a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff5d 	bl	8003210 <__NVIC_SetPriority>
}
 8003356:	bf00      	nop
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff31 	bl	80031d4 <__NVIC_EnableIRQ>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ffa2 	bl	80032cc <SysTick_Config>
 8003388:	4603      	mov	r3, r0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff feb6 	bl	8003110 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e099      	b.n	80034e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d0:	e00f      	b.n	80033f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033d2:	f7ff fe9d 	bl	8003110 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d908      	bls.n	80033f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e078      	b.n	80034e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e8      	bne.n	80033d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <HAL_DMA_Init+0x158>)
 800340c:	4013      	ands	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800341e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	2b04      	cmp	r3, #4
 800344a:	d107      	bne.n	800345c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	4313      	orrs	r3, r2
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	2b04      	cmp	r3, #4
 8003484:	d117      	bne.n	80034b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fb01 	bl	8003aa0 <DMA_CheckFifoParam>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2240      	movs	r2, #64	@ 0x40
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034b2:	2301      	movs	r3, #1
 80034b4:	e016      	b.n	80034e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fab8 	bl	8003a34 <DMA_CalcBaseAndBitshift>
 80034c4:	4603      	mov	r3, r0
 80034c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	223f      	movs	r2, #63	@ 0x3f
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	f010803f 	.word	0xf010803f

080034f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_DMA_Start_IT+0x26>
 8003512:	2302      	movs	r3, #2
 8003514:	e040      	b.n	8003598 <HAL_DMA_Start_IT+0xa8>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d12f      	bne.n	800358a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fa4a 	bl	80039d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003548:	223f      	movs	r2, #63	@ 0x3f
 800354a:	409a      	lsls	r2, r3
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0216 	orr.w	r2, r2, #22
 800355e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0208 	orr.w	r2, r2, #8
 8003576:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e005      	b.n	8003596 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003596:	7dfb      	ldrb	r3, [r7, #23]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035ae:	f7ff fdaf 	bl	8003110 <HAL_GetTick>
 80035b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d008      	beq.n	80035d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2280      	movs	r2, #128	@ 0x80
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e052      	b.n	8003678 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0216 	bic.w	r2, r2, #22
 80035e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <HAL_DMA_Abort+0x62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0208 	bic.w	r2, r2, #8
 8003610:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003622:	e013      	b.n	800364c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003624:	f7ff fd74 	bl	8003110 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b05      	cmp	r3, #5
 8003630:	d90c      	bls.n	800364c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2203      	movs	r2, #3
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e015      	b.n	8003678 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e4      	bne.n	8003624 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365e:	223f      	movs	r2, #63	@ 0x3f
 8003660:	409a      	lsls	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d004      	beq.n	800369e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2280      	movs	r2, #128	@ 0x80
 8003698:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00c      	b.n	80036b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2205      	movs	r2, #5
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036d0:	4b8e      	ldr	r3, [pc, #568]	@ (800390c <HAL_DMA_IRQHandler+0x248>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003910 <HAL_DMA_IRQHandler+0x24c>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ee:	2208      	movs	r2, #8
 80036f0:	409a      	lsls	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01a      	beq.n	8003730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0204 	bic.w	r2, r2, #4
 8003716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	2208      	movs	r2, #8
 800371e:	409a      	lsls	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d012      	beq.n	8003766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	2201      	movs	r2, #1
 8003754:	409a      	lsls	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	2204      	movs	r2, #4
 800376c:	409a      	lsls	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00b      	beq.n	800379c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	2204      	movs	r2, #4
 800378a:	409a      	lsls	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a0:	2210      	movs	r2, #16
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d043      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03c      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	2210      	movs	r2, #16
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d018      	beq.n	8003806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d024      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e01f      	b.n	8003834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01b      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
 8003804:	e016      	b.n	8003834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0208 	bic.w	r2, r2, #8
 8003822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003838:	2220      	movs	r2, #32
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 808f 	beq.w	8003964 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8087 	beq.w	8003964 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	2220      	movs	r2, #32
 800385c:	409a      	lsls	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b05      	cmp	r3, #5
 800386c:	d136      	bne.n	80038dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0216 	bic.w	r2, r2, #22
 800387c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800388c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_DMA_IRQHandler+0x1da>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0208 	bic.w	r2, r2, #8
 80038ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	223f      	movs	r2, #63	@ 0x3f
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07e      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
        }
        return;
 80038da:	e079      	b.n	80039d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01d      	beq.n	8003926 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d031      	beq.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
 8003908:	e02c      	b.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
 800390a:	bf00      	nop
 800390c:	2000002c 	.word	0x2000002c
 8003910:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
 8003924:	e01e      	b.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10f      	bne.n	8003954 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0210 	bic.w	r2, r2, #16
 8003942:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d032      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d022      	beq.n	80039be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2205      	movs	r2, #5
 800397c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3301      	adds	r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	429a      	cmp	r2, r3
 800399a:	d307      	bcc.n	80039ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f2      	bne.n	8003990 <HAL_DMA_IRQHandler+0x2cc>
 80039aa:	e000      	b.n	80039ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
 80039ce:	e000      	b.n	80039d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80039d0:	bf00      	nop
    }
  }
}
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d108      	bne.n	8003a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a16:	e007      	b.n	8003a28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	3b10      	subs	r3, #16
 8003a44:	4a14      	ldr	r2, [pc, #80]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x64>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a4e:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <DMA_CalcBaseAndBitshift+0x68>)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d909      	bls.n	8003a76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a74:	e007      	b.n	8003a86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	aaaaaaab 	.word	0xaaaaaaab
 8003a9c:	0800cbf4 	.word	0x0800cbf4

08003aa0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11f      	bne.n	8003afa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d856      	bhi.n	8003b6e <DMA_CheckFifoParam+0xce>
 8003ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <DMA_CheckFifoParam+0x28>)
 8003ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac6:	bf00      	nop
 8003ac8:	08003ad9 	.word	0x08003ad9
 8003acc:	08003aeb 	.word	0x08003aeb
 8003ad0:	08003ad9 	.word	0x08003ad9
 8003ad4:	08003b6f 	.word	0x08003b6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d046      	beq.n	8003b72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae8:	e043      	b.n	8003b72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003af2:	d140      	bne.n	8003b76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af8:	e03d      	b.n	8003b76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b02:	d121      	bne.n	8003b48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d837      	bhi.n	8003b7a <DMA_CheckFifoParam+0xda>
 8003b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <DMA_CheckFifoParam+0x70>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b27 	.word	0x08003b27
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003b39 	.word	0x08003b39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	e030      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d025      	beq.n	8003b7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b36:	e022      	b.n	8003b7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b40:	d11f      	bne.n	8003b82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b46:	e01c      	b.n	8003b82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d903      	bls.n	8003b56 <DMA_CheckFifoParam+0xb6>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d003      	beq.n	8003b5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b54:	e018      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5a:	e015      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e00b      	b.n	8003b86 <DMA_CheckFifoParam+0xe6>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e00a      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e008      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e006      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e004      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
    }
  } 
  
  return status; 
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	@ 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e16b      	b.n	8003e8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	f040 815a 	bne.w	8003e86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d005      	beq.n	8003bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d130      	bne.n	8003c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 0201 	and.w	r2, r3, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d017      	beq.n	8003c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d123      	bne.n	8003cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	220f      	movs	r2, #15
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	69b9      	ldr	r1, [r7, #24]
 8003cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80b4 	beq.w	8003e86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	4b60      	ldr	r3, [pc, #384]	@ (8003ea4 <HAL_GPIO_Init+0x30c>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	4a5f      	ldr	r2, [pc, #380]	@ (8003ea4 <HAL_GPIO_Init+0x30c>)
 8003d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea4 <HAL_GPIO_Init+0x30c>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea8 <HAL_GPIO_Init+0x310>)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a52      	ldr	r2, [pc, #328]	@ (8003eac <HAL_GPIO_Init+0x314>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d02b      	beq.n	8003dbe <HAL_GPIO_Init+0x226>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a51      	ldr	r2, [pc, #324]	@ (8003eb0 <HAL_GPIO_Init+0x318>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d025      	beq.n	8003dba <HAL_GPIO_Init+0x222>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a50      	ldr	r2, [pc, #320]	@ (8003eb4 <HAL_GPIO_Init+0x31c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01f      	beq.n	8003db6 <HAL_GPIO_Init+0x21e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb8 <HAL_GPIO_Init+0x320>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d019      	beq.n	8003db2 <HAL_GPIO_Init+0x21a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4e      	ldr	r2, [pc, #312]	@ (8003ebc <HAL_GPIO_Init+0x324>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_GPIO_Init+0x216>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec0 <HAL_GPIO_Init+0x328>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00d      	beq.n	8003daa <HAL_GPIO_Init+0x212>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec4 <HAL_GPIO_Init+0x32c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <HAL_GPIO_Init+0x20e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4b      	ldr	r2, [pc, #300]	@ (8003ec8 <HAL_GPIO_Init+0x330>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_GPIO_Init+0x20a>
 8003d9e:	2307      	movs	r3, #7
 8003da0:	e00e      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003da2:	2308      	movs	r3, #8
 8003da4:	e00c      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003da6:	2306      	movs	r3, #6
 8003da8:	e00a      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e008      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003dae:	2304      	movs	r3, #4
 8003db0:	e006      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003db2:	2303      	movs	r3, #3
 8003db4:	e004      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e002      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_GPIO_Init+0x228>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f002 0203 	and.w	r2, r2, #3
 8003dc6:	0092      	lsls	r2, r2, #2
 8003dc8:	4093      	lsls	r3, r2
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd0:	4935      	ldr	r1, [pc, #212]	@ (8003ea8 <HAL_GPIO_Init+0x310>)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dde:	4b3b      	ldr	r3, [pc, #236]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e02:	4a32      	ldr	r2, [pc, #200]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e08:	4b30      	ldr	r3, [pc, #192]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e2c:	4a27      	ldr	r2, [pc, #156]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e32:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e56:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e80:	4a12      	ldr	r2, [pc, #72]	@ (8003ecc <HAL_GPIO_Init+0x334>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	f67f ae90 	bls.w	8003bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3724      	adds	r7, #36	@ 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40013800 	.word	0x40013800
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	40020400 	.word	0x40020400
 8003eb4:	40020800 	.word	0x40020800
 8003eb8:	40020c00 	.word	0x40020c00
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40021400 	.word	0x40021400
 8003ec4:	40021800 	.word	0x40021800
 8003ec8:	40021c00 	.word	0x40021c00
 8003ecc:	40013c00 	.word	0x40013c00

08003ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	807b      	strh	r3, [r7, #2]
 8003edc:	4613      	mov	r3, r2
 8003ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee0:	787b      	ldrb	r3, [r7, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eec:	e003      	b.n	8003ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	041a      	lsls	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	619a      	str	r2, [r3, #24]
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e12b      	b.n	800416e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd f9a4 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	@ 0x24
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f68:	f001 f89a 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a81      	ldr	r2, [pc, #516]	@ (8004178 <HAL_I2C_Init+0x274>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d807      	bhi.n	8003f88 <HAL_I2C_Init+0x84>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a80      	ldr	r2, [pc, #512]	@ (800417c <HAL_I2C_Init+0x278>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bf94      	ite	ls
 8003f80:	2301      	movls	r3, #1
 8003f82:	2300      	movhi	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e006      	b.n	8003f96 <HAL_I2C_Init+0x92>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a7d      	ldr	r2, [pc, #500]	@ (8004180 <HAL_I2C_Init+0x27c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0e7      	b.n	800416e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a78      	ldr	r2, [pc, #480]	@ (8004184 <HAL_I2C_Init+0x280>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0c9b      	lsrs	r3, r3, #18
 8003fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8004178 <HAL_I2C_Init+0x274>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d802      	bhi.n	8003fd8 <HAL_I2C_Init+0xd4>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	e009      	b.n	8003fec <HAL_I2C_Init+0xe8>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	4a69      	ldr	r2, [pc, #420]	@ (8004188 <HAL_I2C_Init+0x284>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	3301      	adds	r3, #1
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ffe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	495c      	ldr	r1, [pc, #368]	@ (8004178 <HAL_I2C_Init+0x274>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d819      	bhi.n	8004040 <HAL_I2C_Init+0x13c>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e59      	subs	r1, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fbb1 f3f3 	udiv	r3, r1, r3
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004020:	400b      	ands	r3, r1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_I2C_Init+0x138>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e59      	subs	r1, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fbb1 f3f3 	udiv	r3, r1, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	e051      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800403c:	2304      	movs	r3, #4
 800403e:	e04f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d111      	bne.n	800406c <HAL_I2C_Init+0x168>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1e58      	subs	r0, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e012      	b.n	8004092 <HAL_I2C_Init+0x18e>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e58      	subs	r0, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Init+0x196>
 8004096:	2301      	movs	r3, #1
 8004098:	e022      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10e      	bne.n	80040c0 <HAL_I2C_Init+0x1bc>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1e58      	subs	r0, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	440b      	add	r3, r1
 80040b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040be:	e00f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	0099      	lsls	r1, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	6809      	ldr	r1, [r1, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800410e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6911      	ldr	r1, [r2, #16]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	000186a0 	.word	0x000186a0
 800417c:	001e847f 	.word	0x001e847f
 8004180:	003d08ff 	.word	0x003d08ff
 8004184:	431bde83 	.word	0x431bde83
 8004188:	10624dd3 	.word	0x10624dd3

0800418c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
 800419c:	4613      	mov	r3, r2
 800419e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7fe ffb6 	bl	8003110 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	f040 80e0 	bne.w	8004374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2319      	movs	r3, #25
 80041ba:	2201      	movs	r2, #1
 80041bc:	4970      	ldr	r1, [pc, #448]	@ (8004380 <HAL_I2C_Master_Transmit+0x1f4>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f964 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0d3      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_I2C_Master_Transmit+0x50>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0cc      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d007      	beq.n	8004202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	@ 0x21
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2210      	movs	r2, #16
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a50      	ldr	r2, [pc, #320]	@ (8004384 <HAL_I2C_Master_Transmit+0x1f8>)
 8004242:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004244:	8979      	ldrh	r1, [r7, #10]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f89c 	bl	8004388 <I2C_MasterRequestWrite>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e08d      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004270:	e066      	b.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fa22 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	2b04      	cmp	r3, #4
 8004288:	d107      	bne.n	800429a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e06b      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d11b      	bne.n	8004314 <HAL_I2C_Master_Transmit+0x188>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d017      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6a39      	ldr	r1, [r7, #32]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fa19 	bl	8004750 <I2C_WaitOnBTFFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	2b04      	cmp	r3, #4
 800432a:	d107      	bne.n	800433c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800433a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e01a      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d194      	bne.n	8004272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000

08004388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d006      	beq.n	80043b2 <I2C_MasterRequestWrite+0x2a>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d003      	beq.n	80043b2 <I2C_MasterRequestWrite+0x2a>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043b0:	d108      	bne.n	80043c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e00b      	b.n	80043dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	d107      	bne.n	80043dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 f84f 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004402:	d103      	bne.n	800440c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800440a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e035      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004418:	d108      	bne.n	800442c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441a:	897b      	ldrh	r3, [r7, #10]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004428:	611a      	str	r2, [r3, #16]
 800442a:	e01b      	b.n	8004464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	11db      	asrs	r3, r3, #7
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0306 	and.w	r3, r3, #6
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f063 030f 	orn	r3, r3, #15
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	490e      	ldr	r1, [pc, #56]	@ (8004484 <I2C_MasterRequestWrite+0xfc>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f898 	bl	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e010      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4907      	ldr	r1, [pc, #28]	@ (8004488 <I2C_MasterRequestWrite+0x100>)
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f888 	bl	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	00010008 	.word	0x00010008
 8004488:	00010002 	.word	0x00010002

0800448c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800449c:	e048      	b.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d044      	beq.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fe fe33 	bl	8003110 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d139      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10d      	bne.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	43da      	mvns	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	e00c      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	43da      	mvns	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d116      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e023      	b.n	8004578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10d      	bne.n	8004556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	e00c      	b.n	8004570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	43da      	mvns	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	429a      	cmp	r2, r3
 8004574:	d093      	beq.n	800449e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458e:	e071      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459e:	d123      	bne.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e067      	b.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d041      	beq.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fe fd8e 	bl	8003110 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d136      	bne.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10c      	bne.n	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	43da      	mvns	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e00b      	b.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	43da      	mvns	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4013      	ands	r3, r2
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e021      	b.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10c      	bne.n	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e00b      	b.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f af6d 	bne.w	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046cc:	e034      	b.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f886 	bl	80047e0 <I2C_IsAcknowledgeFailed>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e034      	b.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d028      	beq.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe fd13 	bl	8003110 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11d      	bne.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d016      	beq.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b80      	cmp	r3, #128	@ 0x80
 8004744:	d1c3      	bne.n	80046ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800475c:	e034      	b.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f83e 	bl	80047e0 <I2C_IsAcknowledgeFailed>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e034      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d028      	beq.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fe fccb 	bl	8003110 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d11d      	bne.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d016      	beq.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e007      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d1c3      	bne.n	800475e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	d11b      	bne.n	8004830 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004800:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	f043 0204 	orr.w	r2, r3, #4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e267      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d075      	beq.n	800494a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800485e:	4b88      	ldr	r3, [pc, #544]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b04      	cmp	r3, #4
 8004868:	d00c      	beq.n	8004884 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800486a:	4b85      	ldr	r3, [pc, #532]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004872:	2b08      	cmp	r3, #8
 8004874:	d112      	bne.n	800489c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004876:	4b82      	ldr	r3, [pc, #520]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004882:	d10b      	bne.n	800489c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004884:	4b7e      	ldr	r3, [pc, #504]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d05b      	beq.n	8004948 <HAL_RCC_OscConfig+0x108>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d157      	bne.n	8004948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e242      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a4:	d106      	bne.n	80048b4 <HAL_RCC_OscConfig+0x74>
 80048a6:	4b76      	ldr	r3, [pc, #472]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a75      	ldr	r2, [pc, #468]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e01d      	b.n	80048f0 <HAL_RCC_OscConfig+0xb0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x98>
 80048be:	4b70      	ldr	r3, [pc, #448]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6c      	ldr	r2, [pc, #432]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e00b      	b.n	80048f0 <HAL_RCC_OscConfig+0xb0>
 80048d8:	4b69      	ldr	r3, [pc, #420]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a68      	ldr	r2, [pc, #416]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b66      	ldr	r3, [pc, #408]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a65      	ldr	r2, [pc, #404]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d013      	beq.n	8004920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe fc0a 	bl	8003110 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004900:	f7fe fc06 	bl	8003110 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	@ 0x64
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e207      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b5b      	ldr	r3, [pc, #364]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0xc0>
 800491e:	e014      	b.n	800494a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004920:	f7fe fbf6 	bl	8003110 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004928:	f7fe fbf2 	bl	8003110 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	@ 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e1f3      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	4b51      	ldr	r3, [pc, #324]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0xe8>
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d063      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004956:	4b4a      	ldr	r3, [pc, #296]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004962:	4b47      	ldr	r3, [pc, #284]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800496a:	2b08      	cmp	r3, #8
 800496c:	d11c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496e:	4b44      	ldr	r3, [pc, #272]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d116      	bne.n	80049a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800497a:	4b41      	ldr	r3, [pc, #260]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x152>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d001      	beq.n	8004992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e1c7      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	4b3b      	ldr	r3, [pc, #236]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4937      	ldr	r1, [pc, #220]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	e03a      	b.n	8004a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d020      	beq.n	80049f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b0:	4b34      	ldr	r3, [pc, #208]	@ (8004a84 <HAL_RCC_OscConfig+0x244>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fe fbab 	bl	8003110 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049be:	f7fe fba7 	bl	8003110 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e1a8      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049dc:	4b28      	ldr	r3, [pc, #160]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4925      	ldr	r1, [pc, #148]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]
 80049f0:	e015      	b.n	8004a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049f2:	4b24      	ldr	r3, [pc, #144]	@ (8004a84 <HAL_RCC_OscConfig+0x244>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f8:	f7fe fb8a 	bl	8003110 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a00:	f7fe fb86 	bl	8003110 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e187      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a12:	4b1b      	ldr	r3, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d036      	beq.n	8004a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a32:	4b15      	ldr	r3, [pc, #84]	@ (8004a88 <HAL_RCC_OscConfig+0x248>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fe fb6a 	bl	8003110 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fe fb66 	bl	8003110 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e167      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_RCC_OscConfig+0x240>)
 8004a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x200>
 8004a5e:	e01b      	b.n	8004a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a60:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <HAL_RCC_OscConfig+0x248>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a66:	f7fe fb53 	bl	8003110 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6c:	e00e      	b.n	8004a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6e:	f7fe fb4f 	bl	8003110 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d907      	bls.n	8004a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e150      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	42470000 	.word	0x42470000
 8004a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a8c:	4b88      	ldr	r3, [pc, #544]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ea      	bne.n	8004a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8097 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aaa:	4b81      	ldr	r3, [pc, #516]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10f      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	4b77      	ldr	r3, [pc, #476]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d118      	bne.n	8004b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae2:	4b74      	ldr	r3, [pc, #464]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a73      	ldr	r2, [pc, #460]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aee:	f7fe fb0f 	bl	8003110 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af6:	f7fe fb0b 	bl	8003110 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e10c      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCC_OscConfig+0x474>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d106      	bne.n	8004b2a <HAL_RCC_OscConfig+0x2ea>
 8004b1c:	4b64      	ldr	r3, [pc, #400]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b20:	4a63      	ldr	r2, [pc, #396]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b28:	e01c      	b.n	8004b64 <HAL_RCC_OscConfig+0x324>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x30c>
 8004b32:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b36:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b38:	f043 0304 	orr.w	r3, r3, #4
 8004b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	4a5b      	ldr	r2, [pc, #364]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0x324>
 8004b4c:	4b58      	ldr	r3, [pc, #352]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b50:	4a57      	ldr	r2, [pc, #348]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b52:	f023 0301 	bic.w	r3, r3, #1
 8004b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b58:	4b55      	ldr	r3, [pc, #340]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5c:	4a54      	ldr	r2, [pc, #336]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	f023 0304 	bic.w	r3, r3, #4
 8004b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fe fad0 	bl	8003110 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b74:	f7fe facc 	bl	8003110 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e0cb      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8a:	4b49      	ldr	r3, [pc, #292]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0ee      	beq.n	8004b74 <HAL_RCC_OscConfig+0x334>
 8004b96:	e014      	b.n	8004bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b98:	f7fe faba 	bl	8003110 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9e:	e00a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba0:	f7fe fab6 	bl	8003110 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0b5      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ee      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc8:	4b39      	ldr	r3, [pc, #228]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	4a38      	ldr	r2, [pc, #224]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80a1 	beq.w	8004d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bde:	4b34      	ldr	r3, [pc, #208]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d05c      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d141      	bne.n	8004c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf2:	4b31      	ldr	r3, [pc, #196]	@ (8004cb8 <HAL_RCC_OscConfig+0x478>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fe fa8a 	bl	8003110 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fe fa86 	bl	8003110 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e087      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c12:	4b27      	ldr	r3, [pc, #156]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	3b01      	subs	r3, #1
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	061b      	lsls	r3, r3, #24
 8004c42:	491b      	ldr	r1, [pc, #108]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c48:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <HAL_RCC_OscConfig+0x478>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fe fa5f 	bl	8003110 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c56:	f7fe fa5b 	bl	8003110 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e05c      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c68:	4b11      	ldr	r3, [pc, #68]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x416>
 8004c74:	e054      	b.n	8004d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <HAL_RCC_OscConfig+0x478>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fa48 	bl	8003110 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fe fa44 	bl	8003110 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e045      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_RCC_OscConfig+0x470>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x444>
 8004ca2:	e03d      	b.n	8004d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d107      	bne.n	8004cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e038      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x4ec>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d028      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d121      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d11a      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d111      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	3b01      	subs	r3, #1
 8004d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800

08004d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0cc      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d44:	4b68      	ldr	r3, [pc, #416]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d90c      	bls.n	8004d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b65      	ldr	r3, [pc, #404]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5a:	4b63      	ldr	r3, [pc, #396]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0b8      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d84:	4b59      	ldr	r3, [pc, #356]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	4a58      	ldr	r2, [pc, #352]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d9c:	4b53      	ldr	r3, [pc, #332]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	4a52      	ldr	r2, [pc, #328]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da8:	4b50      	ldr	r3, [pc, #320]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	494d      	ldr	r1, [pc, #308]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d044      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	4b47      	ldr	r3, [pc, #284]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d119      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e07f      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d003      	beq.n	8004dee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dee:	4b3f      	ldr	r3, [pc, #252]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e06f      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e067      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0e:	4b37      	ldr	r3, [pc, #220]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4934      	ldr	r1, [pc, #208]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e20:	f7fe f976 	bl	8003110 <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e28:	f7fe f972 	bl	8003110 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e04f      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 020c 	and.w	r2, r3, #12
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d1eb      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e50:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d20c      	bcs.n	8004e78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b20      	ldr	r3, [pc, #128]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e032      	b.n	8004ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e84:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4916      	ldr	r1, [pc, #88]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	490e      	ldr	r1, [pc, #56]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004eb6:	f000 f821 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	490a      	ldr	r1, [pc, #40]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec8:	5ccb      	ldrb	r3, [r1, r3]
 8004eca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ece:	4a09      	ldr	r2, [pc, #36]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ed2:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe f8d6 	bl	8003088 <HAL_InitTick>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40023c00 	.word	0x40023c00
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	0800c544 	.word	0x0800c544
 8004ef4:	2000002c 	.word	0x2000002c
 8004ef8:	20000030 	.word	0x20000030

08004efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f00:	b090      	sub	sp, #64	@ 0x40
 8004f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f14:	4b59      	ldr	r3, [pc, #356]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 030c 	and.w	r3, r3, #12
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d00d      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x40>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	f200 80a1 	bhi.w	8005068 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x34>
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f2e:	e09b      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f30:	4b53      	ldr	r3, [pc, #332]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f34:	e09b      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f36:	4b53      	ldr	r3, [pc, #332]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f3a:	e098      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f46:	4b4d      	ldr	r3, [pc, #308]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d028      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f52:	4b4a      	ldr	r3, [pc, #296]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	2200      	movs	r2, #0
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f64:	2100      	movs	r1, #0
 8004f66:	4b47      	ldr	r3, [pc, #284]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f68:	fb03 f201 	mul.w	r2, r3, r1
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	fb00 f303 	mul.w	r3, r0, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	4a43      	ldr	r2, [pc, #268]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f76:	fba0 1202 	umull	r1, r2, r0, r2
 8004f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f7c:	460a      	mov	r2, r1
 8004f7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f82:	4413      	add	r3, r2
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f88:	2200      	movs	r2, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	61fa      	str	r2, [r7, #28]
 8004f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f96:	f7fb fe77 	bl	8000c88 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa2:	e053      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa4:	4b35      	ldr	r3, [pc, #212]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	2200      	movs	r2, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	617a      	str	r2, [r7, #20]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fb6:	f04f 0b00 	mov.w	fp, #0
 8004fba:	4652      	mov	r2, sl
 8004fbc:	465b      	mov	r3, fp
 8004fbe:	f04f 0000 	mov.w	r0, #0
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	0159      	lsls	r1, r3, #5
 8004fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fcc:	0150      	lsls	r0, r2, #5
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	ebb2 080a 	subs.w	r8, r2, sl
 8004fd6:	eb63 090b 	sbc.w	r9, r3, fp
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fe6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fee:	ebb2 0408 	subs.w	r4, r2, r8
 8004ff2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	00eb      	lsls	r3, r5, #3
 8005000:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005004:	00e2      	lsls	r2, r4, #3
 8005006:	4614      	mov	r4, r2
 8005008:	461d      	mov	r5, r3
 800500a:	eb14 030a 	adds.w	r3, r4, sl
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	eb45 030b 	adc.w	r3, r5, fp
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005022:	4629      	mov	r1, r5
 8005024:	028b      	lsls	r3, r1, #10
 8005026:	4621      	mov	r1, r4
 8005028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800502c:	4621      	mov	r1, r4
 800502e:	028a      	lsls	r2, r1, #10
 8005030:	4610      	mov	r0, r2
 8005032:	4619      	mov	r1, r3
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	2200      	movs	r2, #0
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	60fa      	str	r2, [r7, #12]
 800503c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005040:	f7fb fe22 	bl	8000c88 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4613      	mov	r3, r2
 800504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_RCC_GetSysClockFreq+0x180>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	3301      	adds	r3, #1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800505c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005066:	e002      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005068:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x184>)
 800506a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800506c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005070:	4618      	mov	r0, r3
 8005072:	3740      	adds	r7, #64	@ 0x40
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	00f42400 	.word	0x00f42400
 8005084:	017d7840 	.word	0x017d7840

08005088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800508c:	4b03      	ldr	r3, [pc, #12]	@ (800509c <HAL_RCC_GetHCLKFreq+0x14>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	2000002c 	.word	0x2000002c

080050a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050a4:	f7ff fff0 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0a9b      	lsrs	r3, r3, #10
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4903      	ldr	r1, [pc, #12]	@ (80050c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0800c554 	.word	0x0800c554

080050c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050cc:	f7ff ffdc 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	@ (80050e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0b5b      	lsrs	r3, r3, #13
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	@ (80050ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0800c554 	.word	0x0800c554

080050f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e041      	b.n	8005186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fc fea2 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f000 fc62 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04e      	b.n	8005246 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a23      	ldr	r2, [pc, #140]	@ (8005254 <HAL_TIM_Base_Start_IT+0xc4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d022      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d2:	d01d      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005258 <HAL_TIM_Base_Start_IT+0xc8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d018      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	@ (800525c <HAL_TIM_Base_Start_IT+0xcc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005260 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <HAL_TIM_Base_Start_IT+0xd4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d009      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <HAL_TIM_Base_Start_IT+0xd8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a18      	ldr	r2, [pc, #96]	@ (800526c <HAL_TIM_Base_Start_IT+0xdc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d111      	bne.n	8005234 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b06      	cmp	r3, #6
 8005220:	d010      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	e007      	b.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40010400 	.word	0x40010400
 8005268:	40014000 	.word	0x40014000
 800526c:	40001800 	.word	0x40001800

08005270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e041      	b.n	8005306 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f839 	bl	800530e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 fba2 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <HAL_TIM_PWM_Start+0x24>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e022      	b.n	800538e <HAL_TIM_PWM_Start+0x6a>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d109      	bne.n	8005362 <HAL_TIM_PWM_Start+0x3e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	bf14      	ite	ne
 800535a:	2301      	movne	r3, #1
 800535c:	2300      	moveq	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e015      	b.n	800538e <HAL_TIM_PWM_Start+0x6a>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d109      	bne.n	800537c <HAL_TIM_PWM_Start+0x58>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e008      	b.n	800538e <HAL_TIM_PWM_Start+0x6a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e07c      	b.n	8005490 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start+0x82>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a4:	e013      	b.n	80053ce <HAL_TIM_PWM_Start+0xaa>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Start+0x92>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b4:	e00b      	b.n	80053ce <HAL_TIM_PWM_Start+0xaa>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0xa2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c4:	e003      	b.n	80053ce <HAL_TIM_PWM_Start+0xaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2201      	movs	r2, #1
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fdfe 	bl	8005fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005498 <HAL_TIM_PWM_Start+0x174>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_TIM_PWM_Start+0xcc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <HAL_TIM_PWM_Start+0x178>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_PWM_Start+0xd0>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_PWM_Start+0xd2>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a22      	ldr	r2, [pc, #136]	@ (8005498 <HAL_TIM_PWM_Start+0x174>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d022      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541c:	d01d      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1f      	ldr	r2, [pc, #124]	@ (80054a0 <HAL_TIM_PWM_Start+0x17c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1d      	ldr	r2, [pc, #116]	@ (80054a4 <HAL_TIM_PWM_Start+0x180>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <HAL_TIM_PWM_Start+0x184>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a16      	ldr	r2, [pc, #88]	@ (800549c <HAL_TIM_PWM_Start+0x178>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a18      	ldr	r2, [pc, #96]	@ (80054ac <HAL_TIM_PWM_Start+0x188>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_PWM_Start+0x136>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <HAL_TIM_PWM_Start+0x18c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d111      	bne.n	800547e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d010      	beq.n	800548e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	e007      	b.n	800548e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40001800 	.word	0x40001800

080054b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d020      	beq.n	8005518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01b      	beq.n	8005518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0202 	mvn.w	r2, #2
 80054e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa5b 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa4d 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fa5e 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d020      	beq.n	8005564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0204 	mvn.w	r2, #4
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fa35 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa27 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa38 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d020      	beq.n	80055b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01b      	beq.n	80055b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0208 	mvn.w	r2, #8
 8005580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2204      	movs	r2, #4
 8005586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa0f 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fa01 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa12 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d020      	beq.n	80055fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01b      	beq.n	80055fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0210 	mvn.w	r2, #16
 80055cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2208      	movs	r2, #8
 80055d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9e9 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 80055e8:	e005      	b.n	80055f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9db 	bl	80059a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9ec 	bl	80059ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00c      	beq.n	8005620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0201 	mvn.w	r2, #1
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc f922 	bl	8001864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00c      	beq.n	8005644 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fd76 	bl	8006130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9bd 	bl	80059e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0220 	mvn.w	r2, #32
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fd48 	bl	800611c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e0ae      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b0c      	cmp	r3, #12
 80056be:	f200 809f 	bhi.w	8005800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	08005801 	.word	0x08005801
 80056d0:	08005801 	.word	0x08005801
 80056d4:	08005801 	.word	0x08005801
 80056d8:	0800573d 	.word	0x0800573d
 80056dc:	08005801 	.word	0x08005801
 80056e0:	08005801 	.word	0x08005801
 80056e4:	08005801 	.word	0x08005801
 80056e8:	0800577f 	.word	0x0800577f
 80056ec:	08005801 	.word	0x08005801
 80056f0:	08005801 	.word	0x08005801
 80056f4:	08005801 	.word	0x08005801
 80056f8:	080057bf 	.word	0x080057bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fa1e 	bl	8005b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0208 	orr.w	r2, r2, #8
 8005716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0204 	bic.w	r2, r2, #4
 8005726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6999      	ldr	r1, [r3, #24]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	619a      	str	r2, [r3, #24]
      break;
 800573a:	e064      	b.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fa6e 	bl	8005c24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6999      	ldr	r1, [r3, #24]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	021a      	lsls	r2, r3, #8
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	619a      	str	r2, [r3, #24]
      break;
 800577c:	e043      	b.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fac3 	bl	8005d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0208 	orr.w	r2, r2, #8
 8005798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0204 	bic.w	r2, r2, #4
 80057a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69d9      	ldr	r1, [r3, #28]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	61da      	str	r2, [r3, #28]
      break;
 80057bc:	e023      	b.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fb17 	bl	8005df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69d9      	ldr	r1, [r3, #28]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	021a      	lsls	r2, r3, #8
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	61da      	str	r2, [r3, #28]
      break;
 80057fe:	e002      	b.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	75fb      	strb	r3, [r7, #23]
      break;
 8005804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800580e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIM_ConfigClockSource+0x1c>
 8005830:	2302      	movs	r3, #2
 8005832:	e0b4      	b.n	800599e <HAL_TIM_ConfigClockSource+0x186>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800585a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586c:	d03e      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0xd4>
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005872:	f200 8087 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587a:	f000 8086 	beq.w	800598a <HAL_TIM_ConfigClockSource+0x172>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005882:	d87f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b70      	cmp	r3, #112	@ 0x70
 8005886:	d01a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xa6>
 8005888:	2b70      	cmp	r3, #112	@ 0x70
 800588a:	d87b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b60      	cmp	r3, #96	@ 0x60
 800588e:	d050      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x11a>
 8005890:	2b60      	cmp	r3, #96	@ 0x60
 8005892:	d877      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b50      	cmp	r3, #80	@ 0x50
 8005896:	d03c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0xfa>
 8005898:	2b50      	cmp	r3, #80	@ 0x50
 800589a:	d873      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d058      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x13a>
 80058a0:	2b40      	cmp	r3, #64	@ 0x40
 80058a2:	d86f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b30      	cmp	r3, #48	@ 0x30
 80058a6:	d064      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b30      	cmp	r3, #48	@ 0x30
 80058aa:	d86b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d060      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d867      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d05c      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d05a      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	e062      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ce:	f000 fb63 	bl	8005f98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	609a      	str	r2, [r3, #8]
      break;
 80058ea:	e04f      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	f000 fb4c 	bl	8005f98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800590e:	609a      	str	r2, [r3, #8]
      break;
 8005910:	e03c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 fac0 	bl	8005ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2150      	movs	r1, #80	@ 0x50
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fb19 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005930:	e02c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	461a      	mov	r2, r3
 8005940:	f000 fadf 	bl	8005f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2160      	movs	r1, #96	@ 0x60
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fb09 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005950:	e01c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	461a      	mov	r2, r3
 8005960:	f000 faa0 	bl	8005ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2140      	movs	r1, #64	@ 0x40
 800596a:	4618      	mov	r0, r3
 800596c:	f000 faf9 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005970:	e00c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 faf0 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005982:	e003      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e000      	b.n	800598c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800598a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a43      	ldr	r2, [pc, #268]	@ (8005b18 <TIM_Base_SetConfig+0x120>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a16:	d00f      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a40      	ldr	r2, [pc, #256]	@ (8005b1c <TIM_Base_SetConfig+0x124>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3f      	ldr	r2, [pc, #252]	@ (8005b20 <TIM_Base_SetConfig+0x128>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d007      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8005b24 <TIM_Base_SetConfig+0x12c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3d      	ldr	r2, [pc, #244]	@ (8005b28 <TIM_Base_SetConfig+0x130>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d108      	bne.n	8005a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a32      	ldr	r2, [pc, #200]	@ (8005b18 <TIM_Base_SetConfig+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d02b      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a58:	d027      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b1c <TIM_Base_SetConfig+0x124>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d023      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2e      	ldr	r2, [pc, #184]	@ (8005b20 <TIM_Base_SetConfig+0x128>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01f      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b24 <TIM_Base_SetConfig+0x12c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01b      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2c      	ldr	r2, [pc, #176]	@ (8005b28 <TIM_Base_SetConfig+0x130>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d017      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b2c <TIM_Base_SetConfig+0x134>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2a      	ldr	r2, [pc, #168]	@ (8005b30 <TIM_Base_SetConfig+0x138>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00f      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a29      	ldr	r2, [pc, #164]	@ (8005b34 <TIM_Base_SetConfig+0x13c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00b      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a28      	ldr	r2, [pc, #160]	@ (8005b38 <TIM_Base_SetConfig+0x140>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a27      	ldr	r2, [pc, #156]	@ (8005b3c <TIM_Base_SetConfig+0x144>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a26      	ldr	r2, [pc, #152]	@ (8005b40 <TIM_Base_SetConfig+0x148>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d108      	bne.n	8005abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a0e      	ldr	r2, [pc, #56]	@ (8005b18 <TIM_Base_SetConfig+0x120>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_Base_SetConfig+0xf2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a10      	ldr	r2, [pc, #64]	@ (8005b28 <TIM_Base_SetConfig+0x130>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d103      	bne.n	8005af2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f043 0204 	orr.w	r2, r3, #4
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800
 8005b24:	40000c00 	.word	0x40000c00
 8005b28:	40010400 	.word	0x40010400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800
 8005b38:	40001800 	.word	0x40001800
 8005b3c:	40001c00 	.word	0x40001c00
 8005b40:	40002000 	.word	0x40002000

08005b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f023 0201 	bic.w	r2, r3, #1
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 0302 	bic.w	r3, r3, #2
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a20      	ldr	r2, [pc, #128]	@ (8005c1c <TIM_OC1_SetConfig+0xd8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC1_SetConfig+0x64>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c20 <TIM_OC1_SetConfig+0xdc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10c      	bne.n	8005bc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0308 	bic.w	r3, r3, #8
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f023 0304 	bic.w	r3, r3, #4
 8005bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a15      	ldr	r2, [pc, #84]	@ (8005c1c <TIM_OC1_SetConfig+0xd8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <TIM_OC1_SetConfig+0x8e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a14      	ldr	r2, [pc, #80]	@ (8005c20 <TIM_OC1_SetConfig+0xdc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d111      	bne.n	8005bf6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40010400 	.word	0x40010400

08005c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f023 0210 	bic.w	r2, r3, #16
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0320 	bic.w	r3, r3, #32
 8005c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a22      	ldr	r2, [pc, #136]	@ (8005d08 <TIM_OC2_SetConfig+0xe4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC2_SetConfig+0x68>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a21      	ldr	r2, [pc, #132]	@ (8005d0c <TIM_OC2_SetConfig+0xe8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d10d      	bne.n	8005ca8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a17      	ldr	r2, [pc, #92]	@ (8005d08 <TIM_OC2_SetConfig+0xe4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_OC2_SetConfig+0x94>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a16      	ldr	r2, [pc, #88]	@ (8005d0c <TIM_OC2_SetConfig+0xe8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d113      	bne.n	8005ce0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40010400 	.word	0x40010400

08005d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a21      	ldr	r2, [pc, #132]	@ (8005df0 <TIM_OC3_SetConfig+0xe0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_OC3_SetConfig+0x66>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a20      	ldr	r2, [pc, #128]	@ (8005df4 <TIM_OC3_SetConfig+0xe4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10d      	bne.n	8005d92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a16      	ldr	r2, [pc, #88]	@ (8005df0 <TIM_OC3_SetConfig+0xe0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_OC3_SetConfig+0x92>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a15      	ldr	r2, [pc, #84]	@ (8005df4 <TIM_OC3_SetConfig+0xe4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d113      	bne.n	8005dca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400

08005df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	031b      	lsls	r3, r3, #12
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a12      	ldr	r2, [pc, #72]	@ (8005e9c <TIM_OC4_SetConfig+0xa4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_OC4_SetConfig+0x68>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a11      	ldr	r2, [pc, #68]	@ (8005ea0 <TIM_OC4_SetConfig+0xa8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d109      	bne.n	8005e74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	019b      	lsls	r3, r3, #6
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40010400 	.word	0x40010400

08005ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0201 	bic.w	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 030a 	bic.w	r3, r3, #10
 8005ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b087      	sub	sp, #28
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f023 0210 	bic.w	r2, r3, #16
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f043 0307 	orr.w	r3, r3, #7
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	609a      	str	r2, [r3, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	021a      	lsls	r2, r3, #8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	609a      	str	r2, [r3, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	2201      	movs	r2, #1
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1a      	ldr	r2, [r3, #32]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	fa01 f303 	lsl.w	r3, r1, r3
 8006010:	431a      	orrs	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006038:	2302      	movs	r3, #2
 800603a:	e05a      	b.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a21      	ldr	r2, [pc, #132]	@ (8006100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d022      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006088:	d01d      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1d      	ldr	r2, [pc, #116]	@ (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d018      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1b      	ldr	r2, [pc, #108]	@ (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1a      	ldr	r2, [pc, #104]	@ (800610c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00e      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d009      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a17      	ldr	r2, [pc, #92]	@ (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a15      	ldr	r2, [pc, #84]	@ (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10c      	bne.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40001800 	.word	0x40001800

0800611c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e042      	b.n	80061dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fb fff4 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	@ 0x24
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 ff95 	bl	80070b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800619c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	@ 0x30
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d162      	bne.n	80062c4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_UART_Transmit_DMA+0x26>
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e05b      	b.n	80062c6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	88fa      	ldrh	r2, [r7, #6]
 8006218:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2221      	movs	r2, #33	@ 0x21
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	4a27      	ldr	r2, [pc, #156]	@ (80062d0 <HAL_UART_Transmit_DMA+0xec>)
 8006234:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623a:	4a26      	ldr	r2, [pc, #152]	@ (80062d4 <HAL_UART_Transmit_DMA+0xf0>)
 800623c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006242:	4a25      	ldr	r2, [pc, #148]	@ (80062d8 <HAL_UART_Transmit_DMA+0xf4>)
 8006244:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	2200      	movs	r2, #0
 800624c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800624e:	f107 0308 	add.w	r3, r7, #8
 8006252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3304      	adds	r3, #4
 8006262:	461a      	mov	r2, r3
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	f7fd f943 	bl	80034f0 <HAL_DMA_Start_IT>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2210      	movs	r2, #16
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e021      	b.n	80062c6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800628a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3314      	adds	r3, #20
 8006292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	617b      	str	r3, [r7, #20]
   return(result);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3314      	adds	r3, #20
 80062aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80062ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6a39      	ldr	r1, [r7, #32]
 80062b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e5      	bne.n	800628c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e000      	b.n	80062c6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3730      	adds	r7, #48	@ 0x30
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	08006935 	.word	0x08006935
 80062d4:	080069cf 	.word	0x080069cf
 80062d8:	08006b53 	.word	0x08006b53

080062dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08c      	sub	sp, #48	@ 0x30
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d146      	bne.n	8006384 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e03f      	b.n	8006386 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	461a      	mov	r2, r3
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fc65 	bl	8006be8 <UART_Start_Receive_DMA>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	2b01      	cmp	r3, #1
 800632a:	d125      	bne.n	8006378 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	330c      	adds	r3, #12
 8006348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	617b      	str	r3, [r7, #20]
   return(result);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f043 0310 	orr.w	r3, r3, #16
 8006358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006362:	627a      	str	r2, [r7, #36]	@ 0x24
 8006364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006366:	6a39      	ldr	r1, [r7, #32]
 8006368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e5      	bne.n	8006342 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006376:	e002      	b.n	800637e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800637e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006382:	e000      	b.n	8006386 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3730      	adds	r7, #48	@ 0x30
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b0ba      	sub	sp, #232	@ 0xe8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80063bc:	2300      	movs	r3, #0
 80063be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80063ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10f      	bne.n	80063f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <HAL_UART_IRQHandler+0x66>
 80063e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fda4 	bl	8006f3c <UART_Receive_IT>
      return;
 80063f4:	e273      	b.n	80068de <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80de 	beq.w	80065bc <HAL_UART_IRQHandler+0x22c>
 8006400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800640c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006410:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 80d1 	beq.w	80065bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800641a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <HAL_UART_IRQHandler+0xae>
 8006426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800642a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	f043 0201 	orr.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00b      	beq.n	8006462 <HAL_UART_IRQHandler+0xd2>
 800644a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	f043 0202 	orr.w	r2, r3, #2
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <HAL_UART_IRQHandler+0xf6>
 800646e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	f043 0204 	orr.w	r2, r3, #4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d011      	beq.n	80064b6 <HAL_UART_IRQHandler+0x126>
 8006492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800649e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ae:	f043 0208 	orr.w	r2, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 820a 	beq.w	80068d4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_UART_IRQHandler+0x14e>
 80064cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fd2f 	bl	8006f3c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e8:	2b40      	cmp	r3, #64	@ 0x40
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d103      	bne.n	800650a <HAL_UART_IRQHandler+0x17a>
 8006502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d04f      	beq.n	80065aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fc3a 	bl	8006d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d141      	bne.n	80065a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3314      	adds	r3, #20
 8006524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800653c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3314      	adds	r3, #20
 8006546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800654a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800654e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1d9      	bne.n	800651e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d013      	beq.n	800659a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	4a8a      	ldr	r2, [pc, #552]	@ (80067a0 <HAL_UART_IRQHandler+0x410>)
 8006578:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd f87e 	bl	8003680 <HAL_DMA_Abort_IT>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d016      	beq.n	80065b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006594:	4610      	mov	r0, r2
 8006596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	e00e      	b.n	80065b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f9c0 	bl	8006920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	e00a      	b.n	80065b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9bc 	bl	8006920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	e006      	b.n	80065b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9b8 	bl	8006920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80065b6:	e18d      	b.n	80068d4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	bf00      	nop
    return;
 80065ba:	e18b      	b.n	80068d4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	f040 8167 	bne.w	8006894 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8160 	beq.w	8006894 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 8159 	beq.w	8006894 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	60bb      	str	r3, [r7, #8]
 80065f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006602:	2b40      	cmp	r3, #64	@ 0x40
 8006604:	f040 80ce 	bne.w	80067a4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006614:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80a9 	beq.w	8006770 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006626:	429a      	cmp	r2, r3
 8006628:	f080 80a2 	bcs.w	8006770 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006632:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663e:	f000 8088 	beq.w	8006752 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	330c      	adds	r3, #12
 8006648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800665c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800666e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800667a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006686:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1d9      	bne.n	8006642 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3314      	adds	r3, #20
 8006694:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800669e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e1      	bne.n	800668e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3314      	adds	r3, #20
 80066d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e3      	bne.n	80066ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006722:	f023 0310 	bic.w	r3, r3, #16
 8006726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006734:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006736:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800673a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e3      	bne.n	8006710 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674c:	4618      	mov	r0, r3
 800674e:	f7fc ff27 	bl	80035a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006760:	b29b      	uxth	r3, r3
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	b29b      	uxth	r3, r3
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fa ff7f 	bl	800166c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800676e:	e0b3      	b.n	80068d8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006774:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006778:	429a      	cmp	r2, r3
 800677a:	f040 80ad 	bne.w	80068d8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006788:	f040 80a6 	bne.w	80068d8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fa ff67 	bl	800166c <HAL_UARTEx_RxEventCallback>
      return;
 800679e:	e09b      	b.n	80068d8 <HAL_UART_IRQHandler+0x548>
 80067a0:	08006e4b 	.word	0x08006e4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 808e 	beq.w	80068dc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80067c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8089 	beq.w	80068dc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80067ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80067f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e3      	bne.n	80067ca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	623b      	str	r3, [r7, #32]
   return(result);
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3314      	adds	r3, #20
 8006822:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006826:	633a      	str	r2, [r7, #48]	@ 0x30
 8006828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800682c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e3      	bne.n	8006802 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	60fb      	str	r3, [r7, #12]
   return(result);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800686c:	61fa      	str	r2, [r7, #28]
 800686e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69b9      	ldr	r1, [r7, #24]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	617b      	str	r3, [r7, #20]
   return(result);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e3      	bne.n	8006848 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006886:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fa feed 	bl	800166c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006892:	e023      	b.n	80068dc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689c:	2b00      	cmp	r3, #0
 800689e:	d009      	beq.n	80068b4 <HAL_UART_IRQHandler+0x524>
 80068a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fadd 	bl	8006e6c <UART_Transmit_IT>
    return;
 80068b2:	e014      	b.n	80068de <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00e      	beq.n	80068de <HAL_UART_IRQHandler+0x54e>
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d008      	beq.n	80068de <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fb1d 	bl	8006f0c <UART_EndTransmit_IT>
    return;
 80068d2:	e004      	b.n	80068de <HAL_UART_IRQHandler+0x54e>
    return;
 80068d4:	bf00      	nop
 80068d6:	e002      	b.n	80068de <HAL_UART_IRQHandler+0x54e>
      return;
 80068d8:	bf00      	nop
 80068da:	e000      	b.n	80068de <HAL_UART_IRQHandler+0x54e>
      return;
 80068dc:	bf00      	nop
  }
}
 80068de:	37e8      	adds	r7, #232	@ 0xe8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b090      	sub	sp, #64	@ 0x40
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694c:	2b00      	cmp	r3, #0
 800694e:	d137      	bne.n	80069c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006952:	2200      	movs	r2, #0
 8006954:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	623b      	str	r3, [r7, #32]
   return(result);
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800696c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800696e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006976:	633a      	str	r2, [r7, #48]	@ 0x30
 8006978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800697c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800698a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	60fb      	str	r3, [r7, #12]
   return(result);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069aa:	61fa      	str	r2, [r7, #28]
 80069ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	69b9      	ldr	r1, [r7, #24]
 80069b0:	69fa      	ldr	r2, [r7, #28]
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	617b      	str	r3, [r7, #20]
   return(result);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e5      	bne.n	800698a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069be:	e002      	b.n	80069c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80069c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80069c2:	f7fa ff33 	bl	800182c <HAL_UART_TxCpltCallback>
}
 80069c6:	bf00      	nop
 80069c8:	3740      	adds	r7, #64	@ 0x40
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff ff81 	bl	80068e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e2:	bf00      	nop
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b09c      	sub	sp, #112	@ 0x70
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d172      	bne.n	8006aec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a08:	2200      	movs	r2, #0
 8006a0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a60:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e5      	bne.n	8006a40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3314      	adds	r3, #20
 8006a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	623b      	str	r3, [r7, #32]
   return(result);
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3314      	adds	r3, #20
 8006a92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a94:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e5      	bne.n	8006a74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d119      	bne.n	8006aec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0310 	bic.w	r3, r3, #16
 8006ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ad8:	61fa      	str	r2, [r7, #28]
 8006ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	69b9      	ldr	r1, [r7, #24]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006aee:	2200      	movs	r2, #0
 8006af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d106      	bne.n	8006b08 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006afe:	4619      	mov	r1, r3
 8006b00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b02:	f7fa fdb3 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b06:	e002      	b.n	8006b0e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006b08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006b0a:	f7ff fef5 	bl	80068f8 <HAL_UART_RxCpltCallback>
}
 8006b0e:	bf00      	nop
 8006b10:	3770      	adds	r7, #112	@ 0x70
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d108      	bne.n	8006b44 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7fa fd95 	bl	800166c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b42:	e002      	b.n	8006b4a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff fee1 	bl	800690c <HAL_UART_RxHalfCpltCallback>
}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b80      	cmp	r3, #128	@ 0x80
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b21      	cmp	r3, #33	@ 0x21
 8006b84:	d108      	bne.n	8006b98 <UART_DMAError+0x46>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006b92:	68b8      	ldr	r0, [r7, #8]
 8006b94:	f000 f8ce 	bl	8006d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba2:	2b40      	cmp	r3, #64	@ 0x40
 8006ba4:	bf0c      	ite	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	2300      	movne	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b22      	cmp	r3, #34	@ 0x22
 8006bb8:	d108      	bne.n	8006bcc <UART_DMAError+0x7a>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006bc6:	68b8      	ldr	r0, [r7, #8]
 8006bc8:	f000 f8dc 	bl	8006d84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bd0:	f043 0210 	orr.w	r2, r3, #16
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd8:	68b8      	ldr	r0, [r7, #8]
 8006bda:	f7ff fea1 	bl	8006920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b098      	sub	sp, #96	@ 0x60
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2222      	movs	r2, #34	@ 0x22
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c14:	4a44      	ldr	r2, [pc, #272]	@ (8006d28 <UART_Start_Receive_DMA+0x140>)
 8006c16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1c:	4a43      	ldr	r2, [pc, #268]	@ (8006d2c <UART_Start_Receive_DMA+0x144>)
 8006c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c24:	4a42      	ldr	r2, [pc, #264]	@ (8006d30 <UART_Start_Receive_DMA+0x148>)
 8006c26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c30:	f107 0308 	add.w	r3, r7, #8
 8006c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	f7fc fc52 	bl	80034f0 <HAL_DMA_Start_IT>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d008      	beq.n	8006c64 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2210      	movs	r2, #16
 8006c56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e05d      	b.n	8006d20 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d019      	beq.n	8006cb6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ca2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e5      	bne.n	8006c82 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3314      	adds	r3, #20
 8006cd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cd6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e5      	bne.n	8006cb6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3314      	adds	r3, #20
 8006cf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6a39      	ldr	r1, [r7, #32]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e5      	bne.n	8006cea <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3760      	adds	r7, #96	@ 0x60
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	080069eb 	.word	0x080069eb
 8006d2c:	08006b17 	.word	0x08006b17
 8006d30:	08006b53 	.word	0x08006b53

08006d34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	@ 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	61ba      	str	r2, [r7, #24]
 8006d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6979      	ldr	r1, [r7, #20]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006d78:	bf00      	nop
 8006d7a:	3724      	adds	r7, #36	@ 0x24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b095      	sub	sp, #84	@ 0x54
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	330c      	adds	r3, #12
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	330c      	adds	r3, #12
 8006daa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dac:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3314      	adds	r3, #20
 8006dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3314      	adds	r3, #20
 8006dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d119      	bne.n	8006e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f023 0310 	bic.w	r3, r3, #16
 8006e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e1c:	61ba      	str	r2, [r7, #24]
 8006e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6979      	ldr	r1, [r7, #20]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e3e:	bf00      	nop
 8006e40:	3754      	adds	r7, #84	@ 0x54
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fd5e 	bl	8006920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b21      	cmp	r3, #33	@ 0x21
 8006e7e:	d13e      	bne.n	8006efe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e88:	d114      	bne.n	8006eb4 <UART_Transmit_IT+0x48>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d110      	bne.n	8006eb4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ea6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	1c9a      	adds	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	621a      	str	r2, [r3, #32]
 8006eb2:	e008      	b.n	8006ec6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	1c59      	adds	r1, r3, #1
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6211      	str	r1, [r2, #32]
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10f      	bne.n	8006efa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ee8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ef8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
  }
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f22:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fa fc7d 	bl	800182c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08c      	sub	sp, #48	@ 0x30
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b22      	cmp	r3, #34	@ 0x22
 8006f56:	f040 80aa 	bne.w	80070ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f62:	d115      	bne.n	8006f90 <UART_Receive_IT+0x54>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d111      	bne.n	8006f90 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	1c9a      	adds	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f8e:	e024      	b.n	8006fda <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f9e:	d007      	beq.n	8006fb0 <UART_Receive_IT+0x74>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <UART_Receive_IT+0x82>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e008      	b.n	8006fd0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d15d      	bne.n	80070aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0220 	bic.w	r2, r2, #32
 8006ffc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800700c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695a      	ldr	r2, [r3, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0201 	bic.w	r2, r2, #1
 800701c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007030:	2b01      	cmp	r3, #1
 8007032:	d135      	bne.n	80070a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	330c      	adds	r3, #12
 8007040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	613b      	str	r3, [r7, #16]
   return(result);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705a:	623a      	str	r2, [r7, #32]
 800705c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	69f9      	ldr	r1, [r7, #28]
 8007060:	6a3a      	ldr	r2, [r7, #32]
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	61bb      	str	r3, [r7, #24]
   return(result);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b10      	cmp	r3, #16
 800707a:	d10a      	bne.n	8007092 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fa fae7 	bl	800166c <HAL_UARTEx_RxEventCallback>
 800709e:	e002      	b.n	80070a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff fc29 	bl	80068f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e002      	b.n	80070b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e000      	b.n	80070b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070ae:	2302      	movs	r3, #2
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3730      	adds	r7, #48	@ 0x30
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070bc:	b0c0      	sub	sp, #256	@ 0x100
 80070be:	af00      	add	r7, sp, #0
 80070c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d4:	68d9      	ldr	r1, [r3, #12]
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	ea40 0301 	orr.w	r3, r0, r1
 80070e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007110:	f021 010c 	bic.w	r1, r1, #12
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800711e:	430b      	orrs	r3, r1
 8007120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800712e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007132:	6999      	ldr	r1, [r3, #24]
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	ea40 0301 	orr.w	r3, r0, r1
 800713e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4b8f      	ldr	r3, [pc, #572]	@ (8007384 <UART_SetConfig+0x2cc>)
 8007148:	429a      	cmp	r2, r3
 800714a:	d005      	beq.n	8007158 <UART_SetConfig+0xa0>
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b8d      	ldr	r3, [pc, #564]	@ (8007388 <UART_SetConfig+0x2d0>)
 8007154:	429a      	cmp	r2, r3
 8007156:	d104      	bne.n	8007162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007158:	f7fd ffb6 	bl	80050c8 <HAL_RCC_GetPCLK2Freq>
 800715c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007160:	e003      	b.n	800716a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007162:	f7fd ff9d 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 8007166:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007174:	f040 810c 	bne.w	8007390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800717c:	2200      	movs	r2, #0
 800717e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007182:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	1891      	adds	r1, r2, r2
 8007190:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007192:	415b      	adcs	r3, r3
 8007194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800719a:	4621      	mov	r1, r4
 800719c:	eb12 0801 	adds.w	r8, r2, r1
 80071a0:	4629      	mov	r1, r5
 80071a2:	eb43 0901 	adc.w	r9, r3, r1
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ba:	4690      	mov	r8, r2
 80071bc:	4699      	mov	r9, r3
 80071be:	4623      	mov	r3, r4
 80071c0:	eb18 0303 	adds.w	r3, r8, r3
 80071c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071c8:	462b      	mov	r3, r5
 80071ca:	eb49 0303 	adc.w	r3, r9, r3
 80071ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071e6:	460b      	mov	r3, r1
 80071e8:	18db      	adds	r3, r3, r3
 80071ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ec:	4613      	mov	r3, r2
 80071ee:	eb42 0303 	adc.w	r3, r2, r3
 80071f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80071f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071fc:	f7f9 fd44 	bl	8000c88 <__aeabi_uldivmod>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4b61      	ldr	r3, [pc, #388]	@ (800738c <UART_SetConfig+0x2d4>)
 8007206:	fba3 2302 	umull	r2, r3, r3, r2
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	011c      	lsls	r4, r3, #4
 800720e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007212:	2200      	movs	r2, #0
 8007214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007218:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800721c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007220:	4642      	mov	r2, r8
 8007222:	464b      	mov	r3, r9
 8007224:	1891      	adds	r1, r2, r2
 8007226:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007228:	415b      	adcs	r3, r3
 800722a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800722c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007230:	4641      	mov	r1, r8
 8007232:	eb12 0a01 	adds.w	sl, r2, r1
 8007236:	4649      	mov	r1, r9
 8007238:	eb43 0b01 	adc.w	fp, r3, r1
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800724c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007250:	4692      	mov	sl, r2
 8007252:	469b      	mov	fp, r3
 8007254:	4643      	mov	r3, r8
 8007256:	eb1a 0303 	adds.w	r3, sl, r3
 800725a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800725e:	464b      	mov	r3, r9
 8007260:	eb4b 0303 	adc.w	r3, fp, r3
 8007264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007274:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800727c:	460b      	mov	r3, r1
 800727e:	18db      	adds	r3, r3, r3
 8007280:	643b      	str	r3, [r7, #64]	@ 0x40
 8007282:	4613      	mov	r3, r2
 8007284:	eb42 0303 	adc.w	r3, r2, r3
 8007288:	647b      	str	r3, [r7, #68]	@ 0x44
 800728a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800728e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007292:	f7f9 fcf9 	bl	8000c88 <__aeabi_uldivmod>
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	4611      	mov	r1, r2
 800729c:	4b3b      	ldr	r3, [pc, #236]	@ (800738c <UART_SetConfig+0x2d4>)
 800729e:	fba3 2301 	umull	r2, r3, r3, r1
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	2264      	movs	r2, #100	@ 0x64
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	1acb      	subs	r3, r1, r3
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072b2:	4b36      	ldr	r3, [pc, #216]	@ (800738c <UART_SetConfig+0x2d4>)
 80072b4:	fba3 2302 	umull	r2, r3, r3, r2
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072c0:	441c      	add	r4, r3
 80072c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072d4:	4642      	mov	r2, r8
 80072d6:	464b      	mov	r3, r9
 80072d8:	1891      	adds	r1, r2, r2
 80072da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072dc:	415b      	adcs	r3, r3
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072e4:	4641      	mov	r1, r8
 80072e6:	1851      	adds	r1, r2, r1
 80072e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80072ea:	4649      	mov	r1, r9
 80072ec:	414b      	adcs	r3, r1
 80072ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072fc:	4659      	mov	r1, fp
 80072fe:	00cb      	lsls	r3, r1, #3
 8007300:	4651      	mov	r1, sl
 8007302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007306:	4651      	mov	r1, sl
 8007308:	00ca      	lsls	r2, r1, #3
 800730a:	4610      	mov	r0, r2
 800730c:	4619      	mov	r1, r3
 800730e:	4603      	mov	r3, r0
 8007310:	4642      	mov	r2, r8
 8007312:	189b      	adds	r3, r3, r2
 8007314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007318:	464b      	mov	r3, r9
 800731a:	460a      	mov	r2, r1
 800731c:	eb42 0303 	adc.w	r3, r2, r3
 8007320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007330:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007338:	460b      	mov	r3, r1
 800733a:	18db      	adds	r3, r3, r3
 800733c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800733e:	4613      	mov	r3, r2
 8007340:	eb42 0303 	adc.w	r3, r2, r3
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800734a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800734e:	f7f9 fc9b 	bl	8000c88 <__aeabi_uldivmod>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4b0d      	ldr	r3, [pc, #52]	@ (800738c <UART_SetConfig+0x2d4>)
 8007358:	fba3 1302 	umull	r1, r3, r3, r2
 800735c:	095b      	lsrs	r3, r3, #5
 800735e:	2164      	movs	r1, #100	@ 0x64
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	3332      	adds	r3, #50	@ 0x32
 800736a:	4a08      	ldr	r2, [pc, #32]	@ (800738c <UART_SetConfig+0x2d4>)
 800736c:	fba2 2303 	umull	r2, r3, r2, r3
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	f003 0207 	and.w	r2, r3, #7
 8007376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4422      	add	r2, r4
 800737e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007380:	e106      	b.n	8007590 <UART_SetConfig+0x4d8>
 8007382:	bf00      	nop
 8007384:	40011000 	.word	0x40011000
 8007388:	40011400 	.word	0x40011400
 800738c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007394:	2200      	movs	r2, #0
 8007396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800739a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800739e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073a2:	4642      	mov	r2, r8
 80073a4:	464b      	mov	r3, r9
 80073a6:	1891      	adds	r1, r2, r2
 80073a8:	6239      	str	r1, [r7, #32]
 80073aa:	415b      	adcs	r3, r3
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073b2:	4641      	mov	r1, r8
 80073b4:	1854      	adds	r4, r2, r1
 80073b6:	4649      	mov	r1, r9
 80073b8:	eb43 0501 	adc.w	r5, r3, r1
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	00eb      	lsls	r3, r5, #3
 80073c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ca:	00e2      	lsls	r2, r4, #3
 80073cc:	4614      	mov	r4, r2
 80073ce:	461d      	mov	r5, r3
 80073d0:	4643      	mov	r3, r8
 80073d2:	18e3      	adds	r3, r4, r3
 80073d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073d8:	464b      	mov	r3, r9
 80073da:	eb45 0303 	adc.w	r3, r5, r3
 80073de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	f04f 0300 	mov.w	r3, #0
 80073fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073fe:	4629      	mov	r1, r5
 8007400:	008b      	lsls	r3, r1, #2
 8007402:	4621      	mov	r1, r4
 8007404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007408:	4621      	mov	r1, r4
 800740a:	008a      	lsls	r2, r1, #2
 800740c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007410:	f7f9 fc3a 	bl	8000c88 <__aeabi_uldivmod>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4b60      	ldr	r3, [pc, #384]	@ (800759c <UART_SetConfig+0x4e4>)
 800741a:	fba3 2302 	umull	r2, r3, r3, r2
 800741e:	095b      	lsrs	r3, r3, #5
 8007420:	011c      	lsls	r4, r3, #4
 8007422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800742c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007434:	4642      	mov	r2, r8
 8007436:	464b      	mov	r3, r9
 8007438:	1891      	adds	r1, r2, r2
 800743a:	61b9      	str	r1, [r7, #24]
 800743c:	415b      	adcs	r3, r3
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007444:	4641      	mov	r1, r8
 8007446:	1851      	adds	r1, r2, r1
 8007448:	6139      	str	r1, [r7, #16]
 800744a:	4649      	mov	r1, r9
 800744c:	414b      	adcs	r3, r1
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800745c:	4659      	mov	r1, fp
 800745e:	00cb      	lsls	r3, r1, #3
 8007460:	4651      	mov	r1, sl
 8007462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007466:	4651      	mov	r1, sl
 8007468:	00ca      	lsls	r2, r1, #3
 800746a:	4610      	mov	r0, r2
 800746c:	4619      	mov	r1, r3
 800746e:	4603      	mov	r3, r0
 8007470:	4642      	mov	r2, r8
 8007472:	189b      	adds	r3, r3, r2
 8007474:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007478:	464b      	mov	r3, r9
 800747a:	460a      	mov	r2, r1
 800747c:	eb42 0303 	adc.w	r3, r2, r3
 8007480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800748e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800749c:	4649      	mov	r1, r9
 800749e:	008b      	lsls	r3, r1, #2
 80074a0:	4641      	mov	r1, r8
 80074a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074a6:	4641      	mov	r1, r8
 80074a8:	008a      	lsls	r2, r1, #2
 80074aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074ae:	f7f9 fbeb 	bl	8000c88 <__aeabi_uldivmod>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4611      	mov	r1, r2
 80074b8:	4b38      	ldr	r3, [pc, #224]	@ (800759c <UART_SetConfig+0x4e4>)
 80074ba:	fba3 2301 	umull	r2, r3, r3, r1
 80074be:	095b      	lsrs	r3, r3, #5
 80074c0:	2264      	movs	r2, #100	@ 0x64
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
 80074c6:	1acb      	subs	r3, r1, r3
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	3332      	adds	r3, #50	@ 0x32
 80074cc:	4a33      	ldr	r2, [pc, #204]	@ (800759c <UART_SetConfig+0x4e4>)
 80074ce:	fba2 2303 	umull	r2, r3, r2, r3
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074d8:	441c      	add	r4, r3
 80074da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074de:	2200      	movs	r2, #0
 80074e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80074e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80074e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	415b      	adcs	r3, r3
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074f8:	4641      	mov	r1, r8
 80074fa:	1851      	adds	r1, r2, r1
 80074fc:	6039      	str	r1, [r7, #0]
 80074fe:	4649      	mov	r1, r9
 8007500:	414b      	adcs	r3, r1
 8007502:	607b      	str	r3, [r7, #4]
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007510:	4659      	mov	r1, fp
 8007512:	00cb      	lsls	r3, r1, #3
 8007514:	4651      	mov	r1, sl
 8007516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751a:	4651      	mov	r1, sl
 800751c:	00ca      	lsls	r2, r1, #3
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	4603      	mov	r3, r0
 8007524:	4642      	mov	r2, r8
 8007526:	189b      	adds	r3, r3, r2
 8007528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800752a:	464b      	mov	r3, r9
 800752c:	460a      	mov	r2, r1
 800752e:	eb42 0303 	adc.w	r3, r2, r3
 8007532:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	663b      	str	r3, [r7, #96]	@ 0x60
 800753e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800754c:	4649      	mov	r1, r9
 800754e:	008b      	lsls	r3, r1, #2
 8007550:	4641      	mov	r1, r8
 8007552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007556:	4641      	mov	r1, r8
 8007558:	008a      	lsls	r2, r1, #2
 800755a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800755e:	f7f9 fb93 	bl	8000c88 <__aeabi_uldivmod>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4b0d      	ldr	r3, [pc, #52]	@ (800759c <UART_SetConfig+0x4e4>)
 8007568:	fba3 1302 	umull	r1, r3, r3, r2
 800756c:	095b      	lsrs	r3, r3, #5
 800756e:	2164      	movs	r1, #100	@ 0x64
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	011b      	lsls	r3, r3, #4
 8007578:	3332      	adds	r3, #50	@ 0x32
 800757a:	4a08      	ldr	r2, [pc, #32]	@ (800759c <UART_SetConfig+0x4e4>)
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	f003 020f 	and.w	r2, r3, #15
 8007586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4422      	add	r2, r4
 800758e:	609a      	str	r2, [r3, #8]
}
 8007590:	bf00      	nop
 8007592:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007596:	46bd      	mov	sp, r7
 8007598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800759c:	51eb851f 	.word	0x51eb851f

080075a0 <__cvt>:
 80075a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a4:	ec57 6b10 	vmov	r6, r7, d0
 80075a8:	2f00      	cmp	r7, #0
 80075aa:	460c      	mov	r4, r1
 80075ac:	4619      	mov	r1, r3
 80075ae:	463b      	mov	r3, r7
 80075b0:	bfbb      	ittet	lt
 80075b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80075b6:	461f      	movlt	r7, r3
 80075b8:	2300      	movge	r3, #0
 80075ba:	232d      	movlt	r3, #45	@ 0x2d
 80075bc:	700b      	strb	r3, [r1, #0]
 80075be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80075c4:	4691      	mov	r9, r2
 80075c6:	f023 0820 	bic.w	r8, r3, #32
 80075ca:	bfbc      	itt	lt
 80075cc:	4632      	movlt	r2, r6
 80075ce:	4616      	movlt	r6, r2
 80075d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075d4:	d005      	beq.n	80075e2 <__cvt+0x42>
 80075d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075da:	d100      	bne.n	80075de <__cvt+0x3e>
 80075dc:	3401      	adds	r4, #1
 80075de:	2102      	movs	r1, #2
 80075e0:	e000      	b.n	80075e4 <__cvt+0x44>
 80075e2:	2103      	movs	r1, #3
 80075e4:	ab03      	add	r3, sp, #12
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	ab02      	add	r3, sp, #8
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	ec47 6b10 	vmov	d0, r6, r7
 80075f0:	4653      	mov	r3, sl
 80075f2:	4622      	mov	r2, r4
 80075f4:	f001 f8bc 	bl	8008770 <_dtoa_r>
 80075f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075fc:	4605      	mov	r5, r0
 80075fe:	d119      	bne.n	8007634 <__cvt+0x94>
 8007600:	f019 0f01 	tst.w	r9, #1
 8007604:	d00e      	beq.n	8007624 <__cvt+0x84>
 8007606:	eb00 0904 	add.w	r9, r0, r4
 800760a:	2200      	movs	r2, #0
 800760c:	2300      	movs	r3, #0
 800760e:	4630      	mov	r0, r6
 8007610:	4639      	mov	r1, r7
 8007612:	f7f9 fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007616:	b108      	cbz	r0, 800761c <__cvt+0x7c>
 8007618:	f8cd 900c 	str.w	r9, [sp, #12]
 800761c:	2230      	movs	r2, #48	@ 0x30
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	454b      	cmp	r3, r9
 8007622:	d31e      	bcc.n	8007662 <__cvt+0xc2>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007628:	1b5b      	subs	r3, r3, r5
 800762a:	4628      	mov	r0, r5
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	b004      	add	sp, #16
 8007630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007634:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007638:	eb00 0904 	add.w	r9, r0, r4
 800763c:	d1e5      	bne.n	800760a <__cvt+0x6a>
 800763e:	7803      	ldrb	r3, [r0, #0]
 8007640:	2b30      	cmp	r3, #48	@ 0x30
 8007642:	d10a      	bne.n	800765a <__cvt+0xba>
 8007644:	2200      	movs	r2, #0
 8007646:	2300      	movs	r3, #0
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007650:	b918      	cbnz	r0, 800765a <__cvt+0xba>
 8007652:	f1c4 0401 	rsb	r4, r4, #1
 8007656:	f8ca 4000 	str.w	r4, [sl]
 800765a:	f8da 3000 	ldr.w	r3, [sl]
 800765e:	4499      	add	r9, r3
 8007660:	e7d3      	b.n	800760a <__cvt+0x6a>
 8007662:	1c59      	adds	r1, r3, #1
 8007664:	9103      	str	r1, [sp, #12]
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	e7d9      	b.n	800761e <__cvt+0x7e>

0800766a <__exponent>:
 800766a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800766c:	2900      	cmp	r1, #0
 800766e:	bfba      	itte	lt
 8007670:	4249      	neglt	r1, r1
 8007672:	232d      	movlt	r3, #45	@ 0x2d
 8007674:	232b      	movge	r3, #43	@ 0x2b
 8007676:	2909      	cmp	r1, #9
 8007678:	7002      	strb	r2, [r0, #0]
 800767a:	7043      	strb	r3, [r0, #1]
 800767c:	dd29      	ble.n	80076d2 <__exponent+0x68>
 800767e:	f10d 0307 	add.w	r3, sp, #7
 8007682:	461d      	mov	r5, r3
 8007684:	270a      	movs	r7, #10
 8007686:	461a      	mov	r2, r3
 8007688:	fbb1 f6f7 	udiv	r6, r1, r7
 800768c:	fb07 1416 	mls	r4, r7, r6, r1
 8007690:	3430      	adds	r4, #48	@ 0x30
 8007692:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007696:	460c      	mov	r4, r1
 8007698:	2c63      	cmp	r4, #99	@ 0x63
 800769a:	f103 33ff 	add.w	r3, r3, #4294967295
 800769e:	4631      	mov	r1, r6
 80076a0:	dcf1      	bgt.n	8007686 <__exponent+0x1c>
 80076a2:	3130      	adds	r1, #48	@ 0x30
 80076a4:	1e94      	subs	r4, r2, #2
 80076a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076aa:	1c41      	adds	r1, r0, #1
 80076ac:	4623      	mov	r3, r4
 80076ae:	42ab      	cmp	r3, r5
 80076b0:	d30a      	bcc.n	80076c8 <__exponent+0x5e>
 80076b2:	f10d 0309 	add.w	r3, sp, #9
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	42ac      	cmp	r4, r5
 80076ba:	bf88      	it	hi
 80076bc:	2300      	movhi	r3, #0
 80076be:	3302      	adds	r3, #2
 80076c0:	4403      	add	r3, r0
 80076c2:	1a18      	subs	r0, r3, r0
 80076c4:	b003      	add	sp, #12
 80076c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076d0:	e7ed      	b.n	80076ae <__exponent+0x44>
 80076d2:	2330      	movs	r3, #48	@ 0x30
 80076d4:	3130      	adds	r1, #48	@ 0x30
 80076d6:	7083      	strb	r3, [r0, #2]
 80076d8:	70c1      	strb	r1, [r0, #3]
 80076da:	1d03      	adds	r3, r0, #4
 80076dc:	e7f1      	b.n	80076c2 <__exponent+0x58>
	...

080076e0 <_printf_float>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	b08d      	sub	sp, #52	@ 0x34
 80076e6:	460c      	mov	r4, r1
 80076e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076ec:	4616      	mov	r6, r2
 80076ee:	461f      	mov	r7, r3
 80076f0:	4605      	mov	r5, r0
 80076f2:	f000 ff27 	bl	8008544 <_localeconv_r>
 80076f6:	6803      	ldr	r3, [r0, #0]
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7f8 fdb8 	bl	8000270 <strlen>
 8007700:	2300      	movs	r3, #0
 8007702:	930a      	str	r3, [sp, #40]	@ 0x28
 8007704:	f8d8 3000 	ldr.w	r3, [r8]
 8007708:	9005      	str	r0, [sp, #20]
 800770a:	3307      	adds	r3, #7
 800770c:	f023 0307 	bic.w	r3, r3, #7
 8007710:	f103 0208 	add.w	r2, r3, #8
 8007714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007718:	f8d4 b000 	ldr.w	fp, [r4]
 800771c:	f8c8 2000 	str.w	r2, [r8]
 8007720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007724:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	f8cd 8018 	str.w	r8, [sp, #24]
 800772e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007736:	4b9c      	ldr	r3, [pc, #624]	@ (80079a8 <_printf_float+0x2c8>)
 8007738:	f04f 32ff 	mov.w	r2, #4294967295
 800773c:	f7f9 f9f6 	bl	8000b2c <__aeabi_dcmpun>
 8007740:	bb70      	cbnz	r0, 80077a0 <_printf_float+0xc0>
 8007742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007746:	4b98      	ldr	r3, [pc, #608]	@ (80079a8 <_printf_float+0x2c8>)
 8007748:	f04f 32ff 	mov.w	r2, #4294967295
 800774c:	f7f9 f9d0 	bl	8000af0 <__aeabi_dcmple>
 8007750:	bb30      	cbnz	r0, 80077a0 <_printf_float+0xc0>
 8007752:	2200      	movs	r2, #0
 8007754:	2300      	movs	r3, #0
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f9 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800775e:	b110      	cbz	r0, 8007766 <_printf_float+0x86>
 8007760:	232d      	movs	r3, #45	@ 0x2d
 8007762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007766:	4a91      	ldr	r2, [pc, #580]	@ (80079ac <_printf_float+0x2cc>)
 8007768:	4b91      	ldr	r3, [pc, #580]	@ (80079b0 <_printf_float+0x2d0>)
 800776a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800776e:	bf8c      	ite	hi
 8007770:	4690      	movhi	r8, r2
 8007772:	4698      	movls	r8, r3
 8007774:	2303      	movs	r3, #3
 8007776:	6123      	str	r3, [r4, #16]
 8007778:	f02b 0304 	bic.w	r3, fp, #4
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	f04f 0900 	mov.w	r9, #0
 8007782:	9700      	str	r7, [sp, #0]
 8007784:	4633      	mov	r3, r6
 8007786:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007788:	4621      	mov	r1, r4
 800778a:	4628      	mov	r0, r5
 800778c:	f000 f9d2 	bl	8007b34 <_printf_common>
 8007790:	3001      	adds	r0, #1
 8007792:	f040 808d 	bne.w	80078b0 <_printf_float+0x1d0>
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	b00d      	add	sp, #52	@ 0x34
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	4640      	mov	r0, r8
 80077a6:	4649      	mov	r1, r9
 80077a8:	f7f9 f9c0 	bl	8000b2c <__aeabi_dcmpun>
 80077ac:	b140      	cbz	r0, 80077c0 <_printf_float+0xe0>
 80077ae:	464b      	mov	r3, r9
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfbc      	itt	lt
 80077b4:	232d      	movlt	r3, #45	@ 0x2d
 80077b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077ba:	4a7e      	ldr	r2, [pc, #504]	@ (80079b4 <_printf_float+0x2d4>)
 80077bc:	4b7e      	ldr	r3, [pc, #504]	@ (80079b8 <_printf_float+0x2d8>)
 80077be:	e7d4      	b.n	800776a <_printf_float+0x8a>
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80077c6:	9206      	str	r2, [sp, #24]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	d13b      	bne.n	8007844 <_printf_float+0x164>
 80077cc:	2306      	movs	r3, #6
 80077ce:	6063      	str	r3, [r4, #4]
 80077d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80077d4:	2300      	movs	r3, #0
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	9303      	str	r3, [sp, #12]
 80077da:	ab0a      	add	r3, sp, #40	@ 0x28
 80077dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077e0:	ab09      	add	r3, sp, #36	@ 0x24
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	6861      	ldr	r1, [r4, #4]
 80077e6:	ec49 8b10 	vmov	d0, r8, r9
 80077ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077ee:	4628      	mov	r0, r5
 80077f0:	f7ff fed6 	bl	80075a0 <__cvt>
 80077f4:	9b06      	ldr	r3, [sp, #24]
 80077f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077f8:	2b47      	cmp	r3, #71	@ 0x47
 80077fa:	4680      	mov	r8, r0
 80077fc:	d129      	bne.n	8007852 <_printf_float+0x172>
 80077fe:	1cc8      	adds	r0, r1, #3
 8007800:	db02      	blt.n	8007808 <_printf_float+0x128>
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	4299      	cmp	r1, r3
 8007806:	dd41      	ble.n	800788c <_printf_float+0x1ac>
 8007808:	f1aa 0a02 	sub.w	sl, sl, #2
 800780c:	fa5f fa8a 	uxtb.w	sl, sl
 8007810:	3901      	subs	r1, #1
 8007812:	4652      	mov	r2, sl
 8007814:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007818:	9109      	str	r1, [sp, #36]	@ 0x24
 800781a:	f7ff ff26 	bl	800766a <__exponent>
 800781e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007820:	1813      	adds	r3, r2, r0
 8007822:	2a01      	cmp	r2, #1
 8007824:	4681      	mov	r9, r0
 8007826:	6123      	str	r3, [r4, #16]
 8007828:	dc02      	bgt.n	8007830 <_printf_float+0x150>
 800782a:	6822      	ldr	r2, [r4, #0]
 800782c:	07d2      	lsls	r2, r2, #31
 800782e:	d501      	bpl.n	8007834 <_printf_float+0x154>
 8007830:	3301      	adds	r3, #1
 8007832:	6123      	str	r3, [r4, #16]
 8007834:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0a2      	beq.n	8007782 <_printf_float+0xa2>
 800783c:	232d      	movs	r3, #45	@ 0x2d
 800783e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007842:	e79e      	b.n	8007782 <_printf_float+0xa2>
 8007844:	9a06      	ldr	r2, [sp, #24]
 8007846:	2a47      	cmp	r2, #71	@ 0x47
 8007848:	d1c2      	bne.n	80077d0 <_printf_float+0xf0>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1c0      	bne.n	80077d0 <_printf_float+0xf0>
 800784e:	2301      	movs	r3, #1
 8007850:	e7bd      	b.n	80077ce <_printf_float+0xee>
 8007852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007856:	d9db      	bls.n	8007810 <_printf_float+0x130>
 8007858:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800785c:	d118      	bne.n	8007890 <_printf_float+0x1b0>
 800785e:	2900      	cmp	r1, #0
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	dd0b      	ble.n	800787c <_printf_float+0x19c>
 8007864:	6121      	str	r1, [r4, #16]
 8007866:	b913      	cbnz	r3, 800786e <_printf_float+0x18e>
 8007868:	6822      	ldr	r2, [r4, #0]
 800786a:	07d0      	lsls	r0, r2, #31
 800786c:	d502      	bpl.n	8007874 <_printf_float+0x194>
 800786e:	3301      	adds	r3, #1
 8007870:	440b      	add	r3, r1
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007876:	f04f 0900 	mov.w	r9, #0
 800787a:	e7db      	b.n	8007834 <_printf_float+0x154>
 800787c:	b913      	cbnz	r3, 8007884 <_printf_float+0x1a4>
 800787e:	6822      	ldr	r2, [r4, #0]
 8007880:	07d2      	lsls	r2, r2, #31
 8007882:	d501      	bpl.n	8007888 <_printf_float+0x1a8>
 8007884:	3302      	adds	r3, #2
 8007886:	e7f4      	b.n	8007872 <_printf_float+0x192>
 8007888:	2301      	movs	r3, #1
 800788a:	e7f2      	b.n	8007872 <_printf_float+0x192>
 800788c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007892:	4299      	cmp	r1, r3
 8007894:	db05      	blt.n	80078a2 <_printf_float+0x1c2>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	6121      	str	r1, [r4, #16]
 800789a:	07d8      	lsls	r0, r3, #31
 800789c:	d5ea      	bpl.n	8007874 <_printf_float+0x194>
 800789e:	1c4b      	adds	r3, r1, #1
 80078a0:	e7e7      	b.n	8007872 <_printf_float+0x192>
 80078a2:	2900      	cmp	r1, #0
 80078a4:	bfd4      	ite	le
 80078a6:	f1c1 0202 	rsble	r2, r1, #2
 80078aa:	2201      	movgt	r2, #1
 80078ac:	4413      	add	r3, r2
 80078ae:	e7e0      	b.n	8007872 <_printf_float+0x192>
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	055a      	lsls	r2, r3, #21
 80078b4:	d407      	bmi.n	80078c6 <_printf_float+0x1e6>
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	4642      	mov	r2, r8
 80078ba:	4631      	mov	r1, r6
 80078bc:	4628      	mov	r0, r5
 80078be:	47b8      	blx	r7
 80078c0:	3001      	adds	r0, #1
 80078c2:	d12b      	bne.n	800791c <_printf_float+0x23c>
 80078c4:	e767      	b.n	8007796 <_printf_float+0xb6>
 80078c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078ca:	f240 80dd 	bls.w	8007a88 <_printf_float+0x3a8>
 80078ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	f7f9 f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d033      	beq.n	8007946 <_printf_float+0x266>
 80078de:	4a37      	ldr	r2, [pc, #220]	@ (80079bc <_printf_float+0x2dc>)
 80078e0:	2301      	movs	r3, #1
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f af54 	beq.w	8007796 <_printf_float+0xb6>
 80078ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078f2:	4543      	cmp	r3, r8
 80078f4:	db02      	blt.n	80078fc <_printf_float+0x21c>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	07d8      	lsls	r0, r3, #31
 80078fa:	d50f      	bpl.n	800791c <_printf_float+0x23c>
 80078fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007900:	4631      	mov	r1, r6
 8007902:	4628      	mov	r0, r5
 8007904:	47b8      	blx	r7
 8007906:	3001      	adds	r0, #1
 8007908:	f43f af45 	beq.w	8007796 <_printf_float+0xb6>
 800790c:	f04f 0900 	mov.w	r9, #0
 8007910:	f108 38ff 	add.w	r8, r8, #4294967295
 8007914:	f104 0a1a 	add.w	sl, r4, #26
 8007918:	45c8      	cmp	r8, r9
 800791a:	dc09      	bgt.n	8007930 <_printf_float+0x250>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	079b      	lsls	r3, r3, #30
 8007920:	f100 8103 	bmi.w	8007b2a <_printf_float+0x44a>
 8007924:	68e0      	ldr	r0, [r4, #12]
 8007926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007928:	4298      	cmp	r0, r3
 800792a:	bfb8      	it	lt
 800792c:	4618      	movlt	r0, r3
 800792e:	e734      	b.n	800779a <_printf_float+0xba>
 8007930:	2301      	movs	r3, #1
 8007932:	4652      	mov	r2, sl
 8007934:	4631      	mov	r1, r6
 8007936:	4628      	mov	r0, r5
 8007938:	47b8      	blx	r7
 800793a:	3001      	adds	r0, #1
 800793c:	f43f af2b 	beq.w	8007796 <_printf_float+0xb6>
 8007940:	f109 0901 	add.w	r9, r9, #1
 8007944:	e7e8      	b.n	8007918 <_printf_float+0x238>
 8007946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	dc39      	bgt.n	80079c0 <_printf_float+0x2e0>
 800794c:	4a1b      	ldr	r2, [pc, #108]	@ (80079bc <_printf_float+0x2dc>)
 800794e:	2301      	movs	r3, #1
 8007950:	4631      	mov	r1, r6
 8007952:	4628      	mov	r0, r5
 8007954:	47b8      	blx	r7
 8007956:	3001      	adds	r0, #1
 8007958:	f43f af1d 	beq.w	8007796 <_printf_float+0xb6>
 800795c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007960:	ea59 0303 	orrs.w	r3, r9, r3
 8007964:	d102      	bne.n	800796c <_printf_float+0x28c>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	07d9      	lsls	r1, r3, #31
 800796a:	d5d7      	bpl.n	800791c <_printf_float+0x23c>
 800796c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	f43f af0d 	beq.w	8007796 <_printf_float+0xb6>
 800797c:	f04f 0a00 	mov.w	sl, #0
 8007980:	f104 0b1a 	add.w	fp, r4, #26
 8007984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007986:	425b      	negs	r3, r3
 8007988:	4553      	cmp	r3, sl
 800798a:	dc01      	bgt.n	8007990 <_printf_float+0x2b0>
 800798c:	464b      	mov	r3, r9
 800798e:	e793      	b.n	80078b8 <_printf_float+0x1d8>
 8007990:	2301      	movs	r3, #1
 8007992:	465a      	mov	r2, fp
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	47b8      	blx	r7
 800799a:	3001      	adds	r0, #1
 800799c:	f43f aefb 	beq.w	8007796 <_printf_float+0xb6>
 80079a0:	f10a 0a01 	add.w	sl, sl, #1
 80079a4:	e7ee      	b.n	8007984 <_printf_float+0x2a4>
 80079a6:	bf00      	nop
 80079a8:	7fefffff 	.word	0x7fefffff
 80079ac:	0800cc00 	.word	0x0800cc00
 80079b0:	0800cbfc 	.word	0x0800cbfc
 80079b4:	0800cc08 	.word	0x0800cc08
 80079b8:	0800cc04 	.word	0x0800cc04
 80079bc:	0800cd42 	.word	0x0800cd42
 80079c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079c6:	4553      	cmp	r3, sl
 80079c8:	bfa8      	it	ge
 80079ca:	4653      	movge	r3, sl
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	4699      	mov	r9, r3
 80079d0:	dc36      	bgt.n	8007a40 <_printf_float+0x360>
 80079d2:	f04f 0b00 	mov.w	fp, #0
 80079d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079da:	f104 021a 	add.w	r2, r4, #26
 80079de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079e0:	9306      	str	r3, [sp, #24]
 80079e2:	eba3 0309 	sub.w	r3, r3, r9
 80079e6:	455b      	cmp	r3, fp
 80079e8:	dc31      	bgt.n	8007a4e <_printf_float+0x36e>
 80079ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ec:	459a      	cmp	sl, r3
 80079ee:	dc3a      	bgt.n	8007a66 <_printf_float+0x386>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	07da      	lsls	r2, r3, #31
 80079f4:	d437      	bmi.n	8007a66 <_printf_float+0x386>
 80079f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f8:	ebaa 0903 	sub.w	r9, sl, r3
 80079fc:	9b06      	ldr	r3, [sp, #24]
 80079fe:	ebaa 0303 	sub.w	r3, sl, r3
 8007a02:	4599      	cmp	r9, r3
 8007a04:	bfa8      	it	ge
 8007a06:	4699      	movge	r9, r3
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	dc33      	bgt.n	8007a76 <_printf_float+0x396>
 8007a0e:	f04f 0800 	mov.w	r8, #0
 8007a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a16:	f104 0b1a 	add.w	fp, r4, #26
 8007a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a20:	eba3 0309 	sub.w	r3, r3, r9
 8007a24:	4543      	cmp	r3, r8
 8007a26:	f77f af79 	ble.w	800791c <_printf_float+0x23c>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	465a      	mov	r2, fp
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	f43f aeae 	beq.w	8007796 <_printf_float+0xb6>
 8007a3a:	f108 0801 	add.w	r8, r8, #1
 8007a3e:	e7ec      	b.n	8007a1a <_printf_float+0x33a>
 8007a40:	4642      	mov	r2, r8
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b8      	blx	r7
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d1c2      	bne.n	80079d2 <_printf_float+0x2f2>
 8007a4c:	e6a3      	b.n	8007796 <_printf_float+0xb6>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	9206      	str	r2, [sp, #24]
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f43f ae9c 	beq.w	8007796 <_printf_float+0xb6>
 8007a5e:	9a06      	ldr	r2, [sp, #24]
 8007a60:	f10b 0b01 	add.w	fp, fp, #1
 8007a64:	e7bb      	b.n	80079de <_printf_float+0x2fe>
 8007a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	d1c0      	bne.n	80079f6 <_printf_float+0x316>
 8007a74:	e68f      	b.n	8007796 <_printf_float+0xb6>
 8007a76:	9a06      	ldr	r2, [sp, #24]
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4442      	add	r2, r8
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	d1c3      	bne.n	8007a0e <_printf_float+0x32e>
 8007a86:	e686      	b.n	8007796 <_printf_float+0xb6>
 8007a88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a8c:	f1ba 0f01 	cmp.w	sl, #1
 8007a90:	dc01      	bgt.n	8007a96 <_printf_float+0x3b6>
 8007a92:	07db      	lsls	r3, r3, #31
 8007a94:	d536      	bpl.n	8007b04 <_printf_float+0x424>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4642      	mov	r2, r8
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b8      	blx	r7
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	f43f ae78 	beq.w	8007796 <_printf_float+0xb6>
 8007aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	f43f ae70 	beq.w	8007796 <_printf_float+0xb6>
 8007ab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007aba:	2200      	movs	r2, #0
 8007abc:	2300      	movs	r3, #0
 8007abe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ac2:	f7f9 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac6:	b9c0      	cbnz	r0, 8007afa <_printf_float+0x41a>
 8007ac8:	4653      	mov	r3, sl
 8007aca:	f108 0201 	add.w	r2, r8, #1
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d10c      	bne.n	8007af2 <_printf_float+0x412>
 8007ad8:	e65d      	b.n	8007796 <_printf_float+0xb6>
 8007ada:	2301      	movs	r3, #1
 8007adc:	465a      	mov	r2, fp
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	f43f ae56 	beq.w	8007796 <_printf_float+0xb6>
 8007aea:	f108 0801 	add.w	r8, r8, #1
 8007aee:	45d0      	cmp	r8, sl
 8007af0:	dbf3      	blt.n	8007ada <_printf_float+0x3fa>
 8007af2:	464b      	mov	r3, r9
 8007af4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007af8:	e6df      	b.n	80078ba <_printf_float+0x1da>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	f104 0b1a 	add.w	fp, r4, #26
 8007b02:	e7f4      	b.n	8007aee <_printf_float+0x40e>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4642      	mov	r2, r8
 8007b08:	e7e1      	b.n	8007ace <_printf_float+0x3ee>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	464a      	mov	r2, r9
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f ae3e 	beq.w	8007796 <_printf_float+0xb6>
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	68e3      	ldr	r3, [r4, #12]
 8007b20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b22:	1a5b      	subs	r3, r3, r1
 8007b24:	4543      	cmp	r3, r8
 8007b26:	dcf0      	bgt.n	8007b0a <_printf_float+0x42a>
 8007b28:	e6fc      	b.n	8007924 <_printf_float+0x244>
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	f104 0919 	add.w	r9, r4, #25
 8007b32:	e7f4      	b.n	8007b1e <_printf_float+0x43e>

08007b34 <_printf_common>:
 8007b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	4616      	mov	r6, r2
 8007b3a:	4698      	mov	r8, r3
 8007b3c:	688a      	ldr	r2, [r1, #8]
 8007b3e:	690b      	ldr	r3, [r1, #16]
 8007b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bfb8      	it	lt
 8007b48:	4613      	movlt	r3, r2
 8007b4a:	6033      	str	r3, [r6, #0]
 8007b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b50:	4607      	mov	r7, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	b10a      	cbz	r2, 8007b5a <_printf_common+0x26>
 8007b56:	3301      	adds	r3, #1
 8007b58:	6033      	str	r3, [r6, #0]
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	0699      	lsls	r1, r3, #26
 8007b5e:	bf42      	ittt	mi
 8007b60:	6833      	ldrmi	r3, [r6, #0]
 8007b62:	3302      	addmi	r3, #2
 8007b64:	6033      	strmi	r3, [r6, #0]
 8007b66:	6825      	ldr	r5, [r4, #0]
 8007b68:	f015 0506 	ands.w	r5, r5, #6
 8007b6c:	d106      	bne.n	8007b7c <_printf_common+0x48>
 8007b6e:	f104 0a19 	add.w	sl, r4, #25
 8007b72:	68e3      	ldr	r3, [r4, #12]
 8007b74:	6832      	ldr	r2, [r6, #0]
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	42ab      	cmp	r3, r5
 8007b7a:	dc26      	bgt.n	8007bca <_printf_common+0x96>
 8007b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b80:	6822      	ldr	r2, [r4, #0]
 8007b82:	3b00      	subs	r3, #0
 8007b84:	bf18      	it	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	0692      	lsls	r2, r2, #26
 8007b8a:	d42b      	bmi.n	8007be4 <_printf_common+0xb0>
 8007b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b90:	4641      	mov	r1, r8
 8007b92:	4638      	mov	r0, r7
 8007b94:	47c8      	blx	r9
 8007b96:	3001      	adds	r0, #1
 8007b98:	d01e      	beq.n	8007bd8 <_printf_common+0xa4>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	6922      	ldr	r2, [r4, #16]
 8007b9e:	f003 0306 	and.w	r3, r3, #6
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	bf02      	ittt	eq
 8007ba6:	68e5      	ldreq	r5, [r4, #12]
 8007ba8:	6833      	ldreq	r3, [r6, #0]
 8007baa:	1aed      	subeq	r5, r5, r3
 8007bac:	68a3      	ldr	r3, [r4, #8]
 8007bae:	bf0c      	ite	eq
 8007bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb4:	2500      	movne	r5, #0
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	bfc4      	itt	gt
 8007bba:	1a9b      	subgt	r3, r3, r2
 8007bbc:	18ed      	addgt	r5, r5, r3
 8007bbe:	2600      	movs	r6, #0
 8007bc0:	341a      	adds	r4, #26
 8007bc2:	42b5      	cmp	r5, r6
 8007bc4:	d11a      	bne.n	8007bfc <_printf_common+0xc8>
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	e008      	b.n	8007bdc <_printf_common+0xa8>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4652      	mov	r2, sl
 8007bce:	4641      	mov	r1, r8
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	47c8      	blx	r9
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d103      	bne.n	8007be0 <_printf_common+0xac>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be0:	3501      	adds	r5, #1
 8007be2:	e7c6      	b.n	8007b72 <_printf_common+0x3e>
 8007be4:	18e1      	adds	r1, r4, r3
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	2030      	movs	r0, #48	@ 0x30
 8007bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bee:	4422      	add	r2, r4
 8007bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	e7c7      	b.n	8007b8c <_printf_common+0x58>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4622      	mov	r2, r4
 8007c00:	4641      	mov	r1, r8
 8007c02:	4638      	mov	r0, r7
 8007c04:	47c8      	blx	r9
 8007c06:	3001      	adds	r0, #1
 8007c08:	d0e6      	beq.n	8007bd8 <_printf_common+0xa4>
 8007c0a:	3601      	adds	r6, #1
 8007c0c:	e7d9      	b.n	8007bc2 <_printf_common+0x8e>
	...

08007c10 <_printf_i>:
 8007c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	7e0f      	ldrb	r7, [r1, #24]
 8007c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c18:	2f78      	cmp	r7, #120	@ 0x78
 8007c1a:	4691      	mov	r9, r2
 8007c1c:	4680      	mov	r8, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	469a      	mov	sl, r3
 8007c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c26:	d807      	bhi.n	8007c38 <_printf_i+0x28>
 8007c28:	2f62      	cmp	r7, #98	@ 0x62
 8007c2a:	d80a      	bhi.n	8007c42 <_printf_i+0x32>
 8007c2c:	2f00      	cmp	r7, #0
 8007c2e:	f000 80d1 	beq.w	8007dd4 <_printf_i+0x1c4>
 8007c32:	2f58      	cmp	r7, #88	@ 0x58
 8007c34:	f000 80b8 	beq.w	8007da8 <_printf_i+0x198>
 8007c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c40:	e03a      	b.n	8007cb8 <_printf_i+0xa8>
 8007c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c46:	2b15      	cmp	r3, #21
 8007c48:	d8f6      	bhi.n	8007c38 <_printf_i+0x28>
 8007c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007c50 <_printf_i+0x40>)
 8007c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c50:	08007ca9 	.word	0x08007ca9
 8007c54:	08007cbd 	.word	0x08007cbd
 8007c58:	08007c39 	.word	0x08007c39
 8007c5c:	08007c39 	.word	0x08007c39
 8007c60:	08007c39 	.word	0x08007c39
 8007c64:	08007c39 	.word	0x08007c39
 8007c68:	08007cbd 	.word	0x08007cbd
 8007c6c:	08007c39 	.word	0x08007c39
 8007c70:	08007c39 	.word	0x08007c39
 8007c74:	08007c39 	.word	0x08007c39
 8007c78:	08007c39 	.word	0x08007c39
 8007c7c:	08007dbb 	.word	0x08007dbb
 8007c80:	08007ce7 	.word	0x08007ce7
 8007c84:	08007d75 	.word	0x08007d75
 8007c88:	08007c39 	.word	0x08007c39
 8007c8c:	08007c39 	.word	0x08007c39
 8007c90:	08007ddd 	.word	0x08007ddd
 8007c94:	08007c39 	.word	0x08007c39
 8007c98:	08007ce7 	.word	0x08007ce7
 8007c9c:	08007c39 	.word	0x08007c39
 8007ca0:	08007c39 	.word	0x08007c39
 8007ca4:	08007d7d 	.word	0x08007d7d
 8007ca8:	6833      	ldr	r3, [r6, #0]
 8007caa:	1d1a      	adds	r2, r3, #4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6032      	str	r2, [r6, #0]
 8007cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e09c      	b.n	8007df6 <_printf_i+0x1e6>
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	6820      	ldr	r0, [r4, #0]
 8007cc0:	1d19      	adds	r1, r3, #4
 8007cc2:	6031      	str	r1, [r6, #0]
 8007cc4:	0606      	lsls	r6, r0, #24
 8007cc6:	d501      	bpl.n	8007ccc <_printf_i+0xbc>
 8007cc8:	681d      	ldr	r5, [r3, #0]
 8007cca:	e003      	b.n	8007cd4 <_printf_i+0xc4>
 8007ccc:	0645      	lsls	r5, r0, #25
 8007cce:	d5fb      	bpl.n	8007cc8 <_printf_i+0xb8>
 8007cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cd4:	2d00      	cmp	r5, #0
 8007cd6:	da03      	bge.n	8007ce0 <_printf_i+0xd0>
 8007cd8:	232d      	movs	r3, #45	@ 0x2d
 8007cda:	426d      	negs	r5, r5
 8007cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ce0:	4858      	ldr	r0, [pc, #352]	@ (8007e44 <_printf_i+0x234>)
 8007ce2:	230a      	movs	r3, #10
 8007ce4:	e011      	b.n	8007d0a <_printf_i+0xfa>
 8007ce6:	6821      	ldr	r1, [r4, #0]
 8007ce8:	6833      	ldr	r3, [r6, #0]
 8007cea:	0608      	lsls	r0, r1, #24
 8007cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cf0:	d402      	bmi.n	8007cf8 <_printf_i+0xe8>
 8007cf2:	0649      	lsls	r1, r1, #25
 8007cf4:	bf48      	it	mi
 8007cf6:	b2ad      	uxthmi	r5, r5
 8007cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cfa:	4852      	ldr	r0, [pc, #328]	@ (8007e44 <_printf_i+0x234>)
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	bf14      	ite	ne
 8007d00:	230a      	movne	r3, #10
 8007d02:	2308      	moveq	r3, #8
 8007d04:	2100      	movs	r1, #0
 8007d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d0a:	6866      	ldr	r6, [r4, #4]
 8007d0c:	60a6      	str	r6, [r4, #8]
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	db05      	blt.n	8007d1e <_printf_i+0x10e>
 8007d12:	6821      	ldr	r1, [r4, #0]
 8007d14:	432e      	orrs	r6, r5
 8007d16:	f021 0104 	bic.w	r1, r1, #4
 8007d1a:	6021      	str	r1, [r4, #0]
 8007d1c:	d04b      	beq.n	8007db6 <_printf_i+0x1a6>
 8007d1e:	4616      	mov	r6, r2
 8007d20:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d24:	fb03 5711 	mls	r7, r3, r1, r5
 8007d28:	5dc7      	ldrb	r7, [r0, r7]
 8007d2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d2e:	462f      	mov	r7, r5
 8007d30:	42bb      	cmp	r3, r7
 8007d32:	460d      	mov	r5, r1
 8007d34:	d9f4      	bls.n	8007d20 <_printf_i+0x110>
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d10b      	bne.n	8007d52 <_printf_i+0x142>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	07df      	lsls	r7, r3, #31
 8007d3e:	d508      	bpl.n	8007d52 <_printf_i+0x142>
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	6861      	ldr	r1, [r4, #4]
 8007d44:	4299      	cmp	r1, r3
 8007d46:	bfde      	ittt	le
 8007d48:	2330      	movle	r3, #48	@ 0x30
 8007d4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d52:	1b92      	subs	r2, r2, r6
 8007d54:	6122      	str	r2, [r4, #16]
 8007d56:	f8cd a000 	str.w	sl, [sp]
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	aa03      	add	r2, sp, #12
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4640      	mov	r0, r8
 8007d62:	f7ff fee7 	bl	8007b34 <_printf_common>
 8007d66:	3001      	adds	r0, #1
 8007d68:	d14a      	bne.n	8007e00 <_printf_i+0x1f0>
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6e:	b004      	add	sp, #16
 8007d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	f043 0320 	orr.w	r3, r3, #32
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	4832      	ldr	r0, [pc, #200]	@ (8007e48 <_printf_i+0x238>)
 8007d7e:	2778      	movs	r7, #120	@ 0x78
 8007d80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	6831      	ldr	r1, [r6, #0]
 8007d88:	061f      	lsls	r7, r3, #24
 8007d8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d8e:	d402      	bmi.n	8007d96 <_printf_i+0x186>
 8007d90:	065f      	lsls	r7, r3, #25
 8007d92:	bf48      	it	mi
 8007d94:	b2ad      	uxthmi	r5, r5
 8007d96:	6031      	str	r1, [r6, #0]
 8007d98:	07d9      	lsls	r1, r3, #31
 8007d9a:	bf44      	itt	mi
 8007d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8007da0:	6023      	strmi	r3, [r4, #0]
 8007da2:	b11d      	cbz	r5, 8007dac <_printf_i+0x19c>
 8007da4:	2310      	movs	r3, #16
 8007da6:	e7ad      	b.n	8007d04 <_printf_i+0xf4>
 8007da8:	4826      	ldr	r0, [pc, #152]	@ (8007e44 <_printf_i+0x234>)
 8007daa:	e7e9      	b.n	8007d80 <_printf_i+0x170>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	f023 0320 	bic.w	r3, r3, #32
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	e7f6      	b.n	8007da4 <_printf_i+0x194>
 8007db6:	4616      	mov	r6, r2
 8007db8:	e7bd      	b.n	8007d36 <_printf_i+0x126>
 8007dba:	6833      	ldr	r3, [r6, #0]
 8007dbc:	6825      	ldr	r5, [r4, #0]
 8007dbe:	6961      	ldr	r1, [r4, #20]
 8007dc0:	1d18      	adds	r0, r3, #4
 8007dc2:	6030      	str	r0, [r6, #0]
 8007dc4:	062e      	lsls	r6, r5, #24
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	d501      	bpl.n	8007dce <_printf_i+0x1be>
 8007dca:	6019      	str	r1, [r3, #0]
 8007dcc:	e002      	b.n	8007dd4 <_printf_i+0x1c4>
 8007dce:	0668      	lsls	r0, r5, #25
 8007dd0:	d5fb      	bpl.n	8007dca <_printf_i+0x1ba>
 8007dd2:	8019      	strh	r1, [r3, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	4616      	mov	r6, r2
 8007dda:	e7bc      	b.n	8007d56 <_printf_i+0x146>
 8007ddc:	6833      	ldr	r3, [r6, #0]
 8007dde:	1d1a      	adds	r2, r3, #4
 8007de0:	6032      	str	r2, [r6, #0]
 8007de2:	681e      	ldr	r6, [r3, #0]
 8007de4:	6862      	ldr	r2, [r4, #4]
 8007de6:	2100      	movs	r1, #0
 8007de8:	4630      	mov	r0, r6
 8007dea:	f7f8 f9f1 	bl	80001d0 <memchr>
 8007dee:	b108      	cbz	r0, 8007df4 <_printf_i+0x1e4>
 8007df0:	1b80      	subs	r0, r0, r6
 8007df2:	6060      	str	r0, [r4, #4]
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dfe:	e7aa      	b.n	8007d56 <_printf_i+0x146>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	4632      	mov	r2, r6
 8007e04:	4649      	mov	r1, r9
 8007e06:	4640      	mov	r0, r8
 8007e08:	47d0      	blx	sl
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d0ad      	beq.n	8007d6a <_printf_i+0x15a>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	079b      	lsls	r3, r3, #30
 8007e12:	d413      	bmi.n	8007e3c <_printf_i+0x22c>
 8007e14:	68e0      	ldr	r0, [r4, #12]
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	4298      	cmp	r0, r3
 8007e1a:	bfb8      	it	lt
 8007e1c:	4618      	movlt	r0, r3
 8007e1e:	e7a6      	b.n	8007d6e <_printf_i+0x15e>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4632      	mov	r2, r6
 8007e24:	4649      	mov	r1, r9
 8007e26:	4640      	mov	r0, r8
 8007e28:	47d0      	blx	sl
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d09d      	beq.n	8007d6a <_printf_i+0x15a>
 8007e2e:	3501      	adds	r5, #1
 8007e30:	68e3      	ldr	r3, [r4, #12]
 8007e32:	9903      	ldr	r1, [sp, #12]
 8007e34:	1a5b      	subs	r3, r3, r1
 8007e36:	42ab      	cmp	r3, r5
 8007e38:	dcf2      	bgt.n	8007e20 <_printf_i+0x210>
 8007e3a:	e7eb      	b.n	8007e14 <_printf_i+0x204>
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	f104 0619 	add.w	r6, r4, #25
 8007e42:	e7f5      	b.n	8007e30 <_printf_i+0x220>
 8007e44:	0800cc0c 	.word	0x0800cc0c
 8007e48:	0800cc1d 	.word	0x0800cc1d

08007e4c <_scanf_float>:
 8007e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e50:	b087      	sub	sp, #28
 8007e52:	4691      	mov	r9, r2
 8007e54:	9303      	str	r3, [sp, #12]
 8007e56:	688b      	ldr	r3, [r1, #8]
 8007e58:	1e5a      	subs	r2, r3, #1
 8007e5a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007e5e:	bf81      	itttt	hi
 8007e60:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007e64:	eb03 0b05 	addhi.w	fp, r3, r5
 8007e68:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007e6c:	608b      	strhi	r3, [r1, #8]
 8007e6e:	680b      	ldr	r3, [r1, #0]
 8007e70:	460a      	mov	r2, r1
 8007e72:	f04f 0500 	mov.w	r5, #0
 8007e76:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007e7a:	f842 3b1c 	str.w	r3, [r2], #28
 8007e7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e82:	4680      	mov	r8, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	bf98      	it	ls
 8007e88:	f04f 0b00 	movls.w	fp, #0
 8007e8c:	9201      	str	r2, [sp, #4]
 8007e8e:	4616      	mov	r6, r2
 8007e90:	46aa      	mov	sl, r5
 8007e92:	462f      	mov	r7, r5
 8007e94:	9502      	str	r5, [sp, #8]
 8007e96:	68a2      	ldr	r2, [r4, #8]
 8007e98:	b15a      	cbz	r2, 8007eb2 <_scanf_float+0x66>
 8007e9a:	f8d9 3000 	ldr.w	r3, [r9]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ea2:	d863      	bhi.n	8007f6c <_scanf_float+0x120>
 8007ea4:	2b40      	cmp	r3, #64	@ 0x40
 8007ea6:	d83b      	bhi.n	8007f20 <_scanf_float+0xd4>
 8007ea8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007eac:	b2c8      	uxtb	r0, r1
 8007eae:	280e      	cmp	r0, #14
 8007eb0:	d939      	bls.n	8007f26 <_scanf_float+0xda>
 8007eb2:	b11f      	cbz	r7, 8007ebc <_scanf_float+0x70>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ec0:	f1ba 0f01 	cmp.w	sl, #1
 8007ec4:	f200 8114 	bhi.w	80080f0 <_scanf_float+0x2a4>
 8007ec8:	9b01      	ldr	r3, [sp, #4]
 8007eca:	429e      	cmp	r6, r3
 8007ecc:	f200 8105 	bhi.w	80080da <_scanf_float+0x28e>
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	b007      	add	sp, #28
 8007ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007edc:	2a0d      	cmp	r2, #13
 8007ede:	d8e8      	bhi.n	8007eb2 <_scanf_float+0x66>
 8007ee0:	a101      	add	r1, pc, #4	@ (adr r1, 8007ee8 <_scanf_float+0x9c>)
 8007ee2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08008031 	.word	0x08008031
 8007eec:	08007eb3 	.word	0x08007eb3
 8007ef0:	08007eb3 	.word	0x08007eb3
 8007ef4:	08007eb3 	.word	0x08007eb3
 8007ef8:	0800808d 	.word	0x0800808d
 8007efc:	08008067 	.word	0x08008067
 8007f00:	08007eb3 	.word	0x08007eb3
 8007f04:	08007eb3 	.word	0x08007eb3
 8007f08:	0800803f 	.word	0x0800803f
 8007f0c:	08007eb3 	.word	0x08007eb3
 8007f10:	08007eb3 	.word	0x08007eb3
 8007f14:	08007eb3 	.word	0x08007eb3
 8007f18:	08007eb3 	.word	0x08007eb3
 8007f1c:	08007ffb 	.word	0x08007ffb
 8007f20:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007f24:	e7da      	b.n	8007edc <_scanf_float+0x90>
 8007f26:	290e      	cmp	r1, #14
 8007f28:	d8c3      	bhi.n	8007eb2 <_scanf_float+0x66>
 8007f2a:	a001      	add	r0, pc, #4	@ (adr r0, 8007f30 <_scanf_float+0xe4>)
 8007f2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f30:	08007feb 	.word	0x08007feb
 8007f34:	08007eb3 	.word	0x08007eb3
 8007f38:	08007feb 	.word	0x08007feb
 8007f3c:	0800807b 	.word	0x0800807b
 8007f40:	08007eb3 	.word	0x08007eb3
 8007f44:	08007f8d 	.word	0x08007f8d
 8007f48:	08007fd1 	.word	0x08007fd1
 8007f4c:	08007fd1 	.word	0x08007fd1
 8007f50:	08007fd1 	.word	0x08007fd1
 8007f54:	08007fd1 	.word	0x08007fd1
 8007f58:	08007fd1 	.word	0x08007fd1
 8007f5c:	08007fd1 	.word	0x08007fd1
 8007f60:	08007fd1 	.word	0x08007fd1
 8007f64:	08007fd1 	.word	0x08007fd1
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f6e:	d809      	bhi.n	8007f84 <_scanf_float+0x138>
 8007f70:	2b60      	cmp	r3, #96	@ 0x60
 8007f72:	d8b1      	bhi.n	8007ed8 <_scanf_float+0x8c>
 8007f74:	2b54      	cmp	r3, #84	@ 0x54
 8007f76:	d07b      	beq.n	8008070 <_scanf_float+0x224>
 8007f78:	2b59      	cmp	r3, #89	@ 0x59
 8007f7a:	d19a      	bne.n	8007eb2 <_scanf_float+0x66>
 8007f7c:	2d07      	cmp	r5, #7
 8007f7e:	d198      	bne.n	8007eb2 <_scanf_float+0x66>
 8007f80:	2508      	movs	r5, #8
 8007f82:	e02f      	b.n	8007fe4 <_scanf_float+0x198>
 8007f84:	2b74      	cmp	r3, #116	@ 0x74
 8007f86:	d073      	beq.n	8008070 <_scanf_float+0x224>
 8007f88:	2b79      	cmp	r3, #121	@ 0x79
 8007f8a:	e7f6      	b.n	8007f7a <_scanf_float+0x12e>
 8007f8c:	6821      	ldr	r1, [r4, #0]
 8007f8e:	05c8      	lsls	r0, r1, #23
 8007f90:	d51e      	bpl.n	8007fd0 <_scanf_float+0x184>
 8007f92:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007f96:	6021      	str	r1, [r4, #0]
 8007f98:	3701      	adds	r7, #1
 8007f9a:	f1bb 0f00 	cmp.w	fp, #0
 8007f9e:	d003      	beq.n	8007fa8 <_scanf_float+0x15c>
 8007fa0:	3201      	adds	r2, #1
 8007fa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fa6:	60a2      	str	r2, [r4, #8]
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	60a3      	str	r3, [r4, #8]
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f8c9 3004 	str.w	r3, [r9, #4]
 8007fc0:	f340 8082 	ble.w	80080c8 <_scanf_float+0x27c>
 8007fc4:	f8d9 3000 	ldr.w	r3, [r9]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	f8c9 3000 	str.w	r3, [r9]
 8007fce:	e762      	b.n	8007e96 <_scanf_float+0x4a>
 8007fd0:	eb1a 0105 	adds.w	r1, sl, r5
 8007fd4:	f47f af6d 	bne.w	8007eb2 <_scanf_float+0x66>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007fde:	6022      	str	r2, [r4, #0]
 8007fe0:	460d      	mov	r5, r1
 8007fe2:	468a      	mov	sl, r1
 8007fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8007fe8:	e7de      	b.n	8007fa8 <_scanf_float+0x15c>
 8007fea:	6822      	ldr	r2, [r4, #0]
 8007fec:	0610      	lsls	r0, r2, #24
 8007fee:	f57f af60 	bpl.w	8007eb2 <_scanf_float+0x66>
 8007ff2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ff6:	6022      	str	r2, [r4, #0]
 8007ff8:	e7f4      	b.n	8007fe4 <_scanf_float+0x198>
 8007ffa:	f1ba 0f00 	cmp.w	sl, #0
 8007ffe:	d10c      	bne.n	800801a <_scanf_float+0x1ce>
 8008000:	b977      	cbnz	r7, 8008020 <_scanf_float+0x1d4>
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008008:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800800c:	d108      	bne.n	8008020 <_scanf_float+0x1d4>
 800800e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	f04f 0a01 	mov.w	sl, #1
 8008018:	e7e4      	b.n	8007fe4 <_scanf_float+0x198>
 800801a:	f1ba 0f02 	cmp.w	sl, #2
 800801e:	d050      	beq.n	80080c2 <_scanf_float+0x276>
 8008020:	2d01      	cmp	r5, #1
 8008022:	d002      	beq.n	800802a <_scanf_float+0x1de>
 8008024:	2d04      	cmp	r5, #4
 8008026:	f47f af44 	bne.w	8007eb2 <_scanf_float+0x66>
 800802a:	3501      	adds	r5, #1
 800802c:	b2ed      	uxtb	r5, r5
 800802e:	e7d9      	b.n	8007fe4 <_scanf_float+0x198>
 8008030:	f1ba 0f01 	cmp.w	sl, #1
 8008034:	f47f af3d 	bne.w	8007eb2 <_scanf_float+0x66>
 8008038:	f04f 0a02 	mov.w	sl, #2
 800803c:	e7d2      	b.n	8007fe4 <_scanf_float+0x198>
 800803e:	b975      	cbnz	r5, 800805e <_scanf_float+0x212>
 8008040:	2f00      	cmp	r7, #0
 8008042:	f47f af37 	bne.w	8007eb4 <_scanf_float+0x68>
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800804c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008050:	f040 8103 	bne.w	800825a <_scanf_float+0x40e>
 8008054:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008058:	6022      	str	r2, [r4, #0]
 800805a:	2501      	movs	r5, #1
 800805c:	e7c2      	b.n	8007fe4 <_scanf_float+0x198>
 800805e:	2d03      	cmp	r5, #3
 8008060:	d0e3      	beq.n	800802a <_scanf_float+0x1de>
 8008062:	2d05      	cmp	r5, #5
 8008064:	e7df      	b.n	8008026 <_scanf_float+0x1da>
 8008066:	2d02      	cmp	r5, #2
 8008068:	f47f af23 	bne.w	8007eb2 <_scanf_float+0x66>
 800806c:	2503      	movs	r5, #3
 800806e:	e7b9      	b.n	8007fe4 <_scanf_float+0x198>
 8008070:	2d06      	cmp	r5, #6
 8008072:	f47f af1e 	bne.w	8007eb2 <_scanf_float+0x66>
 8008076:	2507      	movs	r5, #7
 8008078:	e7b4      	b.n	8007fe4 <_scanf_float+0x198>
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	0591      	lsls	r1, r2, #22
 800807e:	f57f af18 	bpl.w	8007eb2 <_scanf_float+0x66>
 8008082:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	9702      	str	r7, [sp, #8]
 800808a:	e7ab      	b.n	8007fe4 <_scanf_float+0x198>
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008092:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008096:	d005      	beq.n	80080a4 <_scanf_float+0x258>
 8008098:	0550      	lsls	r0, r2, #21
 800809a:	f57f af0a 	bpl.w	8007eb2 <_scanf_float+0x66>
 800809e:	2f00      	cmp	r7, #0
 80080a0:	f000 80db 	beq.w	800825a <_scanf_float+0x40e>
 80080a4:	0591      	lsls	r1, r2, #22
 80080a6:	bf58      	it	pl
 80080a8:	9902      	ldrpl	r1, [sp, #8]
 80080aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080ae:	bf58      	it	pl
 80080b0:	1a79      	subpl	r1, r7, r1
 80080b2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80080b6:	bf58      	it	pl
 80080b8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80080bc:	6022      	str	r2, [r4, #0]
 80080be:	2700      	movs	r7, #0
 80080c0:	e790      	b.n	8007fe4 <_scanf_float+0x198>
 80080c2:	f04f 0a03 	mov.w	sl, #3
 80080c6:	e78d      	b.n	8007fe4 <_scanf_float+0x198>
 80080c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80080cc:	4649      	mov	r1, r9
 80080ce:	4640      	mov	r0, r8
 80080d0:	4798      	blx	r3
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f43f aedf 	beq.w	8007e96 <_scanf_float+0x4a>
 80080d8:	e6eb      	b.n	8007eb2 <_scanf_float+0x66>
 80080da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080e2:	464a      	mov	r2, r9
 80080e4:	4640      	mov	r0, r8
 80080e6:	4798      	blx	r3
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	e6eb      	b.n	8007ec8 <_scanf_float+0x7c>
 80080f0:	1e6b      	subs	r3, r5, #1
 80080f2:	2b06      	cmp	r3, #6
 80080f4:	d824      	bhi.n	8008140 <_scanf_float+0x2f4>
 80080f6:	2d02      	cmp	r5, #2
 80080f8:	d836      	bhi.n	8008168 <_scanf_float+0x31c>
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	429e      	cmp	r6, r3
 80080fe:	f67f aee7 	bls.w	8007ed0 <_scanf_float+0x84>
 8008102:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800810a:	464a      	mov	r2, r9
 800810c:	4640      	mov	r0, r8
 800810e:	4798      	blx	r3
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	3b01      	subs	r3, #1
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	e7f0      	b.n	80080fa <_scanf_float+0x2ae>
 8008118:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800811c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008120:	464a      	mov	r2, r9
 8008122:	4640      	mov	r0, r8
 8008124:	4798      	blx	r3
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	3b01      	subs	r3, #1
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008130:	fa5f fa8a 	uxtb.w	sl, sl
 8008134:	f1ba 0f02 	cmp.w	sl, #2
 8008138:	d1ee      	bne.n	8008118 <_scanf_float+0x2cc>
 800813a:	3d03      	subs	r5, #3
 800813c:	b2ed      	uxtb	r5, r5
 800813e:	1b76      	subs	r6, r6, r5
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	05da      	lsls	r2, r3, #23
 8008144:	d530      	bpl.n	80081a8 <_scanf_float+0x35c>
 8008146:	055b      	lsls	r3, r3, #21
 8008148:	d511      	bpl.n	800816e <_scanf_float+0x322>
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	429e      	cmp	r6, r3
 800814e:	f67f aebf 	bls.w	8007ed0 <_scanf_float+0x84>
 8008152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800815a:	464a      	mov	r2, r9
 800815c:	4640      	mov	r0, r8
 800815e:	4798      	blx	r3
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	3b01      	subs	r3, #1
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	e7f0      	b.n	800814a <_scanf_float+0x2fe>
 8008168:	46aa      	mov	sl, r5
 800816a:	46b3      	mov	fp, r6
 800816c:	e7de      	b.n	800812c <_scanf_float+0x2e0>
 800816e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	2965      	cmp	r1, #101	@ 0x65
 8008176:	f103 33ff 	add.w	r3, r3, #4294967295
 800817a:	f106 35ff 	add.w	r5, r6, #4294967295
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	d00c      	beq.n	800819c <_scanf_float+0x350>
 8008182:	2945      	cmp	r1, #69	@ 0x45
 8008184:	d00a      	beq.n	800819c <_scanf_float+0x350>
 8008186:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800818a:	464a      	mov	r2, r9
 800818c:	4640      	mov	r0, r8
 800818e:	4798      	blx	r3
 8008190:	6923      	ldr	r3, [r4, #16]
 8008192:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008196:	3b01      	subs	r3, #1
 8008198:	1eb5      	subs	r5, r6, #2
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081a0:	464a      	mov	r2, r9
 80081a2:	4640      	mov	r0, r8
 80081a4:	4798      	blx	r3
 80081a6:	462e      	mov	r6, r5
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	f012 0210 	ands.w	r2, r2, #16
 80081ae:	d001      	beq.n	80081b4 <_scanf_float+0x368>
 80081b0:	2000      	movs	r0, #0
 80081b2:	e68e      	b.n	8007ed2 <_scanf_float+0x86>
 80081b4:	7032      	strb	r2, [r6, #0]
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80081bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081c0:	d125      	bne.n	800820e <_scanf_float+0x3c2>
 80081c2:	9b02      	ldr	r3, [sp, #8]
 80081c4:	429f      	cmp	r7, r3
 80081c6:	d00a      	beq.n	80081de <_scanf_float+0x392>
 80081c8:	1bda      	subs	r2, r3, r7
 80081ca:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80081ce:	429e      	cmp	r6, r3
 80081d0:	bf28      	it	cs
 80081d2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80081d6:	4922      	ldr	r1, [pc, #136]	@ (8008260 <_scanf_float+0x414>)
 80081d8:	4630      	mov	r0, r6
 80081da:	f000 f907 	bl	80083ec <siprintf>
 80081de:	9901      	ldr	r1, [sp, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	4640      	mov	r0, r8
 80081e4:	f002 fc40 	bl	800aa68 <_strtod_r>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	6821      	ldr	r1, [r4, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f011 0f02 	tst.w	r1, #2
 80081f2:	ec57 6b10 	vmov	r6, r7, d0
 80081f6:	f103 0204 	add.w	r2, r3, #4
 80081fa:	d015      	beq.n	8008228 <_scanf_float+0x3dc>
 80081fc:	9903      	ldr	r1, [sp, #12]
 80081fe:	600a      	str	r2, [r1, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	e9c3 6700 	strd	r6, r7, [r3]
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60e3      	str	r3, [r4, #12]
 800820c:	e7d0      	b.n	80081b0 <_scanf_float+0x364>
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0e4      	beq.n	80081de <_scanf_float+0x392>
 8008214:	9905      	ldr	r1, [sp, #20]
 8008216:	230a      	movs	r3, #10
 8008218:	3101      	adds	r1, #1
 800821a:	4640      	mov	r0, r8
 800821c:	f002 fca4 	bl	800ab68 <_strtol_r>
 8008220:	9b04      	ldr	r3, [sp, #16]
 8008222:	9e05      	ldr	r6, [sp, #20]
 8008224:	1ac2      	subs	r2, r0, r3
 8008226:	e7d0      	b.n	80081ca <_scanf_float+0x37e>
 8008228:	f011 0f04 	tst.w	r1, #4
 800822c:	9903      	ldr	r1, [sp, #12]
 800822e:	600a      	str	r2, [r1, #0]
 8008230:	d1e6      	bne.n	8008200 <_scanf_float+0x3b4>
 8008232:	681d      	ldr	r5, [r3, #0]
 8008234:	4632      	mov	r2, r6
 8008236:	463b      	mov	r3, r7
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	f7f8 fc76 	bl	8000b2c <__aeabi_dcmpun>
 8008240:	b128      	cbz	r0, 800824e <_scanf_float+0x402>
 8008242:	4808      	ldr	r0, [pc, #32]	@ (8008264 <_scanf_float+0x418>)
 8008244:	f000 fa04 	bl	8008650 <nanf>
 8008248:	ed85 0a00 	vstr	s0, [r5]
 800824c:	e7db      	b.n	8008206 <_scanf_float+0x3ba>
 800824e:	4630      	mov	r0, r6
 8008250:	4639      	mov	r1, r7
 8008252:	f7f8 fcc9 	bl	8000be8 <__aeabi_d2f>
 8008256:	6028      	str	r0, [r5, #0]
 8008258:	e7d5      	b.n	8008206 <_scanf_float+0x3ba>
 800825a:	2700      	movs	r7, #0
 800825c:	e62e      	b.n	8007ebc <_scanf_float+0x70>
 800825e:	bf00      	nop
 8008260:	0800cc2e 	.word	0x0800cc2e
 8008264:	0800cd8a 	.word	0x0800cd8a

08008268 <std>:
 8008268:	2300      	movs	r3, #0
 800826a:	b510      	push	{r4, lr}
 800826c:	4604      	mov	r4, r0
 800826e:	e9c0 3300 	strd	r3, r3, [r0]
 8008272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008276:	6083      	str	r3, [r0, #8]
 8008278:	8181      	strh	r1, [r0, #12]
 800827a:	6643      	str	r3, [r0, #100]	@ 0x64
 800827c:	81c2      	strh	r2, [r0, #14]
 800827e:	6183      	str	r3, [r0, #24]
 8008280:	4619      	mov	r1, r3
 8008282:	2208      	movs	r2, #8
 8008284:	305c      	adds	r0, #92	@ 0x5c
 8008286:	f000 f954 	bl	8008532 <memset>
 800828a:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <std+0x58>)
 800828c:	6263      	str	r3, [r4, #36]	@ 0x24
 800828e:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <std+0x5c>)
 8008290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008292:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <std+0x60>)
 8008294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008296:	4b0d      	ldr	r3, [pc, #52]	@ (80082cc <std+0x64>)
 8008298:	6323      	str	r3, [r4, #48]	@ 0x30
 800829a:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <std+0x68>)
 800829c:	6224      	str	r4, [r4, #32]
 800829e:	429c      	cmp	r4, r3
 80082a0:	d006      	beq.n	80082b0 <std+0x48>
 80082a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082a6:	4294      	cmp	r4, r2
 80082a8:	d002      	beq.n	80082b0 <std+0x48>
 80082aa:	33d0      	adds	r3, #208	@ 0xd0
 80082ac:	429c      	cmp	r4, r3
 80082ae:	d105      	bne.n	80082bc <std+0x54>
 80082b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b8:	f000 b9b8 	b.w	800862c <__retarget_lock_init_recursive>
 80082bc:	bd10      	pop	{r4, pc}
 80082be:	bf00      	nop
 80082c0:	08008489 	.word	0x08008489
 80082c4:	080084af 	.word	0x080084af
 80082c8:	080084e7 	.word	0x080084e7
 80082cc:	0800850b 	.word	0x0800850b
 80082d0:	200012c0 	.word	0x200012c0

080082d4 <stdio_exit_handler>:
 80082d4:	4a02      	ldr	r2, [pc, #8]	@ (80082e0 <stdio_exit_handler+0xc>)
 80082d6:	4903      	ldr	r1, [pc, #12]	@ (80082e4 <stdio_exit_handler+0x10>)
 80082d8:	4803      	ldr	r0, [pc, #12]	@ (80082e8 <stdio_exit_handler+0x14>)
 80082da:	f000 b869 	b.w	80083b0 <_fwalk_sglue>
 80082de:	bf00      	nop
 80082e0:	20000038 	.word	0x20000038
 80082e4:	0800b561 	.word	0x0800b561
 80082e8:	20000048 	.word	0x20000048

080082ec <cleanup_stdio>:
 80082ec:	6841      	ldr	r1, [r0, #4]
 80082ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <cleanup_stdio+0x34>)
 80082f0:	4299      	cmp	r1, r3
 80082f2:	b510      	push	{r4, lr}
 80082f4:	4604      	mov	r4, r0
 80082f6:	d001      	beq.n	80082fc <cleanup_stdio+0x10>
 80082f8:	f003 f932 	bl	800b560 <_fflush_r>
 80082fc:	68a1      	ldr	r1, [r4, #8]
 80082fe:	4b09      	ldr	r3, [pc, #36]	@ (8008324 <cleanup_stdio+0x38>)
 8008300:	4299      	cmp	r1, r3
 8008302:	d002      	beq.n	800830a <cleanup_stdio+0x1e>
 8008304:	4620      	mov	r0, r4
 8008306:	f003 f92b 	bl	800b560 <_fflush_r>
 800830a:	68e1      	ldr	r1, [r4, #12]
 800830c:	4b06      	ldr	r3, [pc, #24]	@ (8008328 <cleanup_stdio+0x3c>)
 800830e:	4299      	cmp	r1, r3
 8008310:	d004      	beq.n	800831c <cleanup_stdio+0x30>
 8008312:	4620      	mov	r0, r4
 8008314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008318:	f003 b922 	b.w	800b560 <_fflush_r>
 800831c:	bd10      	pop	{r4, pc}
 800831e:	bf00      	nop
 8008320:	200012c0 	.word	0x200012c0
 8008324:	20001328 	.word	0x20001328
 8008328:	20001390 	.word	0x20001390

0800832c <global_stdio_init.part.0>:
 800832c:	b510      	push	{r4, lr}
 800832e:	4b0b      	ldr	r3, [pc, #44]	@ (800835c <global_stdio_init.part.0+0x30>)
 8008330:	4c0b      	ldr	r4, [pc, #44]	@ (8008360 <global_stdio_init.part.0+0x34>)
 8008332:	4a0c      	ldr	r2, [pc, #48]	@ (8008364 <global_stdio_init.part.0+0x38>)
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	4620      	mov	r0, r4
 8008338:	2200      	movs	r2, #0
 800833a:	2104      	movs	r1, #4
 800833c:	f7ff ff94 	bl	8008268 <std>
 8008340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008344:	2201      	movs	r2, #1
 8008346:	2109      	movs	r1, #9
 8008348:	f7ff ff8e 	bl	8008268 <std>
 800834c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008350:	2202      	movs	r2, #2
 8008352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008356:	2112      	movs	r1, #18
 8008358:	f7ff bf86 	b.w	8008268 <std>
 800835c:	200013f8 	.word	0x200013f8
 8008360:	200012c0 	.word	0x200012c0
 8008364:	080082d5 	.word	0x080082d5

08008368 <__sfp_lock_acquire>:
 8008368:	4801      	ldr	r0, [pc, #4]	@ (8008370 <__sfp_lock_acquire+0x8>)
 800836a:	f000 b960 	b.w	800862e <__retarget_lock_acquire_recursive>
 800836e:	bf00      	nop
 8008370:	20001401 	.word	0x20001401

08008374 <__sfp_lock_release>:
 8008374:	4801      	ldr	r0, [pc, #4]	@ (800837c <__sfp_lock_release+0x8>)
 8008376:	f000 b95b 	b.w	8008630 <__retarget_lock_release_recursive>
 800837a:	bf00      	nop
 800837c:	20001401 	.word	0x20001401

08008380 <__sinit>:
 8008380:	b510      	push	{r4, lr}
 8008382:	4604      	mov	r4, r0
 8008384:	f7ff fff0 	bl	8008368 <__sfp_lock_acquire>
 8008388:	6a23      	ldr	r3, [r4, #32]
 800838a:	b11b      	cbz	r3, 8008394 <__sinit+0x14>
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008390:	f7ff bff0 	b.w	8008374 <__sfp_lock_release>
 8008394:	4b04      	ldr	r3, [pc, #16]	@ (80083a8 <__sinit+0x28>)
 8008396:	6223      	str	r3, [r4, #32]
 8008398:	4b04      	ldr	r3, [pc, #16]	@ (80083ac <__sinit+0x2c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1f5      	bne.n	800838c <__sinit+0xc>
 80083a0:	f7ff ffc4 	bl	800832c <global_stdio_init.part.0>
 80083a4:	e7f2      	b.n	800838c <__sinit+0xc>
 80083a6:	bf00      	nop
 80083a8:	080082ed 	.word	0x080082ed
 80083ac:	200013f8 	.word	0x200013f8

080083b0 <_fwalk_sglue>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	4607      	mov	r7, r0
 80083b6:	4688      	mov	r8, r1
 80083b8:	4614      	mov	r4, r2
 80083ba:	2600      	movs	r6, #0
 80083bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083c0:	f1b9 0901 	subs.w	r9, r9, #1
 80083c4:	d505      	bpl.n	80083d2 <_fwalk_sglue+0x22>
 80083c6:	6824      	ldr	r4, [r4, #0]
 80083c8:	2c00      	cmp	r4, #0
 80083ca:	d1f7      	bne.n	80083bc <_fwalk_sglue+0xc>
 80083cc:	4630      	mov	r0, r6
 80083ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d2:	89ab      	ldrh	r3, [r5, #12]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d907      	bls.n	80083e8 <_fwalk_sglue+0x38>
 80083d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083dc:	3301      	adds	r3, #1
 80083de:	d003      	beq.n	80083e8 <_fwalk_sglue+0x38>
 80083e0:	4629      	mov	r1, r5
 80083e2:	4638      	mov	r0, r7
 80083e4:	47c0      	blx	r8
 80083e6:	4306      	orrs	r6, r0
 80083e8:	3568      	adds	r5, #104	@ 0x68
 80083ea:	e7e9      	b.n	80083c0 <_fwalk_sglue+0x10>

080083ec <siprintf>:
 80083ec:	b40e      	push	{r1, r2, r3}
 80083ee:	b510      	push	{r4, lr}
 80083f0:	b09d      	sub	sp, #116	@ 0x74
 80083f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80083f4:	9002      	str	r0, [sp, #8]
 80083f6:	9006      	str	r0, [sp, #24]
 80083f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083fc:	480a      	ldr	r0, [pc, #40]	@ (8008428 <siprintf+0x3c>)
 80083fe:	9107      	str	r1, [sp, #28]
 8008400:	9104      	str	r1, [sp, #16]
 8008402:	490a      	ldr	r1, [pc, #40]	@ (800842c <siprintf+0x40>)
 8008404:	f853 2b04 	ldr.w	r2, [r3], #4
 8008408:	9105      	str	r1, [sp, #20]
 800840a:	2400      	movs	r4, #0
 800840c:	a902      	add	r1, sp, #8
 800840e:	6800      	ldr	r0, [r0, #0]
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008414:	f002 fc06 	bl	800ac24 <_svfiprintf_r>
 8008418:	9b02      	ldr	r3, [sp, #8]
 800841a:	701c      	strb	r4, [r3, #0]
 800841c:	b01d      	add	sp, #116	@ 0x74
 800841e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008422:	b003      	add	sp, #12
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000044 	.word	0x20000044
 800842c:	ffff0208 	.word	0xffff0208

08008430 <siscanf>:
 8008430:	b40e      	push	{r1, r2, r3}
 8008432:	b570      	push	{r4, r5, r6, lr}
 8008434:	b09d      	sub	sp, #116	@ 0x74
 8008436:	ac21      	add	r4, sp, #132	@ 0x84
 8008438:	2500      	movs	r5, #0
 800843a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800843e:	f854 6b04 	ldr.w	r6, [r4], #4
 8008442:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008446:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008448:	9002      	str	r0, [sp, #8]
 800844a:	9006      	str	r0, [sp, #24]
 800844c:	f7f7 ff10 	bl	8000270 <strlen>
 8008450:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <siscanf+0x50>)
 8008452:	9003      	str	r0, [sp, #12]
 8008454:	9007      	str	r0, [sp, #28]
 8008456:	480b      	ldr	r0, [pc, #44]	@ (8008484 <siscanf+0x54>)
 8008458:	930b      	str	r3, [sp, #44]	@ 0x2c
 800845a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800845e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008462:	4632      	mov	r2, r6
 8008464:	4623      	mov	r3, r4
 8008466:	a902      	add	r1, sp, #8
 8008468:	6800      	ldr	r0, [r0, #0]
 800846a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800846c:	9514      	str	r5, [sp, #80]	@ 0x50
 800846e:	9401      	str	r4, [sp, #4]
 8008470:	f002 fd2e 	bl	800aed0 <__ssvfiscanf_r>
 8008474:	b01d      	add	sp, #116	@ 0x74
 8008476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800847a:	b003      	add	sp, #12
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	080084ab 	.word	0x080084ab
 8008484:	20000044 	.word	0x20000044

08008488 <__sread>:
 8008488:	b510      	push	{r4, lr}
 800848a:	460c      	mov	r4, r1
 800848c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008490:	f000 f87e 	bl	8008590 <_read_r>
 8008494:	2800      	cmp	r0, #0
 8008496:	bfab      	itete	ge
 8008498:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800849a:	89a3      	ldrhlt	r3, [r4, #12]
 800849c:	181b      	addge	r3, r3, r0
 800849e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084a2:	bfac      	ite	ge
 80084a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084a6:	81a3      	strhlt	r3, [r4, #12]
 80084a8:	bd10      	pop	{r4, pc}

080084aa <__seofread>:
 80084aa:	2000      	movs	r0, #0
 80084ac:	4770      	bx	lr

080084ae <__swrite>:
 80084ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b2:	461f      	mov	r7, r3
 80084b4:	898b      	ldrh	r3, [r1, #12]
 80084b6:	05db      	lsls	r3, r3, #23
 80084b8:	4605      	mov	r5, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	4616      	mov	r6, r2
 80084be:	d505      	bpl.n	80084cc <__swrite+0x1e>
 80084c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c4:	2302      	movs	r3, #2
 80084c6:	2200      	movs	r2, #0
 80084c8:	f000 f850 	bl	800856c <_lseek_r>
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084d6:	81a3      	strh	r3, [r4, #12]
 80084d8:	4632      	mov	r2, r6
 80084da:	463b      	mov	r3, r7
 80084dc:	4628      	mov	r0, r5
 80084de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084e2:	f000 b867 	b.w	80085b4 <_write_r>

080084e6 <__sseek>:
 80084e6:	b510      	push	{r4, lr}
 80084e8:	460c      	mov	r4, r1
 80084ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ee:	f000 f83d 	bl	800856c <_lseek_r>
 80084f2:	1c43      	adds	r3, r0, #1
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	bf15      	itete	ne
 80084f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80084fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008502:	81a3      	strheq	r3, [r4, #12]
 8008504:	bf18      	it	ne
 8008506:	81a3      	strhne	r3, [r4, #12]
 8008508:	bd10      	pop	{r4, pc}

0800850a <__sclose>:
 800850a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800850e:	f000 b81d 	b.w	800854c <_close_r>

08008512 <memcmp>:
 8008512:	b510      	push	{r4, lr}
 8008514:	3901      	subs	r1, #1
 8008516:	4402      	add	r2, r0
 8008518:	4290      	cmp	r0, r2
 800851a:	d101      	bne.n	8008520 <memcmp+0xe>
 800851c:	2000      	movs	r0, #0
 800851e:	e005      	b.n	800852c <memcmp+0x1a>
 8008520:	7803      	ldrb	r3, [r0, #0]
 8008522:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008526:	42a3      	cmp	r3, r4
 8008528:	d001      	beq.n	800852e <memcmp+0x1c>
 800852a:	1b18      	subs	r0, r3, r4
 800852c:	bd10      	pop	{r4, pc}
 800852e:	3001      	adds	r0, #1
 8008530:	e7f2      	b.n	8008518 <memcmp+0x6>

08008532 <memset>:
 8008532:	4402      	add	r2, r0
 8008534:	4603      	mov	r3, r0
 8008536:	4293      	cmp	r3, r2
 8008538:	d100      	bne.n	800853c <memset+0xa>
 800853a:	4770      	bx	lr
 800853c:	f803 1b01 	strb.w	r1, [r3], #1
 8008540:	e7f9      	b.n	8008536 <memset+0x4>
	...

08008544 <_localeconv_r>:
 8008544:	4800      	ldr	r0, [pc, #0]	@ (8008548 <_localeconv_r+0x4>)
 8008546:	4770      	bx	lr
 8008548:	20000184 	.word	0x20000184

0800854c <_close_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d06      	ldr	r5, [pc, #24]	@ (8008568 <_close_r+0x1c>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	f7f9 faf2 	bl	8001b40 <_close>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_close_r+0x1a>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_close_r+0x1a>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	200013fc 	.word	0x200013fc

0800856c <_lseek_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d07      	ldr	r5, [pc, #28]	@ (800858c <_lseek_r+0x20>)
 8008570:	4604      	mov	r4, r0
 8008572:	4608      	mov	r0, r1
 8008574:	4611      	mov	r1, r2
 8008576:	2200      	movs	r2, #0
 8008578:	602a      	str	r2, [r5, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	f7f9 fb07 	bl	8001b8e <_lseek>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_lseek_r+0x1e>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_lseek_r+0x1e>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	200013fc 	.word	0x200013fc

08008590 <_read_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4d07      	ldr	r5, [pc, #28]	@ (80085b0 <_read_r+0x20>)
 8008594:	4604      	mov	r4, r0
 8008596:	4608      	mov	r0, r1
 8008598:	4611      	mov	r1, r2
 800859a:	2200      	movs	r2, #0
 800859c:	602a      	str	r2, [r5, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	f7f9 fa95 	bl	8001ace <_read>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_read_r+0x1e>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_read_r+0x1e>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	200013fc 	.word	0x200013fc

080085b4 <_write_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d07      	ldr	r5, [pc, #28]	@ (80085d4 <_write_r+0x20>)
 80085b8:	4604      	mov	r4, r0
 80085ba:	4608      	mov	r0, r1
 80085bc:	4611      	mov	r1, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	602a      	str	r2, [r5, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	f7f9 faa0 	bl	8001b08 <_write>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_write_r+0x1e>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_write_r+0x1e>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	200013fc 	.word	0x200013fc

080085d8 <__errno>:
 80085d8:	4b01      	ldr	r3, [pc, #4]	@ (80085e0 <__errno+0x8>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000044 	.word	0x20000044

080085e4 <__libc_init_array>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	4d0d      	ldr	r5, [pc, #52]	@ (800861c <__libc_init_array+0x38>)
 80085e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008620 <__libc_init_array+0x3c>)
 80085ea:	1b64      	subs	r4, r4, r5
 80085ec:	10a4      	asrs	r4, r4, #2
 80085ee:	2600      	movs	r6, #0
 80085f0:	42a6      	cmp	r6, r4
 80085f2:	d109      	bne.n	8008608 <__libc_init_array+0x24>
 80085f4:	4d0b      	ldr	r5, [pc, #44]	@ (8008624 <__libc_init_array+0x40>)
 80085f6:	4c0c      	ldr	r4, [pc, #48]	@ (8008628 <__libc_init_array+0x44>)
 80085f8:	f003 ff7a 	bl	800c4f0 <_init>
 80085fc:	1b64      	subs	r4, r4, r5
 80085fe:	10a4      	asrs	r4, r4, #2
 8008600:	2600      	movs	r6, #0
 8008602:	42a6      	cmp	r6, r4
 8008604:	d105      	bne.n	8008612 <__libc_init_array+0x2e>
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	f855 3b04 	ldr.w	r3, [r5], #4
 800860c:	4798      	blx	r3
 800860e:	3601      	adds	r6, #1
 8008610:	e7ee      	b.n	80085f0 <__libc_init_array+0xc>
 8008612:	f855 3b04 	ldr.w	r3, [r5], #4
 8008616:	4798      	blx	r3
 8008618:	3601      	adds	r6, #1
 800861a:	e7f2      	b.n	8008602 <__libc_init_array+0x1e>
 800861c:	0800d044 	.word	0x0800d044
 8008620:	0800d044 	.word	0x0800d044
 8008624:	0800d044 	.word	0x0800d044
 8008628:	0800d048 	.word	0x0800d048

0800862c <__retarget_lock_init_recursive>:
 800862c:	4770      	bx	lr

0800862e <__retarget_lock_acquire_recursive>:
 800862e:	4770      	bx	lr

08008630 <__retarget_lock_release_recursive>:
 8008630:	4770      	bx	lr

08008632 <memcpy>:
 8008632:	440a      	add	r2, r1
 8008634:	4291      	cmp	r1, r2
 8008636:	f100 33ff 	add.w	r3, r0, #4294967295
 800863a:	d100      	bne.n	800863e <memcpy+0xc>
 800863c:	4770      	bx	lr
 800863e:	b510      	push	{r4, lr}
 8008640:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008644:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008648:	4291      	cmp	r1, r2
 800864a:	d1f9      	bne.n	8008640 <memcpy+0xe>
 800864c:	bd10      	pop	{r4, pc}
	...

08008650 <nanf>:
 8008650:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008658 <nanf+0x8>
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	7fc00000 	.word	0x7fc00000

0800865c <quorem>:
 800865c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	6903      	ldr	r3, [r0, #16]
 8008662:	690c      	ldr	r4, [r1, #16]
 8008664:	42a3      	cmp	r3, r4
 8008666:	4607      	mov	r7, r0
 8008668:	db7e      	blt.n	8008768 <quorem+0x10c>
 800866a:	3c01      	subs	r4, #1
 800866c:	f101 0814 	add.w	r8, r1, #20
 8008670:	00a3      	lsls	r3, r4, #2
 8008672:	f100 0514 	add.w	r5, r0, #20
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008686:	3301      	adds	r3, #1
 8008688:	429a      	cmp	r2, r3
 800868a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800868e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008692:	d32e      	bcc.n	80086f2 <quorem+0x96>
 8008694:	f04f 0a00 	mov.w	sl, #0
 8008698:	46c4      	mov	ip, r8
 800869a:	46ae      	mov	lr, r5
 800869c:	46d3      	mov	fp, sl
 800869e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086a2:	b298      	uxth	r0, r3
 80086a4:	fb06 a000 	mla	r0, r6, r0, sl
 80086a8:	0c02      	lsrs	r2, r0, #16
 80086aa:	0c1b      	lsrs	r3, r3, #16
 80086ac:	fb06 2303 	mla	r3, r6, r3, r2
 80086b0:	f8de 2000 	ldr.w	r2, [lr]
 80086b4:	b280      	uxth	r0, r0
 80086b6:	b292      	uxth	r2, r2
 80086b8:	1a12      	subs	r2, r2, r0
 80086ba:	445a      	add	r2, fp
 80086bc:	f8de 0000 	ldr.w	r0, [lr]
 80086c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80086ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80086ce:	b292      	uxth	r2, r2
 80086d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80086d4:	45e1      	cmp	r9, ip
 80086d6:	f84e 2b04 	str.w	r2, [lr], #4
 80086da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80086de:	d2de      	bcs.n	800869e <quorem+0x42>
 80086e0:	9b00      	ldr	r3, [sp, #0]
 80086e2:	58eb      	ldr	r3, [r5, r3]
 80086e4:	b92b      	cbnz	r3, 80086f2 <quorem+0x96>
 80086e6:	9b01      	ldr	r3, [sp, #4]
 80086e8:	3b04      	subs	r3, #4
 80086ea:	429d      	cmp	r5, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	d32f      	bcc.n	8008750 <quorem+0xf4>
 80086f0:	613c      	str	r4, [r7, #16]
 80086f2:	4638      	mov	r0, r7
 80086f4:	f001 f9c8 	bl	8009a88 <__mcmp>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	db25      	blt.n	8008748 <quorem+0xec>
 80086fc:	4629      	mov	r1, r5
 80086fe:	2000      	movs	r0, #0
 8008700:	f858 2b04 	ldr.w	r2, [r8], #4
 8008704:	f8d1 c000 	ldr.w	ip, [r1]
 8008708:	fa1f fe82 	uxth.w	lr, r2
 800870c:	fa1f f38c 	uxth.w	r3, ip
 8008710:	eba3 030e 	sub.w	r3, r3, lr
 8008714:	4403      	add	r3, r0
 8008716:	0c12      	lsrs	r2, r2, #16
 8008718:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800871c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008720:	b29b      	uxth	r3, r3
 8008722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008726:	45c1      	cmp	r9, r8
 8008728:	f841 3b04 	str.w	r3, [r1], #4
 800872c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008730:	d2e6      	bcs.n	8008700 <quorem+0xa4>
 8008732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800873a:	b922      	cbnz	r2, 8008746 <quorem+0xea>
 800873c:	3b04      	subs	r3, #4
 800873e:	429d      	cmp	r5, r3
 8008740:	461a      	mov	r2, r3
 8008742:	d30b      	bcc.n	800875c <quorem+0x100>
 8008744:	613c      	str	r4, [r7, #16]
 8008746:	3601      	adds	r6, #1
 8008748:	4630      	mov	r0, r6
 800874a:	b003      	add	sp, #12
 800874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	3b04      	subs	r3, #4
 8008754:	2a00      	cmp	r2, #0
 8008756:	d1cb      	bne.n	80086f0 <quorem+0x94>
 8008758:	3c01      	subs	r4, #1
 800875a:	e7c6      	b.n	80086ea <quorem+0x8e>
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	3b04      	subs	r3, #4
 8008760:	2a00      	cmp	r2, #0
 8008762:	d1ef      	bne.n	8008744 <quorem+0xe8>
 8008764:	3c01      	subs	r4, #1
 8008766:	e7ea      	b.n	800873e <quorem+0xe2>
 8008768:	2000      	movs	r0, #0
 800876a:	e7ee      	b.n	800874a <quorem+0xee>
 800876c:	0000      	movs	r0, r0
	...

08008770 <_dtoa_r>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	69c7      	ldr	r7, [r0, #28]
 8008776:	b097      	sub	sp, #92	@ 0x5c
 8008778:	ed8d 0b04 	vstr	d0, [sp, #16]
 800877c:	ec55 4b10 	vmov	r4, r5, d0
 8008780:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008782:	9107      	str	r1, [sp, #28]
 8008784:	4681      	mov	r9, r0
 8008786:	920c      	str	r2, [sp, #48]	@ 0x30
 8008788:	9311      	str	r3, [sp, #68]	@ 0x44
 800878a:	b97f      	cbnz	r7, 80087ac <_dtoa_r+0x3c>
 800878c:	2010      	movs	r0, #16
 800878e:	f000 fe09 	bl	80093a4 <malloc>
 8008792:	4602      	mov	r2, r0
 8008794:	f8c9 001c 	str.w	r0, [r9, #28]
 8008798:	b920      	cbnz	r0, 80087a4 <_dtoa_r+0x34>
 800879a:	4ba9      	ldr	r3, [pc, #676]	@ (8008a40 <_dtoa_r+0x2d0>)
 800879c:	21ef      	movs	r1, #239	@ 0xef
 800879e:	48a9      	ldr	r0, [pc, #676]	@ (8008a44 <_dtoa_r+0x2d4>)
 80087a0:	f002 ffbe 	bl	800b720 <__assert_func>
 80087a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80087a8:	6007      	str	r7, [r0, #0]
 80087aa:	60c7      	str	r7, [r0, #12]
 80087ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087b0:	6819      	ldr	r1, [r3, #0]
 80087b2:	b159      	cbz	r1, 80087cc <_dtoa_r+0x5c>
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	604a      	str	r2, [r1, #4]
 80087b8:	2301      	movs	r3, #1
 80087ba:	4093      	lsls	r3, r2
 80087bc:	608b      	str	r3, [r1, #8]
 80087be:	4648      	mov	r0, r9
 80087c0:	f000 fee6 	bl	8009590 <_Bfree>
 80087c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	1e2b      	subs	r3, r5, #0
 80087ce:	bfb9      	ittee	lt
 80087d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80087d4:	9305      	strlt	r3, [sp, #20]
 80087d6:	2300      	movge	r3, #0
 80087d8:	6033      	strge	r3, [r6, #0]
 80087da:	9f05      	ldr	r7, [sp, #20]
 80087dc:	4b9a      	ldr	r3, [pc, #616]	@ (8008a48 <_dtoa_r+0x2d8>)
 80087de:	bfbc      	itt	lt
 80087e0:	2201      	movlt	r2, #1
 80087e2:	6032      	strlt	r2, [r6, #0]
 80087e4:	43bb      	bics	r3, r7
 80087e6:	d112      	bne.n	800880e <_dtoa_r+0x9e>
 80087e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80087ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087f4:	4323      	orrs	r3, r4
 80087f6:	f000 855a 	beq.w	80092ae <_dtoa_r+0xb3e>
 80087fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008a5c <_dtoa_r+0x2ec>
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 855c 	beq.w	80092be <_dtoa_r+0xb4e>
 8008806:	f10a 0303 	add.w	r3, sl, #3
 800880a:	f000 bd56 	b.w	80092ba <_dtoa_r+0xb4a>
 800880e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008812:	2200      	movs	r2, #0
 8008814:	ec51 0b17 	vmov	r0, r1, d7
 8008818:	2300      	movs	r3, #0
 800881a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800881e:	f7f8 f953 	bl	8000ac8 <__aeabi_dcmpeq>
 8008822:	4680      	mov	r8, r0
 8008824:	b158      	cbz	r0, 800883e <_dtoa_r+0xce>
 8008826:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008828:	2301      	movs	r3, #1
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800882e:	b113      	cbz	r3, 8008836 <_dtoa_r+0xc6>
 8008830:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008832:	4b86      	ldr	r3, [pc, #536]	@ (8008a4c <_dtoa_r+0x2dc>)
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008a60 <_dtoa_r+0x2f0>
 800883a:	f000 bd40 	b.w	80092be <_dtoa_r+0xb4e>
 800883e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008842:	aa14      	add	r2, sp, #80	@ 0x50
 8008844:	a915      	add	r1, sp, #84	@ 0x54
 8008846:	4648      	mov	r0, r9
 8008848:	f001 fa3e 	bl	8009cc8 <__d2b>
 800884c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008850:	9002      	str	r0, [sp, #8]
 8008852:	2e00      	cmp	r6, #0
 8008854:	d078      	beq.n	8008948 <_dtoa_r+0x1d8>
 8008856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008858:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800885c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008864:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008868:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800886c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008870:	4619      	mov	r1, r3
 8008872:	2200      	movs	r2, #0
 8008874:	4b76      	ldr	r3, [pc, #472]	@ (8008a50 <_dtoa_r+0x2e0>)
 8008876:	f7f7 fd07 	bl	8000288 <__aeabi_dsub>
 800887a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008a28 <_dtoa_r+0x2b8>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f7 feba 	bl	80005f8 <__aeabi_dmul>
 8008884:	a36a      	add	r3, pc, #424	@ (adr r3, 8008a30 <_dtoa_r+0x2c0>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	f7f7 fcff 	bl	800028c <__adddf3>
 800888e:	4604      	mov	r4, r0
 8008890:	4630      	mov	r0, r6
 8008892:	460d      	mov	r5, r1
 8008894:	f7f7 fe46 	bl	8000524 <__aeabi_i2d>
 8008898:	a367      	add	r3, pc, #412	@ (adr r3, 8008a38 <_dtoa_r+0x2c8>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 feab 	bl	80005f8 <__aeabi_dmul>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 fcef 	bl	800028c <__adddf3>
 80088ae:	4604      	mov	r4, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	f7f8 f951 	bl	8000b58 <__aeabi_d2iz>
 80088b6:	2200      	movs	r2, #0
 80088b8:	4607      	mov	r7, r0
 80088ba:	2300      	movs	r3, #0
 80088bc:	4620      	mov	r0, r4
 80088be:	4629      	mov	r1, r5
 80088c0:	f7f8 f90c 	bl	8000adc <__aeabi_dcmplt>
 80088c4:	b140      	cbz	r0, 80088d8 <_dtoa_r+0x168>
 80088c6:	4638      	mov	r0, r7
 80088c8:	f7f7 fe2c 	bl	8000524 <__aeabi_i2d>
 80088cc:	4622      	mov	r2, r4
 80088ce:	462b      	mov	r3, r5
 80088d0:	f7f8 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d4:	b900      	cbnz	r0, 80088d8 <_dtoa_r+0x168>
 80088d6:	3f01      	subs	r7, #1
 80088d8:	2f16      	cmp	r7, #22
 80088da:	d852      	bhi.n	8008982 <_dtoa_r+0x212>
 80088dc:	4b5d      	ldr	r3, [pc, #372]	@ (8008a54 <_dtoa_r+0x2e4>)
 80088de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088ea:	f7f8 f8f7 	bl	8000adc <__aeabi_dcmplt>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d049      	beq.n	8008986 <_dtoa_r+0x216>
 80088f2:	3f01      	subs	r7, #1
 80088f4:	2300      	movs	r3, #0
 80088f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80088f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088fa:	1b9b      	subs	r3, r3, r6
 80088fc:	1e5a      	subs	r2, r3, #1
 80088fe:	bf45      	ittet	mi
 8008900:	f1c3 0301 	rsbmi	r3, r3, #1
 8008904:	9300      	strmi	r3, [sp, #0]
 8008906:	2300      	movpl	r3, #0
 8008908:	2300      	movmi	r3, #0
 800890a:	9206      	str	r2, [sp, #24]
 800890c:	bf54      	ite	pl
 800890e:	9300      	strpl	r3, [sp, #0]
 8008910:	9306      	strmi	r3, [sp, #24]
 8008912:	2f00      	cmp	r7, #0
 8008914:	db39      	blt.n	800898a <_dtoa_r+0x21a>
 8008916:	9b06      	ldr	r3, [sp, #24]
 8008918:	970d      	str	r7, [sp, #52]	@ 0x34
 800891a:	443b      	add	r3, r7
 800891c:	9306      	str	r3, [sp, #24]
 800891e:	2300      	movs	r3, #0
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	9b07      	ldr	r3, [sp, #28]
 8008924:	2b09      	cmp	r3, #9
 8008926:	d863      	bhi.n	80089f0 <_dtoa_r+0x280>
 8008928:	2b05      	cmp	r3, #5
 800892a:	bfc4      	itt	gt
 800892c:	3b04      	subgt	r3, #4
 800892e:	9307      	strgt	r3, [sp, #28]
 8008930:	9b07      	ldr	r3, [sp, #28]
 8008932:	f1a3 0302 	sub.w	r3, r3, #2
 8008936:	bfcc      	ite	gt
 8008938:	2400      	movgt	r4, #0
 800893a:	2401      	movle	r4, #1
 800893c:	2b03      	cmp	r3, #3
 800893e:	d863      	bhi.n	8008a08 <_dtoa_r+0x298>
 8008940:	e8df f003 	tbb	[pc, r3]
 8008944:	2b375452 	.word	0x2b375452
 8008948:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800894c:	441e      	add	r6, r3
 800894e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008952:	2b20      	cmp	r3, #32
 8008954:	bfc1      	itttt	gt
 8008956:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800895a:	409f      	lslgt	r7, r3
 800895c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008960:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008964:	bfd6      	itet	le
 8008966:	f1c3 0320 	rsble	r3, r3, #32
 800896a:	ea47 0003 	orrgt.w	r0, r7, r3
 800896e:	fa04 f003 	lslle.w	r0, r4, r3
 8008972:	f7f7 fdc7 	bl	8000504 <__aeabi_ui2d>
 8008976:	2201      	movs	r2, #1
 8008978:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800897c:	3e01      	subs	r6, #1
 800897e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008980:	e776      	b.n	8008870 <_dtoa_r+0x100>
 8008982:	2301      	movs	r3, #1
 8008984:	e7b7      	b.n	80088f6 <_dtoa_r+0x186>
 8008986:	9010      	str	r0, [sp, #64]	@ 0x40
 8008988:	e7b6      	b.n	80088f8 <_dtoa_r+0x188>
 800898a:	9b00      	ldr	r3, [sp, #0]
 800898c:	1bdb      	subs	r3, r3, r7
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	427b      	negs	r3, r7
 8008992:	9308      	str	r3, [sp, #32]
 8008994:	2300      	movs	r3, #0
 8008996:	930d      	str	r3, [sp, #52]	@ 0x34
 8008998:	e7c3      	b.n	8008922 <_dtoa_r+0x1b2>
 800899a:	2301      	movs	r3, #1
 800899c:	9309      	str	r3, [sp, #36]	@ 0x24
 800899e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089a0:	eb07 0b03 	add.w	fp, r7, r3
 80089a4:	f10b 0301 	add.w	r3, fp, #1
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	bfb8      	it	lt
 80089ae:	2301      	movlt	r3, #1
 80089b0:	e006      	b.n	80089c0 <_dtoa_r+0x250>
 80089b2:	2301      	movs	r3, #1
 80089b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dd28      	ble.n	8008a0e <_dtoa_r+0x29e>
 80089bc:	469b      	mov	fp, r3
 80089be:	9303      	str	r3, [sp, #12]
 80089c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80089c4:	2100      	movs	r1, #0
 80089c6:	2204      	movs	r2, #4
 80089c8:	f102 0514 	add.w	r5, r2, #20
 80089cc:	429d      	cmp	r5, r3
 80089ce:	d926      	bls.n	8008a1e <_dtoa_r+0x2ae>
 80089d0:	6041      	str	r1, [r0, #4]
 80089d2:	4648      	mov	r0, r9
 80089d4:	f000 fd9c 	bl	8009510 <_Balloc>
 80089d8:	4682      	mov	sl, r0
 80089da:	2800      	cmp	r0, #0
 80089dc:	d142      	bne.n	8008a64 <_dtoa_r+0x2f4>
 80089de:	4b1e      	ldr	r3, [pc, #120]	@ (8008a58 <_dtoa_r+0x2e8>)
 80089e0:	4602      	mov	r2, r0
 80089e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80089e6:	e6da      	b.n	800879e <_dtoa_r+0x2e>
 80089e8:	2300      	movs	r3, #0
 80089ea:	e7e3      	b.n	80089b4 <_dtoa_r+0x244>
 80089ec:	2300      	movs	r3, #0
 80089ee:	e7d5      	b.n	800899c <_dtoa_r+0x22c>
 80089f0:	2401      	movs	r4, #1
 80089f2:	2300      	movs	r3, #0
 80089f4:	9307      	str	r3, [sp, #28]
 80089f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80089f8:	f04f 3bff 	mov.w	fp, #4294967295
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8008a02:	2312      	movs	r3, #18
 8008a04:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a06:	e7db      	b.n	80089c0 <_dtoa_r+0x250>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a0c:	e7f4      	b.n	80089f8 <_dtoa_r+0x288>
 8008a0e:	f04f 0b01 	mov.w	fp, #1
 8008a12:	f8cd b00c 	str.w	fp, [sp, #12]
 8008a16:	465b      	mov	r3, fp
 8008a18:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008a1c:	e7d0      	b.n	80089c0 <_dtoa_r+0x250>
 8008a1e:	3101      	adds	r1, #1
 8008a20:	0052      	lsls	r2, r2, #1
 8008a22:	e7d1      	b.n	80089c8 <_dtoa_r+0x258>
 8008a24:	f3af 8000 	nop.w
 8008a28:	636f4361 	.word	0x636f4361
 8008a2c:	3fd287a7 	.word	0x3fd287a7
 8008a30:	8b60c8b3 	.word	0x8b60c8b3
 8008a34:	3fc68a28 	.word	0x3fc68a28
 8008a38:	509f79fb 	.word	0x509f79fb
 8008a3c:	3fd34413 	.word	0x3fd34413
 8008a40:	0800cc40 	.word	0x0800cc40
 8008a44:	0800cc57 	.word	0x0800cc57
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	0800cd43 	.word	0x0800cd43
 8008a50:	3ff80000 	.word	0x3ff80000
 8008a54:	0800ce20 	.word	0x0800ce20
 8008a58:	0800ccaf 	.word	0x0800ccaf
 8008a5c:	0800cc3c 	.word	0x0800cc3c
 8008a60:	0800cd42 	.word	0x0800cd42
 8008a64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a68:	6018      	str	r0, [r3, #0]
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	2b0e      	cmp	r3, #14
 8008a6e:	f200 80a1 	bhi.w	8008bb4 <_dtoa_r+0x444>
 8008a72:	2c00      	cmp	r4, #0
 8008a74:	f000 809e 	beq.w	8008bb4 <_dtoa_r+0x444>
 8008a78:	2f00      	cmp	r7, #0
 8008a7a:	dd33      	ble.n	8008ae4 <_dtoa_r+0x374>
 8008a7c:	4b9c      	ldr	r3, [pc, #624]	@ (8008cf0 <_dtoa_r+0x580>)
 8008a7e:	f007 020f 	and.w	r2, r7, #15
 8008a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a86:	ed93 7b00 	vldr	d7, [r3]
 8008a8a:	05f8      	lsls	r0, r7, #23
 8008a8c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008a90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008a94:	d516      	bpl.n	8008ac4 <_dtoa_r+0x354>
 8008a96:	4b97      	ldr	r3, [pc, #604]	@ (8008cf4 <_dtoa_r+0x584>)
 8008a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008aa0:	f7f7 fed4 	bl	800084c <__aeabi_ddiv>
 8008aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aa8:	f004 040f 	and.w	r4, r4, #15
 8008aac:	2603      	movs	r6, #3
 8008aae:	4d91      	ldr	r5, [pc, #580]	@ (8008cf4 <_dtoa_r+0x584>)
 8008ab0:	b954      	cbnz	r4, 8008ac8 <_dtoa_r+0x358>
 8008ab2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aba:	f7f7 fec7 	bl	800084c <__aeabi_ddiv>
 8008abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ac2:	e028      	b.n	8008b16 <_dtoa_r+0x3a6>
 8008ac4:	2602      	movs	r6, #2
 8008ac6:	e7f2      	b.n	8008aae <_dtoa_r+0x33e>
 8008ac8:	07e1      	lsls	r1, r4, #31
 8008aca:	d508      	bpl.n	8008ade <_dtoa_r+0x36e>
 8008acc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008adc:	3601      	adds	r6, #1
 8008ade:	1064      	asrs	r4, r4, #1
 8008ae0:	3508      	adds	r5, #8
 8008ae2:	e7e5      	b.n	8008ab0 <_dtoa_r+0x340>
 8008ae4:	f000 80af 	beq.w	8008c46 <_dtoa_r+0x4d6>
 8008ae8:	427c      	negs	r4, r7
 8008aea:	4b81      	ldr	r3, [pc, #516]	@ (8008cf0 <_dtoa_r+0x580>)
 8008aec:	4d81      	ldr	r5, [pc, #516]	@ (8008cf4 <_dtoa_r+0x584>)
 8008aee:	f004 020f 	and.w	r2, r4, #15
 8008af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008afe:	f7f7 fd7b 	bl	80005f8 <__aeabi_dmul>
 8008b02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b06:	1124      	asrs	r4, r4, #4
 8008b08:	2300      	movs	r3, #0
 8008b0a:	2602      	movs	r6, #2
 8008b0c:	2c00      	cmp	r4, #0
 8008b0e:	f040 808f 	bne.w	8008c30 <_dtoa_r+0x4c0>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1d3      	bne.n	8008abe <_dtoa_r+0x34e>
 8008b16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 8094 	beq.w	8008c4a <_dtoa_r+0x4da>
 8008b22:	4b75      	ldr	r3, [pc, #468]	@ (8008cf8 <_dtoa_r+0x588>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 ffd7 	bl	8000adc <__aeabi_dcmplt>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f000 808b 	beq.w	8008c4a <_dtoa_r+0x4da>
 8008b34:	9b03      	ldr	r3, [sp, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 8087 	beq.w	8008c4a <_dtoa_r+0x4da>
 8008b3c:	f1bb 0f00 	cmp.w	fp, #0
 8008b40:	dd34      	ble.n	8008bac <_dtoa_r+0x43c>
 8008b42:	4620      	mov	r0, r4
 8008b44:	4b6d      	ldr	r3, [pc, #436]	@ (8008cfc <_dtoa_r+0x58c>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b52:	f107 38ff 	add.w	r8, r7, #4294967295
 8008b56:	3601      	adds	r6, #1
 8008b58:	465c      	mov	r4, fp
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7f7 fce2 	bl	8000524 <__aeabi_i2d>
 8008b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b64:	f7f7 fd48 	bl	80005f8 <__aeabi_dmul>
 8008b68:	4b65      	ldr	r3, [pc, #404]	@ (8008d00 <_dtoa_r+0x590>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f7f7 fb8e 	bl	800028c <__adddf3>
 8008b70:	4605      	mov	r5, r0
 8008b72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008b76:	2c00      	cmp	r4, #0
 8008b78:	d16a      	bne.n	8008c50 <_dtoa_r+0x4e0>
 8008b7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b7e:	4b61      	ldr	r3, [pc, #388]	@ (8008d04 <_dtoa_r+0x594>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	f7f7 fb81 	bl	8000288 <__aeabi_dsub>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4633      	mov	r3, r6
 8008b92:	f7f7 ffc1 	bl	8000b18 <__aeabi_dcmpgt>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	f040 8298 	bne.w	80090cc <_dtoa_r+0x95c>
 8008b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ba6:	f7f7 ff99 	bl	8000adc <__aeabi_dcmplt>
 8008baa:	bb38      	cbnz	r0, 8008bfc <_dtoa_r+0x48c>
 8008bac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008bb0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008bb4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f2c0 8157 	blt.w	8008e6a <_dtoa_r+0x6fa>
 8008bbc:	2f0e      	cmp	r7, #14
 8008bbe:	f300 8154 	bgt.w	8008e6a <_dtoa_r+0x6fa>
 8008bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8008cf0 <_dtoa_r+0x580>)
 8008bc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bc8:	ed93 7b00 	vldr	d7, [r3]
 8008bcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	ed8d 7b00 	vstr	d7, [sp]
 8008bd4:	f280 80e5 	bge.w	8008da2 <_dtoa_r+0x632>
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f300 80e1 	bgt.w	8008da2 <_dtoa_r+0x632>
 8008be0:	d10c      	bne.n	8008bfc <_dtoa_r+0x48c>
 8008be2:	4b48      	ldr	r3, [pc, #288]	@ (8008d04 <_dtoa_r+0x594>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	ec51 0b17 	vmov	r0, r1, d7
 8008bea:	f7f7 fd05 	bl	80005f8 <__aeabi_dmul>
 8008bee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bf2:	f7f7 ff87 	bl	8000b04 <__aeabi_dcmpge>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f000 8266 	beq.w	80090c8 <_dtoa_r+0x958>
 8008bfc:	2400      	movs	r4, #0
 8008bfe:	4625      	mov	r5, r4
 8008c00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c02:	4656      	mov	r6, sl
 8008c04:	ea6f 0803 	mvn.w	r8, r3
 8008c08:	2700      	movs	r7, #0
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4648      	mov	r0, r9
 8008c0e:	f000 fcbf 	bl	8009590 <_Bfree>
 8008c12:	2d00      	cmp	r5, #0
 8008c14:	f000 80bd 	beq.w	8008d92 <_dtoa_r+0x622>
 8008c18:	b12f      	cbz	r7, 8008c26 <_dtoa_r+0x4b6>
 8008c1a:	42af      	cmp	r7, r5
 8008c1c:	d003      	beq.n	8008c26 <_dtoa_r+0x4b6>
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4648      	mov	r0, r9
 8008c22:	f000 fcb5 	bl	8009590 <_Bfree>
 8008c26:	4629      	mov	r1, r5
 8008c28:	4648      	mov	r0, r9
 8008c2a:	f000 fcb1 	bl	8009590 <_Bfree>
 8008c2e:	e0b0      	b.n	8008d92 <_dtoa_r+0x622>
 8008c30:	07e2      	lsls	r2, r4, #31
 8008c32:	d505      	bpl.n	8008c40 <_dtoa_r+0x4d0>
 8008c34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	2301      	movs	r3, #1
 8008c40:	1064      	asrs	r4, r4, #1
 8008c42:	3508      	adds	r5, #8
 8008c44:	e762      	b.n	8008b0c <_dtoa_r+0x39c>
 8008c46:	2602      	movs	r6, #2
 8008c48:	e765      	b.n	8008b16 <_dtoa_r+0x3a6>
 8008c4a:	9c03      	ldr	r4, [sp, #12]
 8008c4c:	46b8      	mov	r8, r7
 8008c4e:	e784      	b.n	8008b5a <_dtoa_r+0x3ea>
 8008c50:	4b27      	ldr	r3, [pc, #156]	@ (8008cf0 <_dtoa_r+0x580>)
 8008c52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c5c:	4454      	add	r4, sl
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d054      	beq.n	8008d0c <_dtoa_r+0x59c>
 8008c62:	4929      	ldr	r1, [pc, #164]	@ (8008d08 <_dtoa_r+0x598>)
 8008c64:	2000      	movs	r0, #0
 8008c66:	f7f7 fdf1 	bl	800084c <__aeabi_ddiv>
 8008c6a:	4633      	mov	r3, r6
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	f7f7 fb0b 	bl	8000288 <__aeabi_dsub>
 8008c72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c76:	4656      	mov	r6, sl
 8008c78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c7c:	f7f7 ff6c 	bl	8000b58 <__aeabi_d2iz>
 8008c80:	4605      	mov	r5, r0
 8008c82:	f7f7 fc4f 	bl	8000524 <__aeabi_i2d>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c8e:	f7f7 fafb 	bl	8000288 <__aeabi_dsub>
 8008c92:	3530      	adds	r5, #48	@ 0x30
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c9c:	f806 5b01 	strb.w	r5, [r6], #1
 8008ca0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ca4:	f7f7 ff1a 	bl	8000adc <__aeabi_dcmplt>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d172      	bne.n	8008d92 <_dtoa_r+0x622>
 8008cac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cb0:	4911      	ldr	r1, [pc, #68]	@ (8008cf8 <_dtoa_r+0x588>)
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	f7f7 fae8 	bl	8000288 <__aeabi_dsub>
 8008cb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008cbc:	f7f7 ff0e 	bl	8000adc <__aeabi_dcmplt>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f040 80b4 	bne.w	8008e2e <_dtoa_r+0x6be>
 8008cc6:	42a6      	cmp	r6, r4
 8008cc8:	f43f af70 	beq.w	8008bac <_dtoa_r+0x43c>
 8008ccc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008cfc <_dtoa_r+0x58c>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 fc90 	bl	80005f8 <__aeabi_dmul>
 8008cd8:	4b08      	ldr	r3, [pc, #32]	@ (8008cfc <_dtoa_r+0x58c>)
 8008cda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008cde:	2200      	movs	r2, #0
 8008ce0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ce4:	f7f7 fc88 	bl	80005f8 <__aeabi_dmul>
 8008ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cec:	e7c4      	b.n	8008c78 <_dtoa_r+0x508>
 8008cee:	bf00      	nop
 8008cf0:	0800ce20 	.word	0x0800ce20
 8008cf4:	0800cdf8 	.word	0x0800cdf8
 8008cf8:	3ff00000 	.word	0x3ff00000
 8008cfc:	40240000 	.word	0x40240000
 8008d00:	401c0000 	.word	0x401c0000
 8008d04:	40140000 	.word	0x40140000
 8008d08:	3fe00000 	.word	0x3fe00000
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f7f7 fc72 	bl	80005f8 <__aeabi_dmul>
 8008d14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d18:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008d1a:	4656      	mov	r6, sl
 8008d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d20:	f7f7 ff1a 	bl	8000b58 <__aeabi_d2iz>
 8008d24:	4605      	mov	r5, r0
 8008d26:	f7f7 fbfd 	bl	8000524 <__aeabi_i2d>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d32:	f7f7 faa9 	bl	8000288 <__aeabi_dsub>
 8008d36:	3530      	adds	r5, #48	@ 0x30
 8008d38:	f806 5b01 	strb.w	r5, [r6], #1
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	42a6      	cmp	r6, r4
 8008d42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	d124      	bne.n	8008d96 <_dtoa_r+0x626>
 8008d4c:	4baf      	ldr	r3, [pc, #700]	@ (800900c <_dtoa_r+0x89c>)
 8008d4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d52:	f7f7 fa9b 	bl	800028c <__adddf3>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d5e:	f7f7 fedb 	bl	8000b18 <__aeabi_dcmpgt>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d163      	bne.n	8008e2e <_dtoa_r+0x6be>
 8008d66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d6a:	49a8      	ldr	r1, [pc, #672]	@ (800900c <_dtoa_r+0x89c>)
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d7a:	f7f7 feaf 	bl	8000adc <__aeabi_dcmplt>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f43f af14 	beq.w	8008bac <_dtoa_r+0x43c>
 8008d84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008d86:	1e73      	subs	r3, r6, #1
 8008d88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d8e:	2b30      	cmp	r3, #48	@ 0x30
 8008d90:	d0f8      	beq.n	8008d84 <_dtoa_r+0x614>
 8008d92:	4647      	mov	r7, r8
 8008d94:	e03b      	b.n	8008e0e <_dtoa_r+0x69e>
 8008d96:	4b9e      	ldr	r3, [pc, #632]	@ (8009010 <_dtoa_r+0x8a0>)
 8008d98:	f7f7 fc2e 	bl	80005f8 <__aeabi_dmul>
 8008d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008da0:	e7bc      	b.n	8008d1c <_dtoa_r+0x5ac>
 8008da2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008da6:	4656      	mov	r6, sl
 8008da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fd4c 	bl	800084c <__aeabi_ddiv>
 8008db4:	f7f7 fed0 	bl	8000b58 <__aeabi_d2iz>
 8008db8:	4680      	mov	r8, r0
 8008dba:	f7f7 fbb3 	bl	8000524 <__aeabi_i2d>
 8008dbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dc2:	f7f7 fc19 	bl	80005f8 <__aeabi_dmul>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4620      	mov	r0, r4
 8008dcc:	4629      	mov	r1, r5
 8008dce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008dd2:	f7f7 fa59 	bl	8000288 <__aeabi_dsub>
 8008dd6:	f806 4b01 	strb.w	r4, [r6], #1
 8008dda:	9d03      	ldr	r5, [sp, #12]
 8008ddc:	eba6 040a 	sub.w	r4, r6, sl
 8008de0:	42a5      	cmp	r5, r4
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	d133      	bne.n	8008e50 <_dtoa_r+0x6e0>
 8008de8:	f7f7 fa50 	bl	800028c <__adddf3>
 8008dec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008df0:	4604      	mov	r4, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	f7f7 fe90 	bl	8000b18 <__aeabi_dcmpgt>
 8008df8:	b9c0      	cbnz	r0, 8008e2c <_dtoa_r+0x6bc>
 8008dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dfe:	4620      	mov	r0, r4
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7f7 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e06:	b110      	cbz	r0, 8008e0e <_dtoa_r+0x69e>
 8008e08:	f018 0f01 	tst.w	r8, #1
 8008e0c:	d10e      	bne.n	8008e2c <_dtoa_r+0x6bc>
 8008e0e:	9902      	ldr	r1, [sp, #8]
 8008e10:	4648      	mov	r0, r9
 8008e12:	f000 fbbd 	bl	8009590 <_Bfree>
 8008e16:	2300      	movs	r3, #0
 8008e18:	7033      	strb	r3, [r6, #0]
 8008e1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e1c:	3701      	adds	r7, #1
 8008e1e:	601f      	str	r7, [r3, #0]
 8008e20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 824b 	beq.w	80092be <_dtoa_r+0xb4e>
 8008e28:	601e      	str	r6, [r3, #0]
 8008e2a:	e248      	b.n	80092be <_dtoa_r+0xb4e>
 8008e2c:	46b8      	mov	r8, r7
 8008e2e:	4633      	mov	r3, r6
 8008e30:	461e      	mov	r6, r3
 8008e32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e36:	2a39      	cmp	r2, #57	@ 0x39
 8008e38:	d106      	bne.n	8008e48 <_dtoa_r+0x6d8>
 8008e3a:	459a      	cmp	sl, r3
 8008e3c:	d1f8      	bne.n	8008e30 <_dtoa_r+0x6c0>
 8008e3e:	2230      	movs	r2, #48	@ 0x30
 8008e40:	f108 0801 	add.w	r8, r8, #1
 8008e44:	f88a 2000 	strb.w	r2, [sl]
 8008e48:	781a      	ldrb	r2, [r3, #0]
 8008e4a:	3201      	adds	r2, #1
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	e7a0      	b.n	8008d92 <_dtoa_r+0x622>
 8008e50:	4b6f      	ldr	r3, [pc, #444]	@ (8009010 <_dtoa_r+0x8a0>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	f7f7 fbd0 	bl	80005f8 <__aeabi_dmul>
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	460d      	mov	r5, r1
 8008e60:	f7f7 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d09f      	beq.n	8008da8 <_dtoa_r+0x638>
 8008e68:	e7d1      	b.n	8008e0e <_dtoa_r+0x69e>
 8008e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	f000 80ea 	beq.w	8009046 <_dtoa_r+0x8d6>
 8008e72:	9a07      	ldr	r2, [sp, #28]
 8008e74:	2a01      	cmp	r2, #1
 8008e76:	f300 80cd 	bgt.w	8009014 <_dtoa_r+0x8a4>
 8008e7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e7c:	2a00      	cmp	r2, #0
 8008e7e:	f000 80c1 	beq.w	8009004 <_dtoa_r+0x894>
 8008e82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008e86:	9c08      	ldr	r4, [sp, #32]
 8008e88:	9e00      	ldr	r6, [sp, #0]
 8008e8a:	9a00      	ldr	r2, [sp, #0]
 8008e8c:	441a      	add	r2, r3
 8008e8e:	9200      	str	r2, [sp, #0]
 8008e90:	9a06      	ldr	r2, [sp, #24]
 8008e92:	2101      	movs	r1, #1
 8008e94:	441a      	add	r2, r3
 8008e96:	4648      	mov	r0, r9
 8008e98:	9206      	str	r2, [sp, #24]
 8008e9a:	f000 fc77 	bl	800978c <__i2b>
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	b166      	cbz	r6, 8008ebc <_dtoa_r+0x74c>
 8008ea2:	9b06      	ldr	r3, [sp, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	dd09      	ble.n	8008ebc <_dtoa_r+0x74c>
 8008ea8:	42b3      	cmp	r3, r6
 8008eaa:	9a00      	ldr	r2, [sp, #0]
 8008eac:	bfa8      	it	ge
 8008eae:	4633      	movge	r3, r6
 8008eb0:	1ad2      	subs	r2, r2, r3
 8008eb2:	9200      	str	r2, [sp, #0]
 8008eb4:	9a06      	ldr	r2, [sp, #24]
 8008eb6:	1af6      	subs	r6, r6, r3
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	9306      	str	r3, [sp, #24]
 8008ebc:	9b08      	ldr	r3, [sp, #32]
 8008ebe:	b30b      	cbz	r3, 8008f04 <_dtoa_r+0x794>
 8008ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 80c6 	beq.w	8009054 <_dtoa_r+0x8e4>
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	f000 80c0 	beq.w	800904e <_dtoa_r+0x8de>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	4648      	mov	r0, r9
 8008ed4:	f000 fd12 	bl	80098fc <__pow5mult>
 8008ed8:	9a02      	ldr	r2, [sp, #8]
 8008eda:	4601      	mov	r1, r0
 8008edc:	4605      	mov	r5, r0
 8008ede:	4648      	mov	r0, r9
 8008ee0:	f000 fc6a 	bl	80097b8 <__multiply>
 8008ee4:	9902      	ldr	r1, [sp, #8]
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	4648      	mov	r0, r9
 8008eea:	f000 fb51 	bl	8009590 <_Bfree>
 8008eee:	9b08      	ldr	r3, [sp, #32]
 8008ef0:	1b1b      	subs	r3, r3, r4
 8008ef2:	9308      	str	r3, [sp, #32]
 8008ef4:	f000 80b1 	beq.w	800905a <_dtoa_r+0x8ea>
 8008ef8:	9a08      	ldr	r2, [sp, #32]
 8008efa:	4641      	mov	r1, r8
 8008efc:	4648      	mov	r0, r9
 8008efe:	f000 fcfd 	bl	80098fc <__pow5mult>
 8008f02:	9002      	str	r0, [sp, #8]
 8008f04:	2101      	movs	r1, #1
 8008f06:	4648      	mov	r0, r9
 8008f08:	f000 fc40 	bl	800978c <__i2b>
 8008f0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f0e:	4604      	mov	r4, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 81d8 	beq.w	80092c6 <_dtoa_r+0xb56>
 8008f16:	461a      	mov	r2, r3
 8008f18:	4601      	mov	r1, r0
 8008f1a:	4648      	mov	r0, r9
 8008f1c:	f000 fcee 	bl	80098fc <__pow5mult>
 8008f20:	9b07      	ldr	r3, [sp, #28]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	4604      	mov	r4, r0
 8008f26:	f300 809f 	bgt.w	8009068 <_dtoa_r+0x8f8>
 8008f2a:	9b04      	ldr	r3, [sp, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8097 	bne.w	8009060 <_dtoa_r+0x8f0>
 8008f32:	9b05      	ldr	r3, [sp, #20]
 8008f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f040 8093 	bne.w	8009064 <_dtoa_r+0x8f4>
 8008f3e:	9b05      	ldr	r3, [sp, #20]
 8008f40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f44:	0d1b      	lsrs	r3, r3, #20
 8008f46:	051b      	lsls	r3, r3, #20
 8008f48:	b133      	cbz	r3, 8008f58 <_dtoa_r+0x7e8>
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	9b06      	ldr	r3, [sp, #24]
 8008f52:	3301      	adds	r3, #1
 8008f54:	9306      	str	r3, [sp, #24]
 8008f56:	2301      	movs	r3, #1
 8008f58:	9308      	str	r3, [sp, #32]
 8008f5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 81b8 	beq.w	80092d2 <_dtoa_r+0xb62>
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f68:	6918      	ldr	r0, [r3, #16]
 8008f6a:	f000 fbc3 	bl	80096f4 <__hi0bits>
 8008f6e:	f1c0 0020 	rsb	r0, r0, #32
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	4418      	add	r0, r3
 8008f76:	f010 001f 	ands.w	r0, r0, #31
 8008f7a:	f000 8082 	beq.w	8009082 <_dtoa_r+0x912>
 8008f7e:	f1c0 0320 	rsb	r3, r0, #32
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	dd73      	ble.n	800906e <_dtoa_r+0x8fe>
 8008f86:	9b00      	ldr	r3, [sp, #0]
 8008f88:	f1c0 001c 	rsb	r0, r0, #28
 8008f8c:	4403      	add	r3, r0
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	4403      	add	r3, r0
 8008f94:	4406      	add	r6, r0
 8008f96:	9306      	str	r3, [sp, #24]
 8008f98:	9b00      	ldr	r3, [sp, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd05      	ble.n	8008faa <_dtoa_r+0x83a>
 8008f9e:	9902      	ldr	r1, [sp, #8]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	4648      	mov	r0, r9
 8008fa4:	f000 fd04 	bl	80099b0 <__lshift>
 8008fa8:	9002      	str	r0, [sp, #8]
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dd05      	ble.n	8008fbc <_dtoa_r+0x84c>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f000 fcfb 	bl	80099b0 <__lshift>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d061      	beq.n	8009086 <_dtoa_r+0x916>
 8008fc2:	9802      	ldr	r0, [sp, #8]
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	f000 fd5f 	bl	8009a88 <__mcmp>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	da5b      	bge.n	8009086 <_dtoa_r+0x916>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9902      	ldr	r1, [sp, #8]
 8008fd2:	220a      	movs	r2, #10
 8008fd4:	4648      	mov	r0, r9
 8008fd6:	f000 fafd 	bl	80095d4 <__multadd>
 8008fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fdc:	9002      	str	r0, [sp, #8]
 8008fde:	f107 38ff 	add.w	r8, r7, #4294967295
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8177 	beq.w	80092d6 <_dtoa_r+0xb66>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	2300      	movs	r3, #0
 8008fec:	220a      	movs	r2, #10
 8008fee:	4648      	mov	r0, r9
 8008ff0:	f000 faf0 	bl	80095d4 <__multadd>
 8008ff4:	f1bb 0f00 	cmp.w	fp, #0
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	dc6f      	bgt.n	80090dc <_dtoa_r+0x96c>
 8008ffc:	9b07      	ldr	r3, [sp, #28]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	dc49      	bgt.n	8009096 <_dtoa_r+0x926>
 8009002:	e06b      	b.n	80090dc <_dtoa_r+0x96c>
 8009004:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009006:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800900a:	e73c      	b.n	8008e86 <_dtoa_r+0x716>
 800900c:	3fe00000 	.word	0x3fe00000
 8009010:	40240000 	.word	0x40240000
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	1e5c      	subs	r4, r3, #1
 8009018:	9b08      	ldr	r3, [sp, #32]
 800901a:	42a3      	cmp	r3, r4
 800901c:	db09      	blt.n	8009032 <_dtoa_r+0x8c2>
 800901e:	1b1c      	subs	r4, r3, r4
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f6bf af30 	bge.w	8008e88 <_dtoa_r+0x718>
 8009028:	9b00      	ldr	r3, [sp, #0]
 800902a:	9a03      	ldr	r2, [sp, #12]
 800902c:	1a9e      	subs	r6, r3, r2
 800902e:	2300      	movs	r3, #0
 8009030:	e72b      	b.n	8008e8a <_dtoa_r+0x71a>
 8009032:	9b08      	ldr	r3, [sp, #32]
 8009034:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009036:	9408      	str	r4, [sp, #32]
 8009038:	1ae3      	subs	r3, r4, r3
 800903a:	441a      	add	r2, r3
 800903c:	9e00      	ldr	r6, [sp, #0]
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	920d      	str	r2, [sp, #52]	@ 0x34
 8009042:	2400      	movs	r4, #0
 8009044:	e721      	b.n	8008e8a <_dtoa_r+0x71a>
 8009046:	9c08      	ldr	r4, [sp, #32]
 8009048:	9e00      	ldr	r6, [sp, #0]
 800904a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800904c:	e728      	b.n	8008ea0 <_dtoa_r+0x730>
 800904e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009052:	e751      	b.n	8008ef8 <_dtoa_r+0x788>
 8009054:	9a08      	ldr	r2, [sp, #32]
 8009056:	9902      	ldr	r1, [sp, #8]
 8009058:	e750      	b.n	8008efc <_dtoa_r+0x78c>
 800905a:	f8cd 8008 	str.w	r8, [sp, #8]
 800905e:	e751      	b.n	8008f04 <_dtoa_r+0x794>
 8009060:	2300      	movs	r3, #0
 8009062:	e779      	b.n	8008f58 <_dtoa_r+0x7e8>
 8009064:	9b04      	ldr	r3, [sp, #16]
 8009066:	e777      	b.n	8008f58 <_dtoa_r+0x7e8>
 8009068:	2300      	movs	r3, #0
 800906a:	9308      	str	r3, [sp, #32]
 800906c:	e779      	b.n	8008f62 <_dtoa_r+0x7f2>
 800906e:	d093      	beq.n	8008f98 <_dtoa_r+0x828>
 8009070:	9a00      	ldr	r2, [sp, #0]
 8009072:	331c      	adds	r3, #28
 8009074:	441a      	add	r2, r3
 8009076:	9200      	str	r2, [sp, #0]
 8009078:	9a06      	ldr	r2, [sp, #24]
 800907a:	441a      	add	r2, r3
 800907c:	441e      	add	r6, r3
 800907e:	9206      	str	r2, [sp, #24]
 8009080:	e78a      	b.n	8008f98 <_dtoa_r+0x828>
 8009082:	4603      	mov	r3, r0
 8009084:	e7f4      	b.n	8009070 <_dtoa_r+0x900>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	46b8      	mov	r8, r7
 800908c:	dc20      	bgt.n	80090d0 <_dtoa_r+0x960>
 800908e:	469b      	mov	fp, r3
 8009090:	9b07      	ldr	r3, [sp, #28]
 8009092:	2b02      	cmp	r3, #2
 8009094:	dd1e      	ble.n	80090d4 <_dtoa_r+0x964>
 8009096:	f1bb 0f00 	cmp.w	fp, #0
 800909a:	f47f adb1 	bne.w	8008c00 <_dtoa_r+0x490>
 800909e:	4621      	mov	r1, r4
 80090a0:	465b      	mov	r3, fp
 80090a2:	2205      	movs	r2, #5
 80090a4:	4648      	mov	r0, r9
 80090a6:	f000 fa95 	bl	80095d4 <__multadd>
 80090aa:	4601      	mov	r1, r0
 80090ac:	4604      	mov	r4, r0
 80090ae:	9802      	ldr	r0, [sp, #8]
 80090b0:	f000 fcea 	bl	8009a88 <__mcmp>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f77f ada3 	ble.w	8008c00 <_dtoa_r+0x490>
 80090ba:	4656      	mov	r6, sl
 80090bc:	2331      	movs	r3, #49	@ 0x31
 80090be:	f806 3b01 	strb.w	r3, [r6], #1
 80090c2:	f108 0801 	add.w	r8, r8, #1
 80090c6:	e59f      	b.n	8008c08 <_dtoa_r+0x498>
 80090c8:	9c03      	ldr	r4, [sp, #12]
 80090ca:	46b8      	mov	r8, r7
 80090cc:	4625      	mov	r5, r4
 80090ce:	e7f4      	b.n	80090ba <_dtoa_r+0x94a>
 80090d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80090d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 8101 	beq.w	80092de <_dtoa_r+0xb6e>
 80090dc:	2e00      	cmp	r6, #0
 80090de:	dd05      	ble.n	80090ec <_dtoa_r+0x97c>
 80090e0:	4629      	mov	r1, r5
 80090e2:	4632      	mov	r2, r6
 80090e4:	4648      	mov	r0, r9
 80090e6:	f000 fc63 	bl	80099b0 <__lshift>
 80090ea:	4605      	mov	r5, r0
 80090ec:	9b08      	ldr	r3, [sp, #32]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d05c      	beq.n	80091ac <_dtoa_r+0xa3c>
 80090f2:	6869      	ldr	r1, [r5, #4]
 80090f4:	4648      	mov	r0, r9
 80090f6:	f000 fa0b 	bl	8009510 <_Balloc>
 80090fa:	4606      	mov	r6, r0
 80090fc:	b928      	cbnz	r0, 800910a <_dtoa_r+0x99a>
 80090fe:	4b82      	ldr	r3, [pc, #520]	@ (8009308 <_dtoa_r+0xb98>)
 8009100:	4602      	mov	r2, r0
 8009102:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009106:	f7ff bb4a 	b.w	800879e <_dtoa_r+0x2e>
 800910a:	692a      	ldr	r2, [r5, #16]
 800910c:	3202      	adds	r2, #2
 800910e:	0092      	lsls	r2, r2, #2
 8009110:	f105 010c 	add.w	r1, r5, #12
 8009114:	300c      	adds	r0, #12
 8009116:	f7ff fa8c 	bl	8008632 <memcpy>
 800911a:	2201      	movs	r2, #1
 800911c:	4631      	mov	r1, r6
 800911e:	4648      	mov	r0, r9
 8009120:	f000 fc46 	bl	80099b0 <__lshift>
 8009124:	f10a 0301 	add.w	r3, sl, #1
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	eb0a 030b 	add.w	r3, sl, fp
 800912e:	9308      	str	r3, [sp, #32]
 8009130:	9b04      	ldr	r3, [sp, #16]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	462f      	mov	r7, r5
 8009138:	9306      	str	r3, [sp, #24]
 800913a:	4605      	mov	r5, r0
 800913c:	9b00      	ldr	r3, [sp, #0]
 800913e:	9802      	ldr	r0, [sp, #8]
 8009140:	4621      	mov	r1, r4
 8009142:	f103 3bff 	add.w	fp, r3, #4294967295
 8009146:	f7ff fa89 	bl	800865c <quorem>
 800914a:	4603      	mov	r3, r0
 800914c:	3330      	adds	r3, #48	@ 0x30
 800914e:	9003      	str	r0, [sp, #12]
 8009150:	4639      	mov	r1, r7
 8009152:	9802      	ldr	r0, [sp, #8]
 8009154:	9309      	str	r3, [sp, #36]	@ 0x24
 8009156:	f000 fc97 	bl	8009a88 <__mcmp>
 800915a:	462a      	mov	r2, r5
 800915c:	9004      	str	r0, [sp, #16]
 800915e:	4621      	mov	r1, r4
 8009160:	4648      	mov	r0, r9
 8009162:	f000 fcad 	bl	8009ac0 <__mdiff>
 8009166:	68c2      	ldr	r2, [r0, #12]
 8009168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916a:	4606      	mov	r6, r0
 800916c:	bb02      	cbnz	r2, 80091b0 <_dtoa_r+0xa40>
 800916e:	4601      	mov	r1, r0
 8009170:	9802      	ldr	r0, [sp, #8]
 8009172:	f000 fc89 	bl	8009a88 <__mcmp>
 8009176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009178:	4602      	mov	r2, r0
 800917a:	4631      	mov	r1, r6
 800917c:	4648      	mov	r0, r9
 800917e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009180:	9309      	str	r3, [sp, #36]	@ 0x24
 8009182:	f000 fa05 	bl	8009590 <_Bfree>
 8009186:	9b07      	ldr	r3, [sp, #28]
 8009188:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800918a:	9e00      	ldr	r6, [sp, #0]
 800918c:	ea42 0103 	orr.w	r1, r2, r3
 8009190:	9b06      	ldr	r3, [sp, #24]
 8009192:	4319      	orrs	r1, r3
 8009194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009196:	d10d      	bne.n	80091b4 <_dtoa_r+0xa44>
 8009198:	2b39      	cmp	r3, #57	@ 0x39
 800919a:	d027      	beq.n	80091ec <_dtoa_r+0xa7c>
 800919c:	9a04      	ldr	r2, [sp, #16]
 800919e:	2a00      	cmp	r2, #0
 80091a0:	dd01      	ble.n	80091a6 <_dtoa_r+0xa36>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	3331      	adds	r3, #49	@ 0x31
 80091a6:	f88b 3000 	strb.w	r3, [fp]
 80091aa:	e52e      	b.n	8008c0a <_dtoa_r+0x49a>
 80091ac:	4628      	mov	r0, r5
 80091ae:	e7b9      	b.n	8009124 <_dtoa_r+0x9b4>
 80091b0:	2201      	movs	r2, #1
 80091b2:	e7e2      	b.n	800917a <_dtoa_r+0xa0a>
 80091b4:	9904      	ldr	r1, [sp, #16]
 80091b6:	2900      	cmp	r1, #0
 80091b8:	db04      	blt.n	80091c4 <_dtoa_r+0xa54>
 80091ba:	9807      	ldr	r0, [sp, #28]
 80091bc:	4301      	orrs	r1, r0
 80091be:	9806      	ldr	r0, [sp, #24]
 80091c0:	4301      	orrs	r1, r0
 80091c2:	d120      	bne.n	8009206 <_dtoa_r+0xa96>
 80091c4:	2a00      	cmp	r2, #0
 80091c6:	ddee      	ble.n	80091a6 <_dtoa_r+0xa36>
 80091c8:	9902      	ldr	r1, [sp, #8]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2201      	movs	r2, #1
 80091ce:	4648      	mov	r0, r9
 80091d0:	f000 fbee 	bl	80099b0 <__lshift>
 80091d4:	4621      	mov	r1, r4
 80091d6:	9002      	str	r0, [sp, #8]
 80091d8:	f000 fc56 	bl	8009a88 <__mcmp>
 80091dc:	2800      	cmp	r0, #0
 80091de:	9b00      	ldr	r3, [sp, #0]
 80091e0:	dc02      	bgt.n	80091e8 <_dtoa_r+0xa78>
 80091e2:	d1e0      	bne.n	80091a6 <_dtoa_r+0xa36>
 80091e4:	07da      	lsls	r2, r3, #31
 80091e6:	d5de      	bpl.n	80091a6 <_dtoa_r+0xa36>
 80091e8:	2b39      	cmp	r3, #57	@ 0x39
 80091ea:	d1da      	bne.n	80091a2 <_dtoa_r+0xa32>
 80091ec:	2339      	movs	r3, #57	@ 0x39
 80091ee:	f88b 3000 	strb.w	r3, [fp]
 80091f2:	4633      	mov	r3, r6
 80091f4:	461e      	mov	r6, r3
 80091f6:	3b01      	subs	r3, #1
 80091f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80091fc:	2a39      	cmp	r2, #57	@ 0x39
 80091fe:	d04e      	beq.n	800929e <_dtoa_r+0xb2e>
 8009200:	3201      	adds	r2, #1
 8009202:	701a      	strb	r2, [r3, #0]
 8009204:	e501      	b.n	8008c0a <_dtoa_r+0x49a>
 8009206:	2a00      	cmp	r2, #0
 8009208:	dd03      	ble.n	8009212 <_dtoa_r+0xaa2>
 800920a:	2b39      	cmp	r3, #57	@ 0x39
 800920c:	d0ee      	beq.n	80091ec <_dtoa_r+0xa7c>
 800920e:	3301      	adds	r3, #1
 8009210:	e7c9      	b.n	80091a6 <_dtoa_r+0xa36>
 8009212:	9a00      	ldr	r2, [sp, #0]
 8009214:	9908      	ldr	r1, [sp, #32]
 8009216:	f802 3c01 	strb.w	r3, [r2, #-1]
 800921a:	428a      	cmp	r2, r1
 800921c:	d028      	beq.n	8009270 <_dtoa_r+0xb00>
 800921e:	9902      	ldr	r1, [sp, #8]
 8009220:	2300      	movs	r3, #0
 8009222:	220a      	movs	r2, #10
 8009224:	4648      	mov	r0, r9
 8009226:	f000 f9d5 	bl	80095d4 <__multadd>
 800922a:	42af      	cmp	r7, r5
 800922c:	9002      	str	r0, [sp, #8]
 800922e:	f04f 0300 	mov.w	r3, #0
 8009232:	f04f 020a 	mov.w	r2, #10
 8009236:	4639      	mov	r1, r7
 8009238:	4648      	mov	r0, r9
 800923a:	d107      	bne.n	800924c <_dtoa_r+0xadc>
 800923c:	f000 f9ca 	bl	80095d4 <__multadd>
 8009240:	4607      	mov	r7, r0
 8009242:	4605      	mov	r5, r0
 8009244:	9b00      	ldr	r3, [sp, #0]
 8009246:	3301      	adds	r3, #1
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	e777      	b.n	800913c <_dtoa_r+0x9cc>
 800924c:	f000 f9c2 	bl	80095d4 <__multadd>
 8009250:	4629      	mov	r1, r5
 8009252:	4607      	mov	r7, r0
 8009254:	2300      	movs	r3, #0
 8009256:	220a      	movs	r2, #10
 8009258:	4648      	mov	r0, r9
 800925a:	f000 f9bb 	bl	80095d4 <__multadd>
 800925e:	4605      	mov	r5, r0
 8009260:	e7f0      	b.n	8009244 <_dtoa_r+0xad4>
 8009262:	f1bb 0f00 	cmp.w	fp, #0
 8009266:	bfcc      	ite	gt
 8009268:	465e      	movgt	r6, fp
 800926a:	2601      	movle	r6, #1
 800926c:	4456      	add	r6, sl
 800926e:	2700      	movs	r7, #0
 8009270:	9902      	ldr	r1, [sp, #8]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	2201      	movs	r2, #1
 8009276:	4648      	mov	r0, r9
 8009278:	f000 fb9a 	bl	80099b0 <__lshift>
 800927c:	4621      	mov	r1, r4
 800927e:	9002      	str	r0, [sp, #8]
 8009280:	f000 fc02 	bl	8009a88 <__mcmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	dcb4      	bgt.n	80091f2 <_dtoa_r+0xa82>
 8009288:	d102      	bne.n	8009290 <_dtoa_r+0xb20>
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	07db      	lsls	r3, r3, #31
 800928e:	d4b0      	bmi.n	80091f2 <_dtoa_r+0xa82>
 8009290:	4633      	mov	r3, r6
 8009292:	461e      	mov	r6, r3
 8009294:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009298:	2a30      	cmp	r2, #48	@ 0x30
 800929a:	d0fa      	beq.n	8009292 <_dtoa_r+0xb22>
 800929c:	e4b5      	b.n	8008c0a <_dtoa_r+0x49a>
 800929e:	459a      	cmp	sl, r3
 80092a0:	d1a8      	bne.n	80091f4 <_dtoa_r+0xa84>
 80092a2:	2331      	movs	r3, #49	@ 0x31
 80092a4:	f108 0801 	add.w	r8, r8, #1
 80092a8:	f88a 3000 	strb.w	r3, [sl]
 80092ac:	e4ad      	b.n	8008c0a <_dtoa_r+0x49a>
 80092ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800930c <_dtoa_r+0xb9c>
 80092b4:	b11b      	cbz	r3, 80092be <_dtoa_r+0xb4e>
 80092b6:	f10a 0308 	add.w	r3, sl, #8
 80092ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	4650      	mov	r0, sl
 80092c0:	b017      	add	sp, #92	@ 0x5c
 80092c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c6:	9b07      	ldr	r3, [sp, #28]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	f77f ae2e 	ble.w	8008f2a <_dtoa_r+0x7ba>
 80092ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092d0:	9308      	str	r3, [sp, #32]
 80092d2:	2001      	movs	r0, #1
 80092d4:	e64d      	b.n	8008f72 <_dtoa_r+0x802>
 80092d6:	f1bb 0f00 	cmp.w	fp, #0
 80092da:	f77f aed9 	ble.w	8009090 <_dtoa_r+0x920>
 80092de:	4656      	mov	r6, sl
 80092e0:	9802      	ldr	r0, [sp, #8]
 80092e2:	4621      	mov	r1, r4
 80092e4:	f7ff f9ba 	bl	800865c <quorem>
 80092e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80092ec:	f806 3b01 	strb.w	r3, [r6], #1
 80092f0:	eba6 020a 	sub.w	r2, r6, sl
 80092f4:	4593      	cmp	fp, r2
 80092f6:	ddb4      	ble.n	8009262 <_dtoa_r+0xaf2>
 80092f8:	9902      	ldr	r1, [sp, #8]
 80092fa:	2300      	movs	r3, #0
 80092fc:	220a      	movs	r2, #10
 80092fe:	4648      	mov	r0, r9
 8009300:	f000 f968 	bl	80095d4 <__multadd>
 8009304:	9002      	str	r0, [sp, #8]
 8009306:	e7eb      	b.n	80092e0 <_dtoa_r+0xb70>
 8009308:	0800ccaf 	.word	0x0800ccaf
 800930c:	0800cc33 	.word	0x0800cc33

08009310 <_free_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4605      	mov	r5, r0
 8009314:	2900      	cmp	r1, #0
 8009316:	d041      	beq.n	800939c <_free_r+0x8c>
 8009318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800931c:	1f0c      	subs	r4, r1, #4
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfb8      	it	lt
 8009322:	18e4      	addlt	r4, r4, r3
 8009324:	f000 f8e8 	bl	80094f8 <__malloc_lock>
 8009328:	4a1d      	ldr	r2, [pc, #116]	@ (80093a0 <_free_r+0x90>)
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	b933      	cbnz	r3, 800933c <_free_r+0x2c>
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	6014      	str	r4, [r2, #0]
 8009332:	4628      	mov	r0, r5
 8009334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009338:	f000 b8e4 	b.w	8009504 <__malloc_unlock>
 800933c:	42a3      	cmp	r3, r4
 800933e:	d908      	bls.n	8009352 <_free_r+0x42>
 8009340:	6820      	ldr	r0, [r4, #0]
 8009342:	1821      	adds	r1, r4, r0
 8009344:	428b      	cmp	r3, r1
 8009346:	bf01      	itttt	eq
 8009348:	6819      	ldreq	r1, [r3, #0]
 800934a:	685b      	ldreq	r3, [r3, #4]
 800934c:	1809      	addeq	r1, r1, r0
 800934e:	6021      	streq	r1, [r4, #0]
 8009350:	e7ed      	b.n	800932e <_free_r+0x1e>
 8009352:	461a      	mov	r2, r3
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	b10b      	cbz	r3, 800935c <_free_r+0x4c>
 8009358:	42a3      	cmp	r3, r4
 800935a:	d9fa      	bls.n	8009352 <_free_r+0x42>
 800935c:	6811      	ldr	r1, [r2, #0]
 800935e:	1850      	adds	r0, r2, r1
 8009360:	42a0      	cmp	r0, r4
 8009362:	d10b      	bne.n	800937c <_free_r+0x6c>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	4401      	add	r1, r0
 8009368:	1850      	adds	r0, r2, r1
 800936a:	4283      	cmp	r3, r0
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	d1e0      	bne.n	8009332 <_free_r+0x22>
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	6053      	str	r3, [r2, #4]
 8009376:	4408      	add	r0, r1
 8009378:	6010      	str	r0, [r2, #0]
 800937a:	e7da      	b.n	8009332 <_free_r+0x22>
 800937c:	d902      	bls.n	8009384 <_free_r+0x74>
 800937e:	230c      	movs	r3, #12
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	e7d6      	b.n	8009332 <_free_r+0x22>
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	1821      	adds	r1, r4, r0
 8009388:	428b      	cmp	r3, r1
 800938a:	bf04      	itt	eq
 800938c:	6819      	ldreq	r1, [r3, #0]
 800938e:	685b      	ldreq	r3, [r3, #4]
 8009390:	6063      	str	r3, [r4, #4]
 8009392:	bf04      	itt	eq
 8009394:	1809      	addeq	r1, r1, r0
 8009396:	6021      	streq	r1, [r4, #0]
 8009398:	6054      	str	r4, [r2, #4]
 800939a:	e7ca      	b.n	8009332 <_free_r+0x22>
 800939c:	bd38      	pop	{r3, r4, r5, pc}
 800939e:	bf00      	nop
 80093a0:	20001408 	.word	0x20001408

080093a4 <malloc>:
 80093a4:	4b02      	ldr	r3, [pc, #8]	@ (80093b0 <malloc+0xc>)
 80093a6:	4601      	mov	r1, r0
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	f000 b825 	b.w	80093f8 <_malloc_r>
 80093ae:	bf00      	nop
 80093b0:	20000044 	.word	0x20000044

080093b4 <sbrk_aligned>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	4e0f      	ldr	r6, [pc, #60]	@ (80093f4 <sbrk_aligned+0x40>)
 80093b8:	460c      	mov	r4, r1
 80093ba:	6831      	ldr	r1, [r6, #0]
 80093bc:	4605      	mov	r5, r0
 80093be:	b911      	cbnz	r1, 80093c6 <sbrk_aligned+0x12>
 80093c0:	f002 f996 	bl	800b6f0 <_sbrk_r>
 80093c4:	6030      	str	r0, [r6, #0]
 80093c6:	4621      	mov	r1, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f002 f991 	bl	800b6f0 <_sbrk_r>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	d103      	bne.n	80093da <sbrk_aligned+0x26>
 80093d2:	f04f 34ff 	mov.w	r4, #4294967295
 80093d6:	4620      	mov	r0, r4
 80093d8:	bd70      	pop	{r4, r5, r6, pc}
 80093da:	1cc4      	adds	r4, r0, #3
 80093dc:	f024 0403 	bic.w	r4, r4, #3
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d0f8      	beq.n	80093d6 <sbrk_aligned+0x22>
 80093e4:	1a21      	subs	r1, r4, r0
 80093e6:	4628      	mov	r0, r5
 80093e8:	f002 f982 	bl	800b6f0 <_sbrk_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d1f2      	bne.n	80093d6 <sbrk_aligned+0x22>
 80093f0:	e7ef      	b.n	80093d2 <sbrk_aligned+0x1e>
 80093f2:	bf00      	nop
 80093f4:	20001404 	.word	0x20001404

080093f8 <_malloc_r>:
 80093f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093fc:	1ccd      	adds	r5, r1, #3
 80093fe:	f025 0503 	bic.w	r5, r5, #3
 8009402:	3508      	adds	r5, #8
 8009404:	2d0c      	cmp	r5, #12
 8009406:	bf38      	it	cc
 8009408:	250c      	movcc	r5, #12
 800940a:	2d00      	cmp	r5, #0
 800940c:	4606      	mov	r6, r0
 800940e:	db01      	blt.n	8009414 <_malloc_r+0x1c>
 8009410:	42a9      	cmp	r1, r5
 8009412:	d904      	bls.n	800941e <_malloc_r+0x26>
 8009414:	230c      	movs	r3, #12
 8009416:	6033      	str	r3, [r6, #0]
 8009418:	2000      	movs	r0, #0
 800941a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094f4 <_malloc_r+0xfc>
 8009422:	f000 f869 	bl	80094f8 <__malloc_lock>
 8009426:	f8d8 3000 	ldr.w	r3, [r8]
 800942a:	461c      	mov	r4, r3
 800942c:	bb44      	cbnz	r4, 8009480 <_malloc_r+0x88>
 800942e:	4629      	mov	r1, r5
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff ffbf 	bl	80093b4 <sbrk_aligned>
 8009436:	1c43      	adds	r3, r0, #1
 8009438:	4604      	mov	r4, r0
 800943a:	d158      	bne.n	80094ee <_malloc_r+0xf6>
 800943c:	f8d8 4000 	ldr.w	r4, [r8]
 8009440:	4627      	mov	r7, r4
 8009442:	2f00      	cmp	r7, #0
 8009444:	d143      	bne.n	80094ce <_malloc_r+0xd6>
 8009446:	2c00      	cmp	r4, #0
 8009448:	d04b      	beq.n	80094e2 <_malloc_r+0xea>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	4639      	mov	r1, r7
 800944e:	4630      	mov	r0, r6
 8009450:	eb04 0903 	add.w	r9, r4, r3
 8009454:	f002 f94c 	bl	800b6f0 <_sbrk_r>
 8009458:	4581      	cmp	r9, r0
 800945a:	d142      	bne.n	80094e2 <_malloc_r+0xea>
 800945c:	6821      	ldr	r1, [r4, #0]
 800945e:	1a6d      	subs	r5, r5, r1
 8009460:	4629      	mov	r1, r5
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff ffa6 	bl	80093b4 <sbrk_aligned>
 8009468:	3001      	adds	r0, #1
 800946a:	d03a      	beq.n	80094e2 <_malloc_r+0xea>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	442b      	add	r3, r5
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	f8d8 3000 	ldr.w	r3, [r8]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	bb62      	cbnz	r2, 80094d4 <_malloc_r+0xdc>
 800947a:	f8c8 7000 	str.w	r7, [r8]
 800947e:	e00f      	b.n	80094a0 <_malloc_r+0xa8>
 8009480:	6822      	ldr	r2, [r4, #0]
 8009482:	1b52      	subs	r2, r2, r5
 8009484:	d420      	bmi.n	80094c8 <_malloc_r+0xd0>
 8009486:	2a0b      	cmp	r2, #11
 8009488:	d917      	bls.n	80094ba <_malloc_r+0xc2>
 800948a:	1961      	adds	r1, r4, r5
 800948c:	42a3      	cmp	r3, r4
 800948e:	6025      	str	r5, [r4, #0]
 8009490:	bf18      	it	ne
 8009492:	6059      	strne	r1, [r3, #4]
 8009494:	6863      	ldr	r3, [r4, #4]
 8009496:	bf08      	it	eq
 8009498:	f8c8 1000 	streq.w	r1, [r8]
 800949c:	5162      	str	r2, [r4, r5]
 800949e:	604b      	str	r3, [r1, #4]
 80094a0:	4630      	mov	r0, r6
 80094a2:	f000 f82f 	bl	8009504 <__malloc_unlock>
 80094a6:	f104 000b 	add.w	r0, r4, #11
 80094aa:	1d23      	adds	r3, r4, #4
 80094ac:	f020 0007 	bic.w	r0, r0, #7
 80094b0:	1ac2      	subs	r2, r0, r3
 80094b2:	bf1c      	itt	ne
 80094b4:	1a1b      	subne	r3, r3, r0
 80094b6:	50a3      	strne	r3, [r4, r2]
 80094b8:	e7af      	b.n	800941a <_malloc_r+0x22>
 80094ba:	6862      	ldr	r2, [r4, #4]
 80094bc:	42a3      	cmp	r3, r4
 80094be:	bf0c      	ite	eq
 80094c0:	f8c8 2000 	streq.w	r2, [r8]
 80094c4:	605a      	strne	r2, [r3, #4]
 80094c6:	e7eb      	b.n	80094a0 <_malloc_r+0xa8>
 80094c8:	4623      	mov	r3, r4
 80094ca:	6864      	ldr	r4, [r4, #4]
 80094cc:	e7ae      	b.n	800942c <_malloc_r+0x34>
 80094ce:	463c      	mov	r4, r7
 80094d0:	687f      	ldr	r7, [r7, #4]
 80094d2:	e7b6      	b.n	8009442 <_malloc_r+0x4a>
 80094d4:	461a      	mov	r2, r3
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	42a3      	cmp	r3, r4
 80094da:	d1fb      	bne.n	80094d4 <_malloc_r+0xdc>
 80094dc:	2300      	movs	r3, #0
 80094de:	6053      	str	r3, [r2, #4]
 80094e0:	e7de      	b.n	80094a0 <_malloc_r+0xa8>
 80094e2:	230c      	movs	r3, #12
 80094e4:	6033      	str	r3, [r6, #0]
 80094e6:	4630      	mov	r0, r6
 80094e8:	f000 f80c 	bl	8009504 <__malloc_unlock>
 80094ec:	e794      	b.n	8009418 <_malloc_r+0x20>
 80094ee:	6005      	str	r5, [r0, #0]
 80094f0:	e7d6      	b.n	80094a0 <_malloc_r+0xa8>
 80094f2:	bf00      	nop
 80094f4:	20001408 	.word	0x20001408

080094f8 <__malloc_lock>:
 80094f8:	4801      	ldr	r0, [pc, #4]	@ (8009500 <__malloc_lock+0x8>)
 80094fa:	f7ff b898 	b.w	800862e <__retarget_lock_acquire_recursive>
 80094fe:	bf00      	nop
 8009500:	20001400 	.word	0x20001400

08009504 <__malloc_unlock>:
 8009504:	4801      	ldr	r0, [pc, #4]	@ (800950c <__malloc_unlock+0x8>)
 8009506:	f7ff b893 	b.w	8008630 <__retarget_lock_release_recursive>
 800950a:	bf00      	nop
 800950c:	20001400 	.word	0x20001400

08009510 <_Balloc>:
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	69c6      	ldr	r6, [r0, #28]
 8009514:	4604      	mov	r4, r0
 8009516:	460d      	mov	r5, r1
 8009518:	b976      	cbnz	r6, 8009538 <_Balloc+0x28>
 800951a:	2010      	movs	r0, #16
 800951c:	f7ff ff42 	bl	80093a4 <malloc>
 8009520:	4602      	mov	r2, r0
 8009522:	61e0      	str	r0, [r4, #28]
 8009524:	b920      	cbnz	r0, 8009530 <_Balloc+0x20>
 8009526:	4b18      	ldr	r3, [pc, #96]	@ (8009588 <_Balloc+0x78>)
 8009528:	4818      	ldr	r0, [pc, #96]	@ (800958c <_Balloc+0x7c>)
 800952a:	216b      	movs	r1, #107	@ 0x6b
 800952c:	f002 f8f8 	bl	800b720 <__assert_func>
 8009530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009534:	6006      	str	r6, [r0, #0]
 8009536:	60c6      	str	r6, [r0, #12]
 8009538:	69e6      	ldr	r6, [r4, #28]
 800953a:	68f3      	ldr	r3, [r6, #12]
 800953c:	b183      	cbz	r3, 8009560 <_Balloc+0x50>
 800953e:	69e3      	ldr	r3, [r4, #28]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009546:	b9b8      	cbnz	r0, 8009578 <_Balloc+0x68>
 8009548:	2101      	movs	r1, #1
 800954a:	fa01 f605 	lsl.w	r6, r1, r5
 800954e:	1d72      	adds	r2, r6, #5
 8009550:	0092      	lsls	r2, r2, #2
 8009552:	4620      	mov	r0, r4
 8009554:	f002 f902 	bl	800b75c <_calloc_r>
 8009558:	b160      	cbz	r0, 8009574 <_Balloc+0x64>
 800955a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800955e:	e00e      	b.n	800957e <_Balloc+0x6e>
 8009560:	2221      	movs	r2, #33	@ 0x21
 8009562:	2104      	movs	r1, #4
 8009564:	4620      	mov	r0, r4
 8009566:	f002 f8f9 	bl	800b75c <_calloc_r>
 800956a:	69e3      	ldr	r3, [r4, #28]
 800956c:	60f0      	str	r0, [r6, #12]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e4      	bne.n	800953e <_Balloc+0x2e>
 8009574:	2000      	movs	r0, #0
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	6802      	ldr	r2, [r0, #0]
 800957a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800957e:	2300      	movs	r3, #0
 8009580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009584:	e7f7      	b.n	8009576 <_Balloc+0x66>
 8009586:	bf00      	nop
 8009588:	0800cc40 	.word	0x0800cc40
 800958c:	0800ccc0 	.word	0x0800ccc0

08009590 <_Bfree>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	69c6      	ldr	r6, [r0, #28]
 8009594:	4605      	mov	r5, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b976      	cbnz	r6, 80095b8 <_Bfree+0x28>
 800959a:	2010      	movs	r0, #16
 800959c:	f7ff ff02 	bl	80093a4 <malloc>
 80095a0:	4602      	mov	r2, r0
 80095a2:	61e8      	str	r0, [r5, #28]
 80095a4:	b920      	cbnz	r0, 80095b0 <_Bfree+0x20>
 80095a6:	4b09      	ldr	r3, [pc, #36]	@ (80095cc <_Bfree+0x3c>)
 80095a8:	4809      	ldr	r0, [pc, #36]	@ (80095d0 <_Bfree+0x40>)
 80095aa:	218f      	movs	r1, #143	@ 0x8f
 80095ac:	f002 f8b8 	bl	800b720 <__assert_func>
 80095b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095b4:	6006      	str	r6, [r0, #0]
 80095b6:	60c6      	str	r6, [r0, #12]
 80095b8:	b13c      	cbz	r4, 80095ca <_Bfree+0x3a>
 80095ba:	69eb      	ldr	r3, [r5, #28]
 80095bc:	6862      	ldr	r2, [r4, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095c4:	6021      	str	r1, [r4, #0]
 80095c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	0800cc40 	.word	0x0800cc40
 80095d0:	0800ccc0 	.word	0x0800ccc0

080095d4 <__multadd>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	690d      	ldr	r5, [r1, #16]
 80095da:	4607      	mov	r7, r0
 80095dc:	460c      	mov	r4, r1
 80095de:	461e      	mov	r6, r3
 80095e0:	f101 0c14 	add.w	ip, r1, #20
 80095e4:	2000      	movs	r0, #0
 80095e6:	f8dc 3000 	ldr.w	r3, [ip]
 80095ea:	b299      	uxth	r1, r3
 80095ec:	fb02 6101 	mla	r1, r2, r1, r6
 80095f0:	0c1e      	lsrs	r6, r3, #16
 80095f2:	0c0b      	lsrs	r3, r1, #16
 80095f4:	fb02 3306 	mla	r3, r2, r6, r3
 80095f8:	b289      	uxth	r1, r1
 80095fa:	3001      	adds	r0, #1
 80095fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009600:	4285      	cmp	r5, r0
 8009602:	f84c 1b04 	str.w	r1, [ip], #4
 8009606:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800960a:	dcec      	bgt.n	80095e6 <__multadd+0x12>
 800960c:	b30e      	cbz	r6, 8009652 <__multadd+0x7e>
 800960e:	68a3      	ldr	r3, [r4, #8]
 8009610:	42ab      	cmp	r3, r5
 8009612:	dc19      	bgt.n	8009648 <__multadd+0x74>
 8009614:	6861      	ldr	r1, [r4, #4]
 8009616:	4638      	mov	r0, r7
 8009618:	3101      	adds	r1, #1
 800961a:	f7ff ff79 	bl	8009510 <_Balloc>
 800961e:	4680      	mov	r8, r0
 8009620:	b928      	cbnz	r0, 800962e <__multadd+0x5a>
 8009622:	4602      	mov	r2, r0
 8009624:	4b0c      	ldr	r3, [pc, #48]	@ (8009658 <__multadd+0x84>)
 8009626:	480d      	ldr	r0, [pc, #52]	@ (800965c <__multadd+0x88>)
 8009628:	21ba      	movs	r1, #186	@ 0xba
 800962a:	f002 f879 	bl	800b720 <__assert_func>
 800962e:	6922      	ldr	r2, [r4, #16]
 8009630:	3202      	adds	r2, #2
 8009632:	f104 010c 	add.w	r1, r4, #12
 8009636:	0092      	lsls	r2, r2, #2
 8009638:	300c      	adds	r0, #12
 800963a:	f7fe fffa 	bl	8008632 <memcpy>
 800963e:	4621      	mov	r1, r4
 8009640:	4638      	mov	r0, r7
 8009642:	f7ff ffa5 	bl	8009590 <_Bfree>
 8009646:	4644      	mov	r4, r8
 8009648:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800964c:	3501      	adds	r5, #1
 800964e:	615e      	str	r6, [r3, #20]
 8009650:	6125      	str	r5, [r4, #16]
 8009652:	4620      	mov	r0, r4
 8009654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009658:	0800ccaf 	.word	0x0800ccaf
 800965c:	0800ccc0 	.word	0x0800ccc0

08009660 <__s2b>:
 8009660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009664:	460c      	mov	r4, r1
 8009666:	4615      	mov	r5, r2
 8009668:	461f      	mov	r7, r3
 800966a:	2209      	movs	r2, #9
 800966c:	3308      	adds	r3, #8
 800966e:	4606      	mov	r6, r0
 8009670:	fb93 f3f2 	sdiv	r3, r3, r2
 8009674:	2100      	movs	r1, #0
 8009676:	2201      	movs	r2, #1
 8009678:	429a      	cmp	r2, r3
 800967a:	db09      	blt.n	8009690 <__s2b+0x30>
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff ff47 	bl	8009510 <_Balloc>
 8009682:	b940      	cbnz	r0, 8009696 <__s2b+0x36>
 8009684:	4602      	mov	r2, r0
 8009686:	4b19      	ldr	r3, [pc, #100]	@ (80096ec <__s2b+0x8c>)
 8009688:	4819      	ldr	r0, [pc, #100]	@ (80096f0 <__s2b+0x90>)
 800968a:	21d3      	movs	r1, #211	@ 0xd3
 800968c:	f002 f848 	bl	800b720 <__assert_func>
 8009690:	0052      	lsls	r2, r2, #1
 8009692:	3101      	adds	r1, #1
 8009694:	e7f0      	b.n	8009678 <__s2b+0x18>
 8009696:	9b08      	ldr	r3, [sp, #32]
 8009698:	6143      	str	r3, [r0, #20]
 800969a:	2d09      	cmp	r5, #9
 800969c:	f04f 0301 	mov.w	r3, #1
 80096a0:	6103      	str	r3, [r0, #16]
 80096a2:	dd16      	ble.n	80096d2 <__s2b+0x72>
 80096a4:	f104 0909 	add.w	r9, r4, #9
 80096a8:	46c8      	mov	r8, r9
 80096aa:	442c      	add	r4, r5
 80096ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096b0:	4601      	mov	r1, r0
 80096b2:	3b30      	subs	r3, #48	@ 0x30
 80096b4:	220a      	movs	r2, #10
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7ff ff8c 	bl	80095d4 <__multadd>
 80096bc:	45a0      	cmp	r8, r4
 80096be:	d1f5      	bne.n	80096ac <__s2b+0x4c>
 80096c0:	f1a5 0408 	sub.w	r4, r5, #8
 80096c4:	444c      	add	r4, r9
 80096c6:	1b2d      	subs	r5, r5, r4
 80096c8:	1963      	adds	r3, r4, r5
 80096ca:	42bb      	cmp	r3, r7
 80096cc:	db04      	blt.n	80096d8 <__s2b+0x78>
 80096ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d2:	340a      	adds	r4, #10
 80096d4:	2509      	movs	r5, #9
 80096d6:	e7f6      	b.n	80096c6 <__s2b+0x66>
 80096d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096dc:	4601      	mov	r1, r0
 80096de:	3b30      	subs	r3, #48	@ 0x30
 80096e0:	220a      	movs	r2, #10
 80096e2:	4630      	mov	r0, r6
 80096e4:	f7ff ff76 	bl	80095d4 <__multadd>
 80096e8:	e7ee      	b.n	80096c8 <__s2b+0x68>
 80096ea:	bf00      	nop
 80096ec:	0800ccaf 	.word	0x0800ccaf
 80096f0:	0800ccc0 	.word	0x0800ccc0

080096f4 <__hi0bits>:
 80096f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80096f8:	4603      	mov	r3, r0
 80096fa:	bf36      	itet	cc
 80096fc:	0403      	lslcc	r3, r0, #16
 80096fe:	2000      	movcs	r0, #0
 8009700:	2010      	movcc	r0, #16
 8009702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009706:	bf3c      	itt	cc
 8009708:	021b      	lslcc	r3, r3, #8
 800970a:	3008      	addcc	r0, #8
 800970c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009710:	bf3c      	itt	cc
 8009712:	011b      	lslcc	r3, r3, #4
 8009714:	3004      	addcc	r0, #4
 8009716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971a:	bf3c      	itt	cc
 800971c:	009b      	lslcc	r3, r3, #2
 800971e:	3002      	addcc	r0, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	db05      	blt.n	8009730 <__hi0bits+0x3c>
 8009724:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009728:	f100 0001 	add.w	r0, r0, #1
 800972c:	bf08      	it	eq
 800972e:	2020      	moveq	r0, #32
 8009730:	4770      	bx	lr

08009732 <__lo0bits>:
 8009732:	6803      	ldr	r3, [r0, #0]
 8009734:	4602      	mov	r2, r0
 8009736:	f013 0007 	ands.w	r0, r3, #7
 800973a:	d00b      	beq.n	8009754 <__lo0bits+0x22>
 800973c:	07d9      	lsls	r1, r3, #31
 800973e:	d421      	bmi.n	8009784 <__lo0bits+0x52>
 8009740:	0798      	lsls	r0, r3, #30
 8009742:	bf49      	itett	mi
 8009744:	085b      	lsrmi	r3, r3, #1
 8009746:	089b      	lsrpl	r3, r3, #2
 8009748:	2001      	movmi	r0, #1
 800974a:	6013      	strmi	r3, [r2, #0]
 800974c:	bf5c      	itt	pl
 800974e:	6013      	strpl	r3, [r2, #0]
 8009750:	2002      	movpl	r0, #2
 8009752:	4770      	bx	lr
 8009754:	b299      	uxth	r1, r3
 8009756:	b909      	cbnz	r1, 800975c <__lo0bits+0x2a>
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	2010      	movs	r0, #16
 800975c:	b2d9      	uxtb	r1, r3
 800975e:	b909      	cbnz	r1, 8009764 <__lo0bits+0x32>
 8009760:	3008      	adds	r0, #8
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	0719      	lsls	r1, r3, #28
 8009766:	bf04      	itt	eq
 8009768:	091b      	lsreq	r3, r3, #4
 800976a:	3004      	addeq	r0, #4
 800976c:	0799      	lsls	r1, r3, #30
 800976e:	bf04      	itt	eq
 8009770:	089b      	lsreq	r3, r3, #2
 8009772:	3002      	addeq	r0, #2
 8009774:	07d9      	lsls	r1, r3, #31
 8009776:	d403      	bmi.n	8009780 <__lo0bits+0x4e>
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	f100 0001 	add.w	r0, r0, #1
 800977e:	d003      	beq.n	8009788 <__lo0bits+0x56>
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	4770      	bx	lr
 8009784:	2000      	movs	r0, #0
 8009786:	4770      	bx	lr
 8009788:	2020      	movs	r0, #32
 800978a:	4770      	bx	lr

0800978c <__i2b>:
 800978c:	b510      	push	{r4, lr}
 800978e:	460c      	mov	r4, r1
 8009790:	2101      	movs	r1, #1
 8009792:	f7ff febd 	bl	8009510 <_Balloc>
 8009796:	4602      	mov	r2, r0
 8009798:	b928      	cbnz	r0, 80097a6 <__i2b+0x1a>
 800979a:	4b05      	ldr	r3, [pc, #20]	@ (80097b0 <__i2b+0x24>)
 800979c:	4805      	ldr	r0, [pc, #20]	@ (80097b4 <__i2b+0x28>)
 800979e:	f240 1145 	movw	r1, #325	@ 0x145
 80097a2:	f001 ffbd 	bl	800b720 <__assert_func>
 80097a6:	2301      	movs	r3, #1
 80097a8:	6144      	str	r4, [r0, #20]
 80097aa:	6103      	str	r3, [r0, #16]
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	bf00      	nop
 80097b0:	0800ccaf 	.word	0x0800ccaf
 80097b4:	0800ccc0 	.word	0x0800ccc0

080097b8 <__multiply>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4617      	mov	r7, r2
 80097be:	690a      	ldr	r2, [r1, #16]
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	bfa8      	it	ge
 80097c6:	463b      	movge	r3, r7
 80097c8:	4689      	mov	r9, r1
 80097ca:	bfa4      	itt	ge
 80097cc:	460f      	movge	r7, r1
 80097ce:	4699      	movge	r9, r3
 80097d0:	693d      	ldr	r5, [r7, #16]
 80097d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	eb05 060a 	add.w	r6, r5, sl
 80097de:	42b3      	cmp	r3, r6
 80097e0:	b085      	sub	sp, #20
 80097e2:	bfb8      	it	lt
 80097e4:	3101      	addlt	r1, #1
 80097e6:	f7ff fe93 	bl	8009510 <_Balloc>
 80097ea:	b930      	cbnz	r0, 80097fa <__multiply+0x42>
 80097ec:	4602      	mov	r2, r0
 80097ee:	4b41      	ldr	r3, [pc, #260]	@ (80098f4 <__multiply+0x13c>)
 80097f0:	4841      	ldr	r0, [pc, #260]	@ (80098f8 <__multiply+0x140>)
 80097f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80097f6:	f001 ff93 	bl	800b720 <__assert_func>
 80097fa:	f100 0414 	add.w	r4, r0, #20
 80097fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009802:	4623      	mov	r3, r4
 8009804:	2200      	movs	r2, #0
 8009806:	4573      	cmp	r3, lr
 8009808:	d320      	bcc.n	800984c <__multiply+0x94>
 800980a:	f107 0814 	add.w	r8, r7, #20
 800980e:	f109 0114 	add.w	r1, r9, #20
 8009812:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009816:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	1beb      	subs	r3, r5, r7
 800981e:	3b15      	subs	r3, #21
 8009820:	f023 0303 	bic.w	r3, r3, #3
 8009824:	3304      	adds	r3, #4
 8009826:	3715      	adds	r7, #21
 8009828:	42bd      	cmp	r5, r7
 800982a:	bf38      	it	cc
 800982c:	2304      	movcc	r3, #4
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	9103      	str	r1, [sp, #12]
 8009834:	428b      	cmp	r3, r1
 8009836:	d80c      	bhi.n	8009852 <__multiply+0x9a>
 8009838:	2e00      	cmp	r6, #0
 800983a:	dd03      	ble.n	8009844 <__multiply+0x8c>
 800983c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009840:	2b00      	cmp	r3, #0
 8009842:	d055      	beq.n	80098f0 <__multiply+0x138>
 8009844:	6106      	str	r6, [r0, #16]
 8009846:	b005      	add	sp, #20
 8009848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	f843 2b04 	str.w	r2, [r3], #4
 8009850:	e7d9      	b.n	8009806 <__multiply+0x4e>
 8009852:	f8b1 a000 	ldrh.w	sl, [r1]
 8009856:	f1ba 0f00 	cmp.w	sl, #0
 800985a:	d01f      	beq.n	800989c <__multiply+0xe4>
 800985c:	46c4      	mov	ip, r8
 800985e:	46a1      	mov	r9, r4
 8009860:	2700      	movs	r7, #0
 8009862:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009866:	f8d9 3000 	ldr.w	r3, [r9]
 800986a:	fa1f fb82 	uxth.w	fp, r2
 800986e:	b29b      	uxth	r3, r3
 8009870:	fb0a 330b 	mla	r3, sl, fp, r3
 8009874:	443b      	add	r3, r7
 8009876:	f8d9 7000 	ldr.w	r7, [r9]
 800987a:	0c12      	lsrs	r2, r2, #16
 800987c:	0c3f      	lsrs	r7, r7, #16
 800987e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009882:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009886:	b29b      	uxth	r3, r3
 8009888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800988c:	4565      	cmp	r5, ip
 800988e:	f849 3b04 	str.w	r3, [r9], #4
 8009892:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009896:	d8e4      	bhi.n	8009862 <__multiply+0xaa>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	50e7      	str	r7, [r4, r3]
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098a2:	3104      	adds	r1, #4
 80098a4:	f1b9 0f00 	cmp.w	r9, #0
 80098a8:	d020      	beq.n	80098ec <__multiply+0x134>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	4647      	mov	r7, r8
 80098ae:	46a4      	mov	ip, r4
 80098b0:	f04f 0a00 	mov.w	sl, #0
 80098b4:	f8b7 b000 	ldrh.w	fp, [r7]
 80098b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80098bc:	fb09 220b 	mla	r2, r9, fp, r2
 80098c0:	4452      	add	r2, sl
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c8:	f84c 3b04 	str.w	r3, [ip], #4
 80098cc:	f857 3b04 	ldr.w	r3, [r7], #4
 80098d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098d4:	f8bc 3000 	ldrh.w	r3, [ip]
 80098d8:	fb09 330a 	mla	r3, r9, sl, r3
 80098dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80098e0:	42bd      	cmp	r5, r7
 80098e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098e6:	d8e5      	bhi.n	80098b4 <__multiply+0xfc>
 80098e8:	9a01      	ldr	r2, [sp, #4]
 80098ea:	50a3      	str	r3, [r4, r2]
 80098ec:	3404      	adds	r4, #4
 80098ee:	e79f      	b.n	8009830 <__multiply+0x78>
 80098f0:	3e01      	subs	r6, #1
 80098f2:	e7a1      	b.n	8009838 <__multiply+0x80>
 80098f4:	0800ccaf 	.word	0x0800ccaf
 80098f8:	0800ccc0 	.word	0x0800ccc0

080098fc <__pow5mult>:
 80098fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009900:	4615      	mov	r5, r2
 8009902:	f012 0203 	ands.w	r2, r2, #3
 8009906:	4607      	mov	r7, r0
 8009908:	460e      	mov	r6, r1
 800990a:	d007      	beq.n	800991c <__pow5mult+0x20>
 800990c:	4c25      	ldr	r4, [pc, #148]	@ (80099a4 <__pow5mult+0xa8>)
 800990e:	3a01      	subs	r2, #1
 8009910:	2300      	movs	r3, #0
 8009912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009916:	f7ff fe5d 	bl	80095d4 <__multadd>
 800991a:	4606      	mov	r6, r0
 800991c:	10ad      	asrs	r5, r5, #2
 800991e:	d03d      	beq.n	800999c <__pow5mult+0xa0>
 8009920:	69fc      	ldr	r4, [r7, #28]
 8009922:	b97c      	cbnz	r4, 8009944 <__pow5mult+0x48>
 8009924:	2010      	movs	r0, #16
 8009926:	f7ff fd3d 	bl	80093a4 <malloc>
 800992a:	4602      	mov	r2, r0
 800992c:	61f8      	str	r0, [r7, #28]
 800992e:	b928      	cbnz	r0, 800993c <__pow5mult+0x40>
 8009930:	4b1d      	ldr	r3, [pc, #116]	@ (80099a8 <__pow5mult+0xac>)
 8009932:	481e      	ldr	r0, [pc, #120]	@ (80099ac <__pow5mult+0xb0>)
 8009934:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009938:	f001 fef2 	bl	800b720 <__assert_func>
 800993c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009940:	6004      	str	r4, [r0, #0]
 8009942:	60c4      	str	r4, [r0, #12]
 8009944:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009948:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800994c:	b94c      	cbnz	r4, 8009962 <__pow5mult+0x66>
 800994e:	f240 2171 	movw	r1, #625	@ 0x271
 8009952:	4638      	mov	r0, r7
 8009954:	f7ff ff1a 	bl	800978c <__i2b>
 8009958:	2300      	movs	r3, #0
 800995a:	f8c8 0008 	str.w	r0, [r8, #8]
 800995e:	4604      	mov	r4, r0
 8009960:	6003      	str	r3, [r0, #0]
 8009962:	f04f 0900 	mov.w	r9, #0
 8009966:	07eb      	lsls	r3, r5, #31
 8009968:	d50a      	bpl.n	8009980 <__pow5mult+0x84>
 800996a:	4631      	mov	r1, r6
 800996c:	4622      	mov	r2, r4
 800996e:	4638      	mov	r0, r7
 8009970:	f7ff ff22 	bl	80097b8 <__multiply>
 8009974:	4631      	mov	r1, r6
 8009976:	4680      	mov	r8, r0
 8009978:	4638      	mov	r0, r7
 800997a:	f7ff fe09 	bl	8009590 <_Bfree>
 800997e:	4646      	mov	r6, r8
 8009980:	106d      	asrs	r5, r5, #1
 8009982:	d00b      	beq.n	800999c <__pow5mult+0xa0>
 8009984:	6820      	ldr	r0, [r4, #0]
 8009986:	b938      	cbnz	r0, 8009998 <__pow5mult+0x9c>
 8009988:	4622      	mov	r2, r4
 800998a:	4621      	mov	r1, r4
 800998c:	4638      	mov	r0, r7
 800998e:	f7ff ff13 	bl	80097b8 <__multiply>
 8009992:	6020      	str	r0, [r4, #0]
 8009994:	f8c0 9000 	str.w	r9, [r0]
 8009998:	4604      	mov	r4, r0
 800999a:	e7e4      	b.n	8009966 <__pow5mult+0x6a>
 800999c:	4630      	mov	r0, r6
 800999e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a2:	bf00      	nop
 80099a4:	0800cdec 	.word	0x0800cdec
 80099a8:	0800cc40 	.word	0x0800cc40
 80099ac:	0800ccc0 	.word	0x0800ccc0

080099b0 <__lshift>:
 80099b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	460c      	mov	r4, r1
 80099b6:	6849      	ldr	r1, [r1, #4]
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	4607      	mov	r7, r0
 80099c2:	4691      	mov	r9, r2
 80099c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099c8:	f108 0601 	add.w	r6, r8, #1
 80099cc:	42b3      	cmp	r3, r6
 80099ce:	db0b      	blt.n	80099e8 <__lshift+0x38>
 80099d0:	4638      	mov	r0, r7
 80099d2:	f7ff fd9d 	bl	8009510 <_Balloc>
 80099d6:	4605      	mov	r5, r0
 80099d8:	b948      	cbnz	r0, 80099ee <__lshift+0x3e>
 80099da:	4602      	mov	r2, r0
 80099dc:	4b28      	ldr	r3, [pc, #160]	@ (8009a80 <__lshift+0xd0>)
 80099de:	4829      	ldr	r0, [pc, #164]	@ (8009a84 <__lshift+0xd4>)
 80099e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80099e4:	f001 fe9c 	bl	800b720 <__assert_func>
 80099e8:	3101      	adds	r1, #1
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	e7ee      	b.n	80099cc <__lshift+0x1c>
 80099ee:	2300      	movs	r3, #0
 80099f0:	f100 0114 	add.w	r1, r0, #20
 80099f4:	f100 0210 	add.w	r2, r0, #16
 80099f8:	4618      	mov	r0, r3
 80099fa:	4553      	cmp	r3, sl
 80099fc:	db33      	blt.n	8009a66 <__lshift+0xb6>
 80099fe:	6920      	ldr	r0, [r4, #16]
 8009a00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a04:	f104 0314 	add.w	r3, r4, #20
 8009a08:	f019 091f 	ands.w	r9, r9, #31
 8009a0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a14:	d02b      	beq.n	8009a6e <__lshift+0xbe>
 8009a16:	f1c9 0e20 	rsb	lr, r9, #32
 8009a1a:	468a      	mov	sl, r1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	fa00 f009 	lsl.w	r0, r0, r9
 8009a24:	4310      	orrs	r0, r2
 8009a26:	f84a 0b04 	str.w	r0, [sl], #4
 8009a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2e:	459c      	cmp	ip, r3
 8009a30:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a34:	d8f3      	bhi.n	8009a1e <__lshift+0x6e>
 8009a36:	ebac 0304 	sub.w	r3, ip, r4
 8009a3a:	3b15      	subs	r3, #21
 8009a3c:	f023 0303 	bic.w	r3, r3, #3
 8009a40:	3304      	adds	r3, #4
 8009a42:	f104 0015 	add.w	r0, r4, #21
 8009a46:	4560      	cmp	r0, ip
 8009a48:	bf88      	it	hi
 8009a4a:	2304      	movhi	r3, #4
 8009a4c:	50ca      	str	r2, [r1, r3]
 8009a4e:	b10a      	cbz	r2, 8009a54 <__lshift+0xa4>
 8009a50:	f108 0602 	add.w	r6, r8, #2
 8009a54:	3e01      	subs	r6, #1
 8009a56:	4638      	mov	r0, r7
 8009a58:	612e      	str	r6, [r5, #16]
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	f7ff fd98 	bl	8009590 <_Bfree>
 8009a60:	4628      	mov	r0, r5
 8009a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a66:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	e7c5      	b.n	80099fa <__lshift+0x4a>
 8009a6e:	3904      	subs	r1, #4
 8009a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a74:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a78:	459c      	cmp	ip, r3
 8009a7a:	d8f9      	bhi.n	8009a70 <__lshift+0xc0>
 8009a7c:	e7ea      	b.n	8009a54 <__lshift+0xa4>
 8009a7e:	bf00      	nop
 8009a80:	0800ccaf 	.word	0x0800ccaf
 8009a84:	0800ccc0 	.word	0x0800ccc0

08009a88 <__mcmp>:
 8009a88:	690a      	ldr	r2, [r1, #16]
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	6900      	ldr	r0, [r0, #16]
 8009a8e:	1a80      	subs	r0, r0, r2
 8009a90:	b530      	push	{r4, r5, lr}
 8009a92:	d10e      	bne.n	8009ab2 <__mcmp+0x2a>
 8009a94:	3314      	adds	r3, #20
 8009a96:	3114      	adds	r1, #20
 8009a98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009aa0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009aa4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009aa8:	4295      	cmp	r5, r2
 8009aaa:	d003      	beq.n	8009ab4 <__mcmp+0x2c>
 8009aac:	d205      	bcs.n	8009aba <__mcmp+0x32>
 8009aae:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab2:	bd30      	pop	{r4, r5, pc}
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d3f3      	bcc.n	8009aa0 <__mcmp+0x18>
 8009ab8:	e7fb      	b.n	8009ab2 <__mcmp+0x2a>
 8009aba:	2001      	movs	r0, #1
 8009abc:	e7f9      	b.n	8009ab2 <__mcmp+0x2a>
	...

08009ac0 <__mdiff>:
 8009ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4648      	mov	r0, r9
 8009acc:	4614      	mov	r4, r2
 8009ace:	f7ff ffdb 	bl	8009a88 <__mcmp>
 8009ad2:	1e05      	subs	r5, r0, #0
 8009ad4:	d112      	bne.n	8009afc <__mdiff+0x3c>
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7ff fd19 	bl	8009510 <_Balloc>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	b928      	cbnz	r0, 8009aee <__mdiff+0x2e>
 8009ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8009be0 <__mdiff+0x120>)
 8009ae4:	f240 2137 	movw	r1, #567	@ 0x237
 8009ae8:	483e      	ldr	r0, [pc, #248]	@ (8009be4 <__mdiff+0x124>)
 8009aea:	f001 fe19 	bl	800b720 <__assert_func>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009af4:	4610      	mov	r0, r2
 8009af6:	b003      	add	sp, #12
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afc:	bfbc      	itt	lt
 8009afe:	464b      	movlt	r3, r9
 8009b00:	46a1      	movlt	r9, r4
 8009b02:	4630      	mov	r0, r6
 8009b04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b08:	bfba      	itte	lt
 8009b0a:	461c      	movlt	r4, r3
 8009b0c:	2501      	movlt	r5, #1
 8009b0e:	2500      	movge	r5, #0
 8009b10:	f7ff fcfe 	bl	8009510 <_Balloc>
 8009b14:	4602      	mov	r2, r0
 8009b16:	b918      	cbnz	r0, 8009b20 <__mdiff+0x60>
 8009b18:	4b31      	ldr	r3, [pc, #196]	@ (8009be0 <__mdiff+0x120>)
 8009b1a:	f240 2145 	movw	r1, #581	@ 0x245
 8009b1e:	e7e3      	b.n	8009ae8 <__mdiff+0x28>
 8009b20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b24:	6926      	ldr	r6, [r4, #16]
 8009b26:	60c5      	str	r5, [r0, #12]
 8009b28:	f109 0310 	add.w	r3, r9, #16
 8009b2c:	f109 0514 	add.w	r5, r9, #20
 8009b30:	f104 0e14 	add.w	lr, r4, #20
 8009b34:	f100 0b14 	add.w	fp, r0, #20
 8009b38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	46d9      	mov	r9, fp
 8009b44:	f04f 0c00 	mov.w	ip, #0
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	fa1f f38a 	uxth.w	r3, sl
 8009b58:	4619      	mov	r1, r3
 8009b5a:	b283      	uxth	r3, r0
 8009b5c:	1acb      	subs	r3, r1, r3
 8009b5e:	0c00      	lsrs	r0, r0, #16
 8009b60:	4463      	add	r3, ip
 8009b62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b70:	4576      	cmp	r6, lr
 8009b72:	f849 3b04 	str.w	r3, [r9], #4
 8009b76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b7a:	d8e5      	bhi.n	8009b48 <__mdiff+0x88>
 8009b7c:	1b33      	subs	r3, r6, r4
 8009b7e:	3b15      	subs	r3, #21
 8009b80:	f023 0303 	bic.w	r3, r3, #3
 8009b84:	3415      	adds	r4, #21
 8009b86:	3304      	adds	r3, #4
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	bf38      	it	cc
 8009b8c:	2304      	movcc	r3, #4
 8009b8e:	441d      	add	r5, r3
 8009b90:	445b      	add	r3, fp
 8009b92:	461e      	mov	r6, r3
 8009b94:	462c      	mov	r4, r5
 8009b96:	4544      	cmp	r4, r8
 8009b98:	d30e      	bcc.n	8009bb8 <__mdiff+0xf8>
 8009b9a:	f108 0103 	add.w	r1, r8, #3
 8009b9e:	1b49      	subs	r1, r1, r5
 8009ba0:	f021 0103 	bic.w	r1, r1, #3
 8009ba4:	3d03      	subs	r5, #3
 8009ba6:	45a8      	cmp	r8, r5
 8009ba8:	bf38      	it	cc
 8009baa:	2100      	movcc	r1, #0
 8009bac:	440b      	add	r3, r1
 8009bae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bb2:	b191      	cbz	r1, 8009bda <__mdiff+0x11a>
 8009bb4:	6117      	str	r7, [r2, #16]
 8009bb6:	e79d      	b.n	8009af4 <__mdiff+0x34>
 8009bb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bbc:	46e6      	mov	lr, ip
 8009bbe:	0c08      	lsrs	r0, r1, #16
 8009bc0:	fa1c fc81 	uxtah	ip, ip, r1
 8009bc4:	4471      	add	r1, lr
 8009bc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bca:	b289      	uxth	r1, r1
 8009bcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bd0:	f846 1b04 	str.w	r1, [r6], #4
 8009bd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bd8:	e7dd      	b.n	8009b96 <__mdiff+0xd6>
 8009bda:	3f01      	subs	r7, #1
 8009bdc:	e7e7      	b.n	8009bae <__mdiff+0xee>
 8009bde:	bf00      	nop
 8009be0:	0800ccaf 	.word	0x0800ccaf
 8009be4:	0800ccc0 	.word	0x0800ccc0

08009be8 <__ulp>:
 8009be8:	b082      	sub	sp, #8
 8009bea:	ed8d 0b00 	vstr	d0, [sp]
 8009bee:	9a01      	ldr	r2, [sp, #4]
 8009bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8009c30 <__ulp+0x48>)
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dc08      	bgt.n	8009c0e <__ulp+0x26>
 8009bfc:	425b      	negs	r3, r3
 8009bfe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009c02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c06:	da04      	bge.n	8009c12 <__ulp+0x2a>
 8009c08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c0c:	4113      	asrs	r3, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	e008      	b.n	8009c24 <__ulp+0x3c>
 8009c12:	f1a2 0314 	sub.w	r3, r2, #20
 8009c16:	2b1e      	cmp	r3, #30
 8009c18:	bfda      	itte	le
 8009c1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009c1e:	40da      	lsrle	r2, r3
 8009c20:	2201      	movgt	r2, #1
 8009c22:	2300      	movs	r3, #0
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	ec41 0b10 	vmov	d0, r0, r1
 8009c2c:	b002      	add	sp, #8
 8009c2e:	4770      	bx	lr
 8009c30:	7ff00000 	.word	0x7ff00000

08009c34 <__b2d>:
 8009c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c38:	6906      	ldr	r6, [r0, #16]
 8009c3a:	f100 0814 	add.w	r8, r0, #20
 8009c3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009c42:	1f37      	subs	r7, r6, #4
 8009c44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f7ff fd53 	bl	80096f4 <__hi0bits>
 8009c4e:	f1c0 0320 	rsb	r3, r0, #32
 8009c52:	280a      	cmp	r0, #10
 8009c54:	600b      	str	r3, [r1, #0]
 8009c56:	491b      	ldr	r1, [pc, #108]	@ (8009cc4 <__b2d+0x90>)
 8009c58:	dc15      	bgt.n	8009c86 <__b2d+0x52>
 8009c5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c5e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009c62:	45b8      	cmp	r8, r7
 8009c64:	ea43 0501 	orr.w	r5, r3, r1
 8009c68:	bf34      	ite	cc
 8009c6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c6e:	2300      	movcs	r3, #0
 8009c70:	3015      	adds	r0, #21
 8009c72:	fa02 f000 	lsl.w	r0, r2, r0
 8009c76:	fa23 f30c 	lsr.w	r3, r3, ip
 8009c7a:	4303      	orrs	r3, r0
 8009c7c:	461c      	mov	r4, r3
 8009c7e:	ec45 4b10 	vmov	d0, r4, r5
 8009c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c86:	45b8      	cmp	r8, r7
 8009c88:	bf3a      	itte	cc
 8009c8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009c8e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009c92:	2300      	movcs	r3, #0
 8009c94:	380b      	subs	r0, #11
 8009c96:	d012      	beq.n	8009cbe <__b2d+0x8a>
 8009c98:	f1c0 0120 	rsb	r1, r0, #32
 8009c9c:	fa23 f401 	lsr.w	r4, r3, r1
 8009ca0:	4082      	lsls	r2, r0
 8009ca2:	4322      	orrs	r2, r4
 8009ca4:	4547      	cmp	r7, r8
 8009ca6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009caa:	bf8c      	ite	hi
 8009cac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009cb0:	2200      	movls	r2, #0
 8009cb2:	4083      	lsls	r3, r0
 8009cb4:	40ca      	lsrs	r2, r1
 8009cb6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	e7de      	b.n	8009c7c <__b2d+0x48>
 8009cbe:	ea42 0501 	orr.w	r5, r2, r1
 8009cc2:	e7db      	b.n	8009c7c <__b2d+0x48>
 8009cc4:	3ff00000 	.word	0x3ff00000

08009cc8 <__d2b>:
 8009cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ccc:	460f      	mov	r7, r1
 8009cce:	2101      	movs	r1, #1
 8009cd0:	ec59 8b10 	vmov	r8, r9, d0
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	f7ff fc1b 	bl	8009510 <_Balloc>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	b930      	cbnz	r0, 8009cec <__d2b+0x24>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	4b23      	ldr	r3, [pc, #140]	@ (8009d70 <__d2b+0xa8>)
 8009ce2:	4824      	ldr	r0, [pc, #144]	@ (8009d74 <__d2b+0xac>)
 8009ce4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ce8:	f001 fd1a 	bl	800b720 <__assert_func>
 8009cec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cf4:	b10d      	cbz	r5, 8009cfa <__d2b+0x32>
 8009cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	f1b8 0300 	subs.w	r3, r8, #0
 8009d00:	d023      	beq.n	8009d4a <__d2b+0x82>
 8009d02:	4668      	mov	r0, sp
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	f7ff fd14 	bl	8009732 <__lo0bits>
 8009d0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d0e:	b1d0      	cbz	r0, 8009d46 <__d2b+0x7e>
 8009d10:	f1c0 0320 	rsb	r3, r0, #32
 8009d14:	fa02 f303 	lsl.w	r3, r2, r3
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	40c2      	lsrs	r2, r0
 8009d1c:	6163      	str	r3, [r4, #20]
 8009d1e:	9201      	str	r2, [sp, #4]
 8009d20:	9b01      	ldr	r3, [sp, #4]
 8009d22:	61a3      	str	r3, [r4, #24]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bf0c      	ite	eq
 8009d28:	2201      	moveq	r2, #1
 8009d2a:	2202      	movne	r2, #2
 8009d2c:	6122      	str	r2, [r4, #16]
 8009d2e:	b1a5      	cbz	r5, 8009d5a <__d2b+0x92>
 8009d30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d34:	4405      	add	r5, r0
 8009d36:	603d      	str	r5, [r7, #0]
 8009d38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d3c:	6030      	str	r0, [r6, #0]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	b003      	add	sp, #12
 8009d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d46:	6161      	str	r1, [r4, #20]
 8009d48:	e7ea      	b.n	8009d20 <__d2b+0x58>
 8009d4a:	a801      	add	r0, sp, #4
 8009d4c:	f7ff fcf1 	bl	8009732 <__lo0bits>
 8009d50:	9b01      	ldr	r3, [sp, #4]
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	3020      	adds	r0, #32
 8009d56:	2201      	movs	r2, #1
 8009d58:	e7e8      	b.n	8009d2c <__d2b+0x64>
 8009d5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d62:	6038      	str	r0, [r7, #0]
 8009d64:	6918      	ldr	r0, [r3, #16]
 8009d66:	f7ff fcc5 	bl	80096f4 <__hi0bits>
 8009d6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d6e:	e7e5      	b.n	8009d3c <__d2b+0x74>
 8009d70:	0800ccaf 	.word	0x0800ccaf
 8009d74:	0800ccc0 	.word	0x0800ccc0

08009d78 <__ratio>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	e9cd 1000 	strd	r1, r0, [sp]
 8009d82:	a902      	add	r1, sp, #8
 8009d84:	f7ff ff56 	bl	8009c34 <__b2d>
 8009d88:	9800      	ldr	r0, [sp, #0]
 8009d8a:	a903      	add	r1, sp, #12
 8009d8c:	ec55 4b10 	vmov	r4, r5, d0
 8009d90:	f7ff ff50 	bl	8009c34 <__b2d>
 8009d94:	9b01      	ldr	r3, [sp, #4]
 8009d96:	6919      	ldr	r1, [r3, #16]
 8009d98:	9b00      	ldr	r3, [sp, #0]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	1ac9      	subs	r1, r1, r3
 8009d9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	ec5b ab10 	vmov	sl, fp, d0
 8009da8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfce      	itee	gt
 8009db0:	462a      	movgt	r2, r5
 8009db2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009db6:	465a      	movle	r2, fp
 8009db8:	462f      	mov	r7, r5
 8009dba:	46d9      	mov	r9, fp
 8009dbc:	bfcc      	ite	gt
 8009dbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009dc2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009dc6:	464b      	mov	r3, r9
 8009dc8:	4652      	mov	r2, sl
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fd3d 	bl	800084c <__aeabi_ddiv>
 8009dd2:	ec41 0b10 	vmov	d0, r0, r1
 8009dd6:	b005      	add	sp, #20
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ddc <__copybits>:
 8009ddc:	3901      	subs	r1, #1
 8009dde:	b570      	push	{r4, r5, r6, lr}
 8009de0:	1149      	asrs	r1, r1, #5
 8009de2:	6914      	ldr	r4, [r2, #16]
 8009de4:	3101      	adds	r1, #1
 8009de6:	f102 0314 	add.w	r3, r2, #20
 8009dea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009dee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009df2:	1f05      	subs	r5, r0, #4
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d30c      	bcc.n	8009e12 <__copybits+0x36>
 8009df8:	1aa3      	subs	r3, r4, r2
 8009dfa:	3b11      	subs	r3, #17
 8009dfc:	f023 0303 	bic.w	r3, r3, #3
 8009e00:	3211      	adds	r2, #17
 8009e02:	42a2      	cmp	r2, r4
 8009e04:	bf88      	it	hi
 8009e06:	2300      	movhi	r3, #0
 8009e08:	4418      	add	r0, r3
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	4288      	cmp	r0, r1
 8009e0e:	d305      	bcc.n	8009e1c <__copybits+0x40>
 8009e10:	bd70      	pop	{r4, r5, r6, pc}
 8009e12:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e16:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e1a:	e7eb      	b.n	8009df4 <__copybits+0x18>
 8009e1c:	f840 3b04 	str.w	r3, [r0], #4
 8009e20:	e7f4      	b.n	8009e0c <__copybits+0x30>

08009e22 <__any_on>:
 8009e22:	f100 0214 	add.w	r2, r0, #20
 8009e26:	6900      	ldr	r0, [r0, #16]
 8009e28:	114b      	asrs	r3, r1, #5
 8009e2a:	4298      	cmp	r0, r3
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	db11      	blt.n	8009e54 <__any_on+0x32>
 8009e30:	dd0a      	ble.n	8009e48 <__any_on+0x26>
 8009e32:	f011 011f 	ands.w	r1, r1, #31
 8009e36:	d007      	beq.n	8009e48 <__any_on+0x26>
 8009e38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e3c:	fa24 f001 	lsr.w	r0, r4, r1
 8009e40:	fa00 f101 	lsl.w	r1, r0, r1
 8009e44:	428c      	cmp	r4, r1
 8009e46:	d10b      	bne.n	8009e60 <__any_on+0x3e>
 8009e48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d803      	bhi.n	8009e58 <__any_on+0x36>
 8009e50:	2000      	movs	r0, #0
 8009e52:	bd10      	pop	{r4, pc}
 8009e54:	4603      	mov	r3, r0
 8009e56:	e7f7      	b.n	8009e48 <__any_on+0x26>
 8009e58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	d0f5      	beq.n	8009e4c <__any_on+0x2a>
 8009e60:	2001      	movs	r0, #1
 8009e62:	e7f6      	b.n	8009e52 <__any_on+0x30>

08009e64 <sulp>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	4604      	mov	r4, r0
 8009e68:	460d      	mov	r5, r1
 8009e6a:	ec45 4b10 	vmov	d0, r4, r5
 8009e6e:	4616      	mov	r6, r2
 8009e70:	f7ff feba 	bl	8009be8 <__ulp>
 8009e74:	ec51 0b10 	vmov	r0, r1, d0
 8009e78:	b17e      	cbz	r6, 8009e9a <sulp+0x36>
 8009e7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dd09      	ble.n	8009e9a <sulp+0x36>
 8009e86:	051b      	lsls	r3, r3, #20
 8009e88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009e8c:	2400      	movs	r4, #0
 8009e8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009e92:	4622      	mov	r2, r4
 8009e94:	462b      	mov	r3, r5
 8009e96:	f7f6 fbaf 	bl	80005f8 <__aeabi_dmul>
 8009e9a:	ec41 0b10 	vmov	d0, r0, r1
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}

08009ea0 <_strtod_l>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	b09f      	sub	sp, #124	@ 0x7c
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009eaa:	2200      	movs	r2, #0
 8009eac:	921a      	str	r2, [sp, #104]	@ 0x68
 8009eae:	9005      	str	r0, [sp, #20]
 8009eb0:	f04f 0a00 	mov.w	sl, #0
 8009eb4:	f04f 0b00 	mov.w	fp, #0
 8009eb8:	460a      	mov	r2, r1
 8009eba:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ebc:	7811      	ldrb	r1, [r2, #0]
 8009ebe:	292b      	cmp	r1, #43	@ 0x2b
 8009ec0:	d04a      	beq.n	8009f58 <_strtod_l+0xb8>
 8009ec2:	d838      	bhi.n	8009f36 <_strtod_l+0x96>
 8009ec4:	290d      	cmp	r1, #13
 8009ec6:	d832      	bhi.n	8009f2e <_strtod_l+0x8e>
 8009ec8:	2908      	cmp	r1, #8
 8009eca:	d832      	bhi.n	8009f32 <_strtod_l+0x92>
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d03b      	beq.n	8009f48 <_strtod_l+0xa8>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ed4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009ed6:	782a      	ldrb	r2, [r5, #0]
 8009ed8:	2a30      	cmp	r2, #48	@ 0x30
 8009eda:	f040 80b2 	bne.w	800a042 <_strtod_l+0x1a2>
 8009ede:	786a      	ldrb	r2, [r5, #1]
 8009ee0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ee4:	2a58      	cmp	r2, #88	@ 0x58
 8009ee6:	d16e      	bne.n	8009fc6 <_strtod_l+0x126>
 8009ee8:	9302      	str	r3, [sp, #8]
 8009eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	4a8f      	ldr	r2, [pc, #572]	@ (800a130 <_strtod_l+0x290>)
 8009ef4:	9805      	ldr	r0, [sp, #20]
 8009ef6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ef8:	a919      	add	r1, sp, #100	@ 0x64
 8009efa:	f001 fcab 	bl	800b854 <__gethex>
 8009efe:	f010 060f 	ands.w	r6, r0, #15
 8009f02:	4604      	mov	r4, r0
 8009f04:	d005      	beq.n	8009f12 <_strtod_l+0x72>
 8009f06:	2e06      	cmp	r6, #6
 8009f08:	d128      	bne.n	8009f5c <_strtod_l+0xbc>
 8009f0a:	3501      	adds	r5, #1
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009f10:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f040 858e 	bne.w	800aa36 <_strtod_l+0xb96>
 8009f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f1c:	b1cb      	cbz	r3, 8009f52 <_strtod_l+0xb2>
 8009f1e:	4652      	mov	r2, sl
 8009f20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009f24:	ec43 2b10 	vmov	d0, r2, r3
 8009f28:	b01f      	add	sp, #124	@ 0x7c
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	2920      	cmp	r1, #32
 8009f30:	d1ce      	bne.n	8009ed0 <_strtod_l+0x30>
 8009f32:	3201      	adds	r2, #1
 8009f34:	e7c1      	b.n	8009eba <_strtod_l+0x1a>
 8009f36:	292d      	cmp	r1, #45	@ 0x2d
 8009f38:	d1ca      	bne.n	8009ed0 <_strtod_l+0x30>
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	910e      	str	r1, [sp, #56]	@ 0x38
 8009f3e:	1c51      	adds	r1, r2, #1
 8009f40:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f42:	7852      	ldrb	r2, [r2, #1]
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	d1c5      	bne.n	8009ed4 <_strtod_l+0x34>
 8009f48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 8570 	bne.w	800aa32 <_strtod_l+0xb92>
 8009f52:	4652      	mov	r2, sl
 8009f54:	465b      	mov	r3, fp
 8009f56:	e7e5      	b.n	8009f24 <_strtod_l+0x84>
 8009f58:	2100      	movs	r1, #0
 8009f5a:	e7ef      	b.n	8009f3c <_strtod_l+0x9c>
 8009f5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f5e:	b13a      	cbz	r2, 8009f70 <_strtod_l+0xd0>
 8009f60:	2135      	movs	r1, #53	@ 0x35
 8009f62:	a81c      	add	r0, sp, #112	@ 0x70
 8009f64:	f7ff ff3a 	bl	8009ddc <__copybits>
 8009f68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f6a:	9805      	ldr	r0, [sp, #20]
 8009f6c:	f7ff fb10 	bl	8009590 <_Bfree>
 8009f70:	3e01      	subs	r6, #1
 8009f72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f74:	2e04      	cmp	r6, #4
 8009f76:	d806      	bhi.n	8009f86 <_strtod_l+0xe6>
 8009f78:	e8df f006 	tbb	[pc, r6]
 8009f7c:	201d0314 	.word	0x201d0314
 8009f80:	14          	.byte	0x14
 8009f81:	00          	.byte	0x00
 8009f82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009f86:	05e1      	lsls	r1, r4, #23
 8009f88:	bf48      	it	mi
 8009f8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009f8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f92:	0d1b      	lsrs	r3, r3, #20
 8009f94:	051b      	lsls	r3, r3, #20
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1bb      	bne.n	8009f12 <_strtod_l+0x72>
 8009f9a:	f7fe fb1d 	bl	80085d8 <__errno>
 8009f9e:	2322      	movs	r3, #34	@ 0x22
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	e7b6      	b.n	8009f12 <_strtod_l+0x72>
 8009fa4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009fa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009fac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009fb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009fb4:	e7e7      	b.n	8009f86 <_strtod_l+0xe6>
 8009fb6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a138 <_strtod_l+0x298>
 8009fba:	e7e4      	b.n	8009f86 <_strtod_l+0xe6>
 8009fbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009fc0:	f04f 3aff 	mov.w	sl, #4294967295
 8009fc4:	e7df      	b.n	8009f86 <_strtod_l+0xe6>
 8009fc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fcc:	785b      	ldrb	r3, [r3, #1]
 8009fce:	2b30      	cmp	r3, #48	@ 0x30
 8009fd0:	d0f9      	beq.n	8009fc6 <_strtod_l+0x126>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d09d      	beq.n	8009f12 <_strtod_l+0x72>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	2700      	movs	r7, #0
 8009fda:	9308      	str	r3, [sp, #32]
 8009fdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fde:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fe0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009fe2:	46b9      	mov	r9, r7
 8009fe4:	220a      	movs	r2, #10
 8009fe6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009fe8:	7805      	ldrb	r5, [r0, #0]
 8009fea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009fee:	b2d9      	uxtb	r1, r3
 8009ff0:	2909      	cmp	r1, #9
 8009ff2:	d928      	bls.n	800a046 <_strtod_l+0x1a6>
 8009ff4:	494f      	ldr	r1, [pc, #316]	@ (800a134 <_strtod_l+0x294>)
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f001 fb67 	bl	800b6ca <strncmp>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d032      	beq.n	800a066 <_strtod_l+0x1c6>
 800a000:	2000      	movs	r0, #0
 800a002:	462a      	mov	r2, r5
 800a004:	900a      	str	r0, [sp, #40]	@ 0x28
 800a006:	464d      	mov	r5, r9
 800a008:	4603      	mov	r3, r0
 800a00a:	2a65      	cmp	r2, #101	@ 0x65
 800a00c:	d001      	beq.n	800a012 <_strtod_l+0x172>
 800a00e:	2a45      	cmp	r2, #69	@ 0x45
 800a010:	d114      	bne.n	800a03c <_strtod_l+0x19c>
 800a012:	b91d      	cbnz	r5, 800a01c <_strtod_l+0x17c>
 800a014:	9a08      	ldr	r2, [sp, #32]
 800a016:	4302      	orrs	r2, r0
 800a018:	d096      	beq.n	8009f48 <_strtod_l+0xa8>
 800a01a:	2500      	movs	r5, #0
 800a01c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a01e:	1c62      	adds	r2, r4, #1
 800a020:	9219      	str	r2, [sp, #100]	@ 0x64
 800a022:	7862      	ldrb	r2, [r4, #1]
 800a024:	2a2b      	cmp	r2, #43	@ 0x2b
 800a026:	d07a      	beq.n	800a11e <_strtod_l+0x27e>
 800a028:	2a2d      	cmp	r2, #45	@ 0x2d
 800a02a:	d07e      	beq.n	800a12a <_strtod_l+0x28a>
 800a02c:	f04f 0c00 	mov.w	ip, #0
 800a030:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a034:	2909      	cmp	r1, #9
 800a036:	f240 8085 	bls.w	800a144 <_strtod_l+0x2a4>
 800a03a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a03c:	f04f 0800 	mov.w	r8, #0
 800a040:	e0a5      	b.n	800a18e <_strtod_l+0x2ee>
 800a042:	2300      	movs	r3, #0
 800a044:	e7c8      	b.n	8009fd8 <_strtod_l+0x138>
 800a046:	f1b9 0f08 	cmp.w	r9, #8
 800a04a:	bfd8      	it	le
 800a04c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a04e:	f100 0001 	add.w	r0, r0, #1
 800a052:	bfda      	itte	le
 800a054:	fb02 3301 	mlale	r3, r2, r1, r3
 800a058:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a05a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a05e:	f109 0901 	add.w	r9, r9, #1
 800a062:	9019      	str	r0, [sp, #100]	@ 0x64
 800a064:	e7bf      	b.n	8009fe6 <_strtod_l+0x146>
 800a066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a06c:	785a      	ldrb	r2, [r3, #1]
 800a06e:	f1b9 0f00 	cmp.w	r9, #0
 800a072:	d03b      	beq.n	800a0ec <_strtod_l+0x24c>
 800a074:	900a      	str	r0, [sp, #40]	@ 0x28
 800a076:	464d      	mov	r5, r9
 800a078:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a07c:	2b09      	cmp	r3, #9
 800a07e:	d912      	bls.n	800a0a6 <_strtod_l+0x206>
 800a080:	2301      	movs	r3, #1
 800a082:	e7c2      	b.n	800a00a <_strtod_l+0x16a>
 800a084:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	9219      	str	r2, [sp, #100]	@ 0x64
 800a08a:	785a      	ldrb	r2, [r3, #1]
 800a08c:	3001      	adds	r0, #1
 800a08e:	2a30      	cmp	r2, #48	@ 0x30
 800a090:	d0f8      	beq.n	800a084 <_strtod_l+0x1e4>
 800a092:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a096:	2b08      	cmp	r3, #8
 800a098:	f200 84d2 	bhi.w	800aa40 <_strtod_l+0xba0>
 800a09c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a09e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	3a30      	subs	r2, #48	@ 0x30
 800a0a8:	f100 0301 	add.w	r3, r0, #1
 800a0ac:	d018      	beq.n	800a0e0 <_strtod_l+0x240>
 800a0ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a0b0:	4419      	add	r1, r3
 800a0b2:	910a      	str	r1, [sp, #40]	@ 0x28
 800a0b4:	462e      	mov	r6, r5
 800a0b6:	f04f 0e0a 	mov.w	lr, #10
 800a0ba:	1c71      	adds	r1, r6, #1
 800a0bc:	eba1 0c05 	sub.w	ip, r1, r5
 800a0c0:	4563      	cmp	r3, ip
 800a0c2:	dc15      	bgt.n	800a0f0 <_strtod_l+0x250>
 800a0c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a0c8:	182b      	adds	r3, r5, r0
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	f105 0501 	add.w	r5, r5, #1
 800a0d0:	4405      	add	r5, r0
 800a0d2:	dc1a      	bgt.n	800a10a <_strtod_l+0x26a>
 800a0d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0d6:	230a      	movs	r3, #10
 800a0d8:	fb03 2301 	mla	r3, r3, r1, r2
 800a0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0e2:	1c51      	adds	r1, r2, #1
 800a0e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a0e6:	7852      	ldrb	r2, [r2, #1]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	e7c5      	b.n	800a078 <_strtod_l+0x1d8>
 800a0ec:	4648      	mov	r0, r9
 800a0ee:	e7ce      	b.n	800a08e <_strtod_l+0x1ee>
 800a0f0:	2e08      	cmp	r6, #8
 800a0f2:	dc05      	bgt.n	800a100 <_strtod_l+0x260>
 800a0f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a0f6:	fb0e f606 	mul.w	r6, lr, r6
 800a0fa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a0fc:	460e      	mov	r6, r1
 800a0fe:	e7dc      	b.n	800a0ba <_strtod_l+0x21a>
 800a100:	2910      	cmp	r1, #16
 800a102:	bfd8      	it	le
 800a104:	fb0e f707 	mulle.w	r7, lr, r7
 800a108:	e7f8      	b.n	800a0fc <_strtod_l+0x25c>
 800a10a:	2b0f      	cmp	r3, #15
 800a10c:	bfdc      	itt	le
 800a10e:	230a      	movle	r3, #10
 800a110:	fb03 2707 	mlale	r7, r3, r7, r2
 800a114:	e7e3      	b.n	800a0de <_strtod_l+0x23e>
 800a116:	2300      	movs	r3, #0
 800a118:	930a      	str	r3, [sp, #40]	@ 0x28
 800a11a:	2301      	movs	r3, #1
 800a11c:	e77a      	b.n	800a014 <_strtod_l+0x174>
 800a11e:	f04f 0c00 	mov.w	ip, #0
 800a122:	1ca2      	adds	r2, r4, #2
 800a124:	9219      	str	r2, [sp, #100]	@ 0x64
 800a126:	78a2      	ldrb	r2, [r4, #2]
 800a128:	e782      	b.n	800a030 <_strtod_l+0x190>
 800a12a:	f04f 0c01 	mov.w	ip, #1
 800a12e:	e7f8      	b.n	800a122 <_strtod_l+0x282>
 800a130:	0800cefc 	.word	0x0800cefc
 800a134:	0800cd19 	.word	0x0800cd19
 800a138:	7ff00000 	.word	0x7ff00000
 800a13c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a13e:	1c51      	adds	r1, r2, #1
 800a140:	9119      	str	r1, [sp, #100]	@ 0x64
 800a142:	7852      	ldrb	r2, [r2, #1]
 800a144:	2a30      	cmp	r2, #48	@ 0x30
 800a146:	d0f9      	beq.n	800a13c <_strtod_l+0x29c>
 800a148:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a14c:	2908      	cmp	r1, #8
 800a14e:	f63f af75 	bhi.w	800a03c <_strtod_l+0x19c>
 800a152:	3a30      	subs	r2, #48	@ 0x30
 800a154:	9209      	str	r2, [sp, #36]	@ 0x24
 800a156:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a158:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a15a:	f04f 080a 	mov.w	r8, #10
 800a15e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a160:	1c56      	adds	r6, r2, #1
 800a162:	9619      	str	r6, [sp, #100]	@ 0x64
 800a164:	7852      	ldrb	r2, [r2, #1]
 800a166:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a16a:	f1be 0f09 	cmp.w	lr, #9
 800a16e:	d939      	bls.n	800a1e4 <_strtod_l+0x344>
 800a170:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a172:	1a76      	subs	r6, r6, r1
 800a174:	2e08      	cmp	r6, #8
 800a176:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a17a:	dc03      	bgt.n	800a184 <_strtod_l+0x2e4>
 800a17c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a17e:	4588      	cmp	r8, r1
 800a180:	bfa8      	it	ge
 800a182:	4688      	movge	r8, r1
 800a184:	f1bc 0f00 	cmp.w	ip, #0
 800a188:	d001      	beq.n	800a18e <_strtod_l+0x2ee>
 800a18a:	f1c8 0800 	rsb	r8, r8, #0
 800a18e:	2d00      	cmp	r5, #0
 800a190:	d14e      	bne.n	800a230 <_strtod_l+0x390>
 800a192:	9908      	ldr	r1, [sp, #32]
 800a194:	4308      	orrs	r0, r1
 800a196:	f47f aebc 	bne.w	8009f12 <_strtod_l+0x72>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f47f aed4 	bne.w	8009f48 <_strtod_l+0xa8>
 800a1a0:	2a69      	cmp	r2, #105	@ 0x69
 800a1a2:	d028      	beq.n	800a1f6 <_strtod_l+0x356>
 800a1a4:	dc25      	bgt.n	800a1f2 <_strtod_l+0x352>
 800a1a6:	2a49      	cmp	r2, #73	@ 0x49
 800a1a8:	d025      	beq.n	800a1f6 <_strtod_l+0x356>
 800a1aa:	2a4e      	cmp	r2, #78	@ 0x4e
 800a1ac:	f47f aecc 	bne.w	8009f48 <_strtod_l+0xa8>
 800a1b0:	499a      	ldr	r1, [pc, #616]	@ (800a41c <_strtod_l+0x57c>)
 800a1b2:	a819      	add	r0, sp, #100	@ 0x64
 800a1b4:	f001 fd70 	bl	800bc98 <__match>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	f43f aec5 	beq.w	8009f48 <_strtod_l+0xa8>
 800a1be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b28      	cmp	r3, #40	@ 0x28
 800a1c4:	d12e      	bne.n	800a224 <_strtod_l+0x384>
 800a1c6:	4996      	ldr	r1, [pc, #600]	@ (800a420 <_strtod_l+0x580>)
 800a1c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a1ca:	a819      	add	r0, sp, #100	@ 0x64
 800a1cc:	f001 fd78 	bl	800bcc0 <__hexnan>
 800a1d0:	2805      	cmp	r0, #5
 800a1d2:	d127      	bne.n	800a224 <_strtod_l+0x384>
 800a1d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a1d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a1da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a1de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a1e2:	e696      	b.n	8009f12 <_strtod_l+0x72>
 800a1e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1e6:	fb08 2101 	mla	r1, r8, r1, r2
 800a1ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1f0:	e7b5      	b.n	800a15e <_strtod_l+0x2be>
 800a1f2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a1f4:	e7da      	b.n	800a1ac <_strtod_l+0x30c>
 800a1f6:	498b      	ldr	r1, [pc, #556]	@ (800a424 <_strtod_l+0x584>)
 800a1f8:	a819      	add	r0, sp, #100	@ 0x64
 800a1fa:	f001 fd4d 	bl	800bc98 <__match>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f aea2 	beq.w	8009f48 <_strtod_l+0xa8>
 800a204:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a206:	4988      	ldr	r1, [pc, #544]	@ (800a428 <_strtod_l+0x588>)
 800a208:	3b01      	subs	r3, #1
 800a20a:	a819      	add	r0, sp, #100	@ 0x64
 800a20c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a20e:	f001 fd43 	bl	800bc98 <__match>
 800a212:	b910      	cbnz	r0, 800a21a <_strtod_l+0x37a>
 800a214:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a216:	3301      	adds	r3, #1
 800a218:	9319      	str	r3, [sp, #100]	@ 0x64
 800a21a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a438 <_strtod_l+0x598>
 800a21e:	f04f 0a00 	mov.w	sl, #0
 800a222:	e676      	b.n	8009f12 <_strtod_l+0x72>
 800a224:	4881      	ldr	r0, [pc, #516]	@ (800a42c <_strtod_l+0x58c>)
 800a226:	f001 fa73 	bl	800b710 <nan>
 800a22a:	ec5b ab10 	vmov	sl, fp, d0
 800a22e:	e670      	b.n	8009f12 <_strtod_l+0x72>
 800a230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a232:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a234:	eba8 0303 	sub.w	r3, r8, r3
 800a238:	f1b9 0f00 	cmp.w	r9, #0
 800a23c:	bf08      	it	eq
 800a23e:	46a9      	moveq	r9, r5
 800a240:	2d10      	cmp	r5, #16
 800a242:	9309      	str	r3, [sp, #36]	@ 0x24
 800a244:	462c      	mov	r4, r5
 800a246:	bfa8      	it	ge
 800a248:	2410      	movge	r4, #16
 800a24a:	f7f6 f95b 	bl	8000504 <__aeabi_ui2d>
 800a24e:	2d09      	cmp	r5, #9
 800a250:	4682      	mov	sl, r0
 800a252:	468b      	mov	fp, r1
 800a254:	dc13      	bgt.n	800a27e <_strtod_l+0x3de>
 800a256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f43f ae5a 	beq.w	8009f12 <_strtod_l+0x72>
 800a25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a260:	dd78      	ble.n	800a354 <_strtod_l+0x4b4>
 800a262:	2b16      	cmp	r3, #22
 800a264:	dc5f      	bgt.n	800a326 <_strtod_l+0x486>
 800a266:	4972      	ldr	r1, [pc, #456]	@ (800a430 <_strtod_l+0x590>)
 800a268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a270:	4652      	mov	r2, sl
 800a272:	465b      	mov	r3, fp
 800a274:	f7f6 f9c0 	bl	80005f8 <__aeabi_dmul>
 800a278:	4682      	mov	sl, r0
 800a27a:	468b      	mov	fp, r1
 800a27c:	e649      	b.n	8009f12 <_strtod_l+0x72>
 800a27e:	4b6c      	ldr	r3, [pc, #432]	@ (800a430 <_strtod_l+0x590>)
 800a280:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a284:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a288:	f7f6 f9b6 	bl	80005f8 <__aeabi_dmul>
 800a28c:	4682      	mov	sl, r0
 800a28e:	4638      	mov	r0, r7
 800a290:	468b      	mov	fp, r1
 800a292:	f7f6 f937 	bl	8000504 <__aeabi_ui2d>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	4650      	mov	r0, sl
 800a29c:	4659      	mov	r1, fp
 800a29e:	f7f5 fff5 	bl	800028c <__adddf3>
 800a2a2:	2d0f      	cmp	r5, #15
 800a2a4:	4682      	mov	sl, r0
 800a2a6:	468b      	mov	fp, r1
 800a2a8:	ddd5      	ble.n	800a256 <_strtod_l+0x3b6>
 800a2aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ac:	1b2c      	subs	r4, r5, r4
 800a2ae:	441c      	add	r4, r3
 800a2b0:	2c00      	cmp	r4, #0
 800a2b2:	f340 8093 	ble.w	800a3dc <_strtod_l+0x53c>
 800a2b6:	f014 030f 	ands.w	r3, r4, #15
 800a2ba:	d00a      	beq.n	800a2d2 <_strtod_l+0x432>
 800a2bc:	495c      	ldr	r1, [pc, #368]	@ (800a430 <_strtod_l+0x590>)
 800a2be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ca:	f7f6 f995 	bl	80005f8 <__aeabi_dmul>
 800a2ce:	4682      	mov	sl, r0
 800a2d0:	468b      	mov	fp, r1
 800a2d2:	f034 040f 	bics.w	r4, r4, #15
 800a2d6:	d073      	beq.n	800a3c0 <_strtod_l+0x520>
 800a2d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a2dc:	dd49      	ble.n	800a372 <_strtod_l+0x4d2>
 800a2de:	2400      	movs	r4, #0
 800a2e0:	46a0      	mov	r8, r4
 800a2e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a2e4:	46a1      	mov	r9, r4
 800a2e6:	9a05      	ldr	r2, [sp, #20]
 800a2e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a438 <_strtod_l+0x598>
 800a2ec:	2322      	movs	r3, #34	@ 0x22
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	f04f 0a00 	mov.w	sl, #0
 800a2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f43f ae0b 	beq.w	8009f12 <_strtod_l+0x72>
 800a2fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2fe:	9805      	ldr	r0, [sp, #20]
 800a300:	f7ff f946 	bl	8009590 <_Bfree>
 800a304:	9805      	ldr	r0, [sp, #20]
 800a306:	4649      	mov	r1, r9
 800a308:	f7ff f942 	bl	8009590 <_Bfree>
 800a30c:	9805      	ldr	r0, [sp, #20]
 800a30e:	4641      	mov	r1, r8
 800a310:	f7ff f93e 	bl	8009590 <_Bfree>
 800a314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a316:	9805      	ldr	r0, [sp, #20]
 800a318:	f7ff f93a 	bl	8009590 <_Bfree>
 800a31c:	9805      	ldr	r0, [sp, #20]
 800a31e:	4621      	mov	r1, r4
 800a320:	f7ff f936 	bl	8009590 <_Bfree>
 800a324:	e5f5      	b.n	8009f12 <_strtod_l+0x72>
 800a326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a328:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a32c:	4293      	cmp	r3, r2
 800a32e:	dbbc      	blt.n	800a2aa <_strtod_l+0x40a>
 800a330:	4c3f      	ldr	r4, [pc, #252]	@ (800a430 <_strtod_l+0x590>)
 800a332:	f1c5 050f 	rsb	r5, r5, #15
 800a336:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a33a:	4652      	mov	r2, sl
 800a33c:	465b      	mov	r3, fp
 800a33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a342:	f7f6 f959 	bl	80005f8 <__aeabi_dmul>
 800a346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a348:	1b5d      	subs	r5, r3, r5
 800a34a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a34e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a352:	e78f      	b.n	800a274 <_strtod_l+0x3d4>
 800a354:	3316      	adds	r3, #22
 800a356:	dba8      	blt.n	800a2aa <_strtod_l+0x40a>
 800a358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a35a:	eba3 0808 	sub.w	r8, r3, r8
 800a35e:	4b34      	ldr	r3, [pc, #208]	@ (800a430 <_strtod_l+0x590>)
 800a360:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a364:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a368:	4650      	mov	r0, sl
 800a36a:	4659      	mov	r1, fp
 800a36c:	f7f6 fa6e 	bl	800084c <__aeabi_ddiv>
 800a370:	e782      	b.n	800a278 <_strtod_l+0x3d8>
 800a372:	2300      	movs	r3, #0
 800a374:	4f2f      	ldr	r7, [pc, #188]	@ (800a434 <_strtod_l+0x594>)
 800a376:	1124      	asrs	r4, r4, #4
 800a378:	4650      	mov	r0, sl
 800a37a:	4659      	mov	r1, fp
 800a37c:	461e      	mov	r6, r3
 800a37e:	2c01      	cmp	r4, #1
 800a380:	dc21      	bgt.n	800a3c6 <_strtod_l+0x526>
 800a382:	b10b      	cbz	r3, 800a388 <_strtod_l+0x4e8>
 800a384:	4682      	mov	sl, r0
 800a386:	468b      	mov	fp, r1
 800a388:	492a      	ldr	r1, [pc, #168]	@ (800a434 <_strtod_l+0x594>)
 800a38a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a38e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a392:	4652      	mov	r2, sl
 800a394:	465b      	mov	r3, fp
 800a396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39a:	f7f6 f92d 	bl	80005f8 <__aeabi_dmul>
 800a39e:	4b26      	ldr	r3, [pc, #152]	@ (800a438 <_strtod_l+0x598>)
 800a3a0:	460a      	mov	r2, r1
 800a3a2:	400b      	ands	r3, r1
 800a3a4:	4925      	ldr	r1, [pc, #148]	@ (800a43c <_strtod_l+0x59c>)
 800a3a6:	428b      	cmp	r3, r1
 800a3a8:	4682      	mov	sl, r0
 800a3aa:	d898      	bhi.n	800a2de <_strtod_l+0x43e>
 800a3ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a3b0:	428b      	cmp	r3, r1
 800a3b2:	bf86      	itte	hi
 800a3b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a440 <_strtod_l+0x5a0>
 800a3b8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a3bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	9308      	str	r3, [sp, #32]
 800a3c4:	e076      	b.n	800a4b4 <_strtod_l+0x614>
 800a3c6:	07e2      	lsls	r2, r4, #31
 800a3c8:	d504      	bpl.n	800a3d4 <_strtod_l+0x534>
 800a3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ce:	f7f6 f913 	bl	80005f8 <__aeabi_dmul>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	1064      	asrs	r4, r4, #1
 800a3d8:	3708      	adds	r7, #8
 800a3da:	e7d0      	b.n	800a37e <_strtod_l+0x4de>
 800a3dc:	d0f0      	beq.n	800a3c0 <_strtod_l+0x520>
 800a3de:	4264      	negs	r4, r4
 800a3e0:	f014 020f 	ands.w	r2, r4, #15
 800a3e4:	d00a      	beq.n	800a3fc <_strtod_l+0x55c>
 800a3e6:	4b12      	ldr	r3, [pc, #72]	@ (800a430 <_strtod_l+0x590>)
 800a3e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ec:	4650      	mov	r0, sl
 800a3ee:	4659      	mov	r1, fp
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f6 fa2a 	bl	800084c <__aeabi_ddiv>
 800a3f8:	4682      	mov	sl, r0
 800a3fa:	468b      	mov	fp, r1
 800a3fc:	1124      	asrs	r4, r4, #4
 800a3fe:	d0df      	beq.n	800a3c0 <_strtod_l+0x520>
 800a400:	2c1f      	cmp	r4, #31
 800a402:	dd1f      	ble.n	800a444 <_strtod_l+0x5a4>
 800a404:	2400      	movs	r4, #0
 800a406:	46a0      	mov	r8, r4
 800a408:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a40a:	46a1      	mov	r9, r4
 800a40c:	9a05      	ldr	r2, [sp, #20]
 800a40e:	2322      	movs	r3, #34	@ 0x22
 800a410:	f04f 0a00 	mov.w	sl, #0
 800a414:	f04f 0b00 	mov.w	fp, #0
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	e76b      	b.n	800a2f4 <_strtod_l+0x454>
 800a41c:	0800cc09 	.word	0x0800cc09
 800a420:	0800cee8 	.word	0x0800cee8
 800a424:	0800cc01 	.word	0x0800cc01
 800a428:	0800cc36 	.word	0x0800cc36
 800a42c:	0800cd8a 	.word	0x0800cd8a
 800a430:	0800ce20 	.word	0x0800ce20
 800a434:	0800cdf8 	.word	0x0800cdf8
 800a438:	7ff00000 	.word	0x7ff00000
 800a43c:	7ca00000 	.word	0x7ca00000
 800a440:	7fefffff 	.word	0x7fefffff
 800a444:	f014 0310 	ands.w	r3, r4, #16
 800a448:	bf18      	it	ne
 800a44a:	236a      	movne	r3, #106	@ 0x6a
 800a44c:	4ea9      	ldr	r6, [pc, #676]	@ (800a6f4 <_strtod_l+0x854>)
 800a44e:	9308      	str	r3, [sp, #32]
 800a450:	4650      	mov	r0, sl
 800a452:	4659      	mov	r1, fp
 800a454:	2300      	movs	r3, #0
 800a456:	07e7      	lsls	r7, r4, #31
 800a458:	d504      	bpl.n	800a464 <_strtod_l+0x5c4>
 800a45a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a45e:	f7f6 f8cb 	bl	80005f8 <__aeabi_dmul>
 800a462:	2301      	movs	r3, #1
 800a464:	1064      	asrs	r4, r4, #1
 800a466:	f106 0608 	add.w	r6, r6, #8
 800a46a:	d1f4      	bne.n	800a456 <_strtod_l+0x5b6>
 800a46c:	b10b      	cbz	r3, 800a472 <_strtod_l+0x5d2>
 800a46e:	4682      	mov	sl, r0
 800a470:	468b      	mov	fp, r1
 800a472:	9b08      	ldr	r3, [sp, #32]
 800a474:	b1b3      	cbz	r3, 800a4a4 <_strtod_l+0x604>
 800a476:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a47a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a47e:	2b00      	cmp	r3, #0
 800a480:	4659      	mov	r1, fp
 800a482:	dd0f      	ble.n	800a4a4 <_strtod_l+0x604>
 800a484:	2b1f      	cmp	r3, #31
 800a486:	dd56      	ble.n	800a536 <_strtod_l+0x696>
 800a488:	2b34      	cmp	r3, #52	@ 0x34
 800a48a:	bfde      	ittt	le
 800a48c:	f04f 33ff 	movle.w	r3, #4294967295
 800a490:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a494:	4093      	lslle	r3, r2
 800a496:	f04f 0a00 	mov.w	sl, #0
 800a49a:	bfcc      	ite	gt
 800a49c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a4a0:	ea03 0b01 	andle.w	fp, r3, r1
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	f7f6 fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d1a7      	bne.n	800a404 <_strtod_l+0x564>
 800a4b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a4ba:	9805      	ldr	r0, [sp, #20]
 800a4bc:	462b      	mov	r3, r5
 800a4be:	464a      	mov	r2, r9
 800a4c0:	f7ff f8ce 	bl	8009660 <__s2b>
 800a4c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	f43f af09 	beq.w	800a2de <_strtod_l+0x43e>
 800a4cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d0:	2a00      	cmp	r2, #0
 800a4d2:	eba3 0308 	sub.w	r3, r3, r8
 800a4d6:	bfa8      	it	ge
 800a4d8:	2300      	movge	r3, #0
 800a4da:	9312      	str	r3, [sp, #72]	@ 0x48
 800a4dc:	2400      	movs	r4, #0
 800a4de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4e2:	9316      	str	r3, [sp, #88]	@ 0x58
 800a4e4:	46a0      	mov	r8, r4
 800a4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e8:	9805      	ldr	r0, [sp, #20]
 800a4ea:	6859      	ldr	r1, [r3, #4]
 800a4ec:	f7ff f810 	bl	8009510 <_Balloc>
 800a4f0:	4681      	mov	r9, r0
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f43f aef7 	beq.w	800a2e6 <_strtod_l+0x446>
 800a4f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	3202      	adds	r2, #2
 800a4fe:	f103 010c 	add.w	r1, r3, #12
 800a502:	0092      	lsls	r2, r2, #2
 800a504:	300c      	adds	r0, #12
 800a506:	f7fe f894 	bl	8008632 <memcpy>
 800a50a:	ec4b ab10 	vmov	d0, sl, fp
 800a50e:	9805      	ldr	r0, [sp, #20]
 800a510:	aa1c      	add	r2, sp, #112	@ 0x70
 800a512:	a91b      	add	r1, sp, #108	@ 0x6c
 800a514:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a518:	f7ff fbd6 	bl	8009cc8 <__d2b>
 800a51c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f aee1 	beq.w	800a2e6 <_strtod_l+0x446>
 800a524:	9805      	ldr	r0, [sp, #20]
 800a526:	2101      	movs	r1, #1
 800a528:	f7ff f930 	bl	800978c <__i2b>
 800a52c:	4680      	mov	r8, r0
 800a52e:	b948      	cbnz	r0, 800a544 <_strtod_l+0x6a4>
 800a530:	f04f 0800 	mov.w	r8, #0
 800a534:	e6d7      	b.n	800a2e6 <_strtod_l+0x446>
 800a536:	f04f 32ff 	mov.w	r2, #4294967295
 800a53a:	fa02 f303 	lsl.w	r3, r2, r3
 800a53e:	ea03 0a0a 	and.w	sl, r3, sl
 800a542:	e7af      	b.n	800a4a4 <_strtod_l+0x604>
 800a544:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a546:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a548:	2d00      	cmp	r5, #0
 800a54a:	bfab      	itete	ge
 800a54c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a54e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a550:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a552:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a554:	bfac      	ite	ge
 800a556:	18ef      	addge	r7, r5, r3
 800a558:	1b5e      	sublt	r6, r3, r5
 800a55a:	9b08      	ldr	r3, [sp, #32]
 800a55c:	1aed      	subs	r5, r5, r3
 800a55e:	4415      	add	r5, r2
 800a560:	4b65      	ldr	r3, [pc, #404]	@ (800a6f8 <_strtod_l+0x858>)
 800a562:	3d01      	subs	r5, #1
 800a564:	429d      	cmp	r5, r3
 800a566:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a56a:	da50      	bge.n	800a60e <_strtod_l+0x76e>
 800a56c:	1b5b      	subs	r3, r3, r5
 800a56e:	2b1f      	cmp	r3, #31
 800a570:	eba2 0203 	sub.w	r2, r2, r3
 800a574:	f04f 0101 	mov.w	r1, #1
 800a578:	dc3d      	bgt.n	800a5f6 <_strtod_l+0x756>
 800a57a:	fa01 f303 	lsl.w	r3, r1, r3
 800a57e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a580:	2300      	movs	r3, #0
 800a582:	9310      	str	r3, [sp, #64]	@ 0x40
 800a584:	18bd      	adds	r5, r7, r2
 800a586:	9b08      	ldr	r3, [sp, #32]
 800a588:	42af      	cmp	r7, r5
 800a58a:	4416      	add	r6, r2
 800a58c:	441e      	add	r6, r3
 800a58e:	463b      	mov	r3, r7
 800a590:	bfa8      	it	ge
 800a592:	462b      	movge	r3, r5
 800a594:	42b3      	cmp	r3, r6
 800a596:	bfa8      	it	ge
 800a598:	4633      	movge	r3, r6
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bfc2      	ittt	gt
 800a59e:	1aed      	subgt	r5, r5, r3
 800a5a0:	1af6      	subgt	r6, r6, r3
 800a5a2:	1aff      	subgt	r7, r7, r3
 800a5a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dd16      	ble.n	800a5d8 <_strtod_l+0x738>
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	9805      	ldr	r0, [sp, #20]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f7ff f9a4 	bl	80098fc <__pow5mult>
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d0ba      	beq.n	800a530 <_strtod_l+0x690>
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a5be:	9805      	ldr	r0, [sp, #20]
 800a5c0:	f7ff f8fa 	bl	80097b8 <__multiply>
 800a5c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f43f ae8d 	beq.w	800a2e6 <_strtod_l+0x446>
 800a5cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ce:	9805      	ldr	r0, [sp, #20]
 800a5d0:	f7fe ffde 	bl	8009590 <_Bfree>
 800a5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	dc1d      	bgt.n	800a618 <_strtod_l+0x778>
 800a5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	dd23      	ble.n	800a62a <_strtod_l+0x78a>
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a5e6:	9805      	ldr	r0, [sp, #20]
 800a5e8:	f7ff f988 	bl	80098fc <__pow5mult>
 800a5ec:	4681      	mov	r9, r0
 800a5ee:	b9e0      	cbnz	r0, 800a62a <_strtod_l+0x78a>
 800a5f0:	f04f 0900 	mov.w	r9, #0
 800a5f4:	e677      	b.n	800a2e6 <_strtod_l+0x446>
 800a5f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a5fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a5fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a602:	35e2      	adds	r5, #226	@ 0xe2
 800a604:	fa01 f305 	lsl.w	r3, r1, r5
 800a608:	9310      	str	r3, [sp, #64]	@ 0x40
 800a60a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a60c:	e7ba      	b.n	800a584 <_strtod_l+0x6e4>
 800a60e:	2300      	movs	r3, #0
 800a610:	9310      	str	r3, [sp, #64]	@ 0x40
 800a612:	2301      	movs	r3, #1
 800a614:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a616:	e7b5      	b.n	800a584 <_strtod_l+0x6e4>
 800a618:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a61a:	9805      	ldr	r0, [sp, #20]
 800a61c:	462a      	mov	r2, r5
 800a61e:	f7ff f9c7 	bl	80099b0 <__lshift>
 800a622:	901a      	str	r0, [sp, #104]	@ 0x68
 800a624:	2800      	cmp	r0, #0
 800a626:	d1d9      	bne.n	800a5dc <_strtod_l+0x73c>
 800a628:	e65d      	b.n	800a2e6 <_strtod_l+0x446>
 800a62a:	2e00      	cmp	r6, #0
 800a62c:	dd07      	ble.n	800a63e <_strtod_l+0x79e>
 800a62e:	4649      	mov	r1, r9
 800a630:	9805      	ldr	r0, [sp, #20]
 800a632:	4632      	mov	r2, r6
 800a634:	f7ff f9bc 	bl	80099b0 <__lshift>
 800a638:	4681      	mov	r9, r0
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d0d8      	beq.n	800a5f0 <_strtod_l+0x750>
 800a63e:	2f00      	cmp	r7, #0
 800a640:	dd08      	ble.n	800a654 <_strtod_l+0x7b4>
 800a642:	4641      	mov	r1, r8
 800a644:	9805      	ldr	r0, [sp, #20]
 800a646:	463a      	mov	r2, r7
 800a648:	f7ff f9b2 	bl	80099b0 <__lshift>
 800a64c:	4680      	mov	r8, r0
 800a64e:	2800      	cmp	r0, #0
 800a650:	f43f ae49 	beq.w	800a2e6 <_strtod_l+0x446>
 800a654:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a656:	9805      	ldr	r0, [sp, #20]
 800a658:	464a      	mov	r2, r9
 800a65a:	f7ff fa31 	bl	8009ac0 <__mdiff>
 800a65e:	4604      	mov	r4, r0
 800a660:	2800      	cmp	r0, #0
 800a662:	f43f ae40 	beq.w	800a2e6 <_strtod_l+0x446>
 800a666:	68c3      	ldr	r3, [r0, #12]
 800a668:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a66a:	2300      	movs	r3, #0
 800a66c:	60c3      	str	r3, [r0, #12]
 800a66e:	4641      	mov	r1, r8
 800a670:	f7ff fa0a 	bl	8009a88 <__mcmp>
 800a674:	2800      	cmp	r0, #0
 800a676:	da45      	bge.n	800a704 <_strtod_l+0x864>
 800a678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a67a:	ea53 030a 	orrs.w	r3, r3, sl
 800a67e:	d16b      	bne.n	800a758 <_strtod_l+0x8b8>
 800a680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a684:	2b00      	cmp	r3, #0
 800a686:	d167      	bne.n	800a758 <_strtod_l+0x8b8>
 800a688:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a68c:	0d1b      	lsrs	r3, r3, #20
 800a68e:	051b      	lsls	r3, r3, #20
 800a690:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a694:	d960      	bls.n	800a758 <_strtod_l+0x8b8>
 800a696:	6963      	ldr	r3, [r4, #20]
 800a698:	b913      	cbnz	r3, 800a6a0 <_strtod_l+0x800>
 800a69a:	6923      	ldr	r3, [r4, #16]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	dd5b      	ble.n	800a758 <_strtod_l+0x8b8>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	9805      	ldr	r0, [sp, #20]
 800a6a6:	f7ff f983 	bl	80099b0 <__lshift>
 800a6aa:	4641      	mov	r1, r8
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	f7ff f9eb 	bl	8009a88 <__mcmp>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	dd50      	ble.n	800a758 <_strtod_l+0x8b8>
 800a6b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a6ba:	9a08      	ldr	r2, [sp, #32]
 800a6bc:	0d1b      	lsrs	r3, r3, #20
 800a6be:	051b      	lsls	r3, r3, #20
 800a6c0:	2a00      	cmp	r2, #0
 800a6c2:	d06a      	beq.n	800a79a <_strtod_l+0x8fa>
 800a6c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a6c8:	d867      	bhi.n	800a79a <_strtod_l+0x8fa>
 800a6ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a6ce:	f67f ae9d 	bls.w	800a40c <_strtod_l+0x56c>
 800a6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6fc <_strtod_l+0x85c>)
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	4659      	mov	r1, fp
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f7f5 ff8d 	bl	80005f8 <__aeabi_dmul>
 800a6de:	4b08      	ldr	r3, [pc, #32]	@ (800a700 <_strtod_l+0x860>)
 800a6e0:	400b      	ands	r3, r1
 800a6e2:	4682      	mov	sl, r0
 800a6e4:	468b      	mov	fp, r1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f47f ae08 	bne.w	800a2fc <_strtod_l+0x45c>
 800a6ec:	9a05      	ldr	r2, [sp, #20]
 800a6ee:	2322      	movs	r3, #34	@ 0x22
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	e603      	b.n	800a2fc <_strtod_l+0x45c>
 800a6f4:	0800cf10 	.word	0x0800cf10
 800a6f8:	fffffc02 	.word	0xfffffc02
 800a6fc:	39500000 	.word	0x39500000
 800a700:	7ff00000 	.word	0x7ff00000
 800a704:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a708:	d165      	bne.n	800a7d6 <_strtod_l+0x936>
 800a70a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a710:	b35a      	cbz	r2, 800a76a <_strtod_l+0x8ca>
 800a712:	4a9f      	ldr	r2, [pc, #636]	@ (800a990 <_strtod_l+0xaf0>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d12b      	bne.n	800a770 <_strtod_l+0x8d0>
 800a718:	9b08      	ldr	r3, [sp, #32]
 800a71a:	4651      	mov	r1, sl
 800a71c:	b303      	cbz	r3, 800a760 <_strtod_l+0x8c0>
 800a71e:	4b9d      	ldr	r3, [pc, #628]	@ (800a994 <_strtod_l+0xaf4>)
 800a720:	465a      	mov	r2, fp
 800a722:	4013      	ands	r3, r2
 800a724:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a728:	f04f 32ff 	mov.w	r2, #4294967295
 800a72c:	d81b      	bhi.n	800a766 <_strtod_l+0x8c6>
 800a72e:	0d1b      	lsrs	r3, r3, #20
 800a730:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a734:	fa02 f303 	lsl.w	r3, r2, r3
 800a738:	4299      	cmp	r1, r3
 800a73a:	d119      	bne.n	800a770 <_strtod_l+0x8d0>
 800a73c:	4b96      	ldr	r3, [pc, #600]	@ (800a998 <_strtod_l+0xaf8>)
 800a73e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a740:	429a      	cmp	r2, r3
 800a742:	d102      	bne.n	800a74a <_strtod_l+0x8aa>
 800a744:	3101      	adds	r1, #1
 800a746:	f43f adce 	beq.w	800a2e6 <_strtod_l+0x446>
 800a74a:	4b92      	ldr	r3, [pc, #584]	@ (800a994 <_strtod_l+0xaf4>)
 800a74c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a74e:	401a      	ands	r2, r3
 800a750:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a754:	f04f 0a00 	mov.w	sl, #0
 800a758:	9b08      	ldr	r3, [sp, #32]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1b9      	bne.n	800a6d2 <_strtod_l+0x832>
 800a75e:	e5cd      	b.n	800a2fc <_strtod_l+0x45c>
 800a760:	f04f 33ff 	mov.w	r3, #4294967295
 800a764:	e7e8      	b.n	800a738 <_strtod_l+0x898>
 800a766:	4613      	mov	r3, r2
 800a768:	e7e6      	b.n	800a738 <_strtod_l+0x898>
 800a76a:	ea53 030a 	orrs.w	r3, r3, sl
 800a76e:	d0a2      	beq.n	800a6b6 <_strtod_l+0x816>
 800a770:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a772:	b1db      	cbz	r3, 800a7ac <_strtod_l+0x90c>
 800a774:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a776:	4213      	tst	r3, r2
 800a778:	d0ee      	beq.n	800a758 <_strtod_l+0x8b8>
 800a77a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a77c:	9a08      	ldr	r2, [sp, #32]
 800a77e:	4650      	mov	r0, sl
 800a780:	4659      	mov	r1, fp
 800a782:	b1bb      	cbz	r3, 800a7b4 <_strtod_l+0x914>
 800a784:	f7ff fb6e 	bl	8009e64 <sulp>
 800a788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a78c:	ec53 2b10 	vmov	r2, r3, d0
 800a790:	f7f5 fd7c 	bl	800028c <__adddf3>
 800a794:	4682      	mov	sl, r0
 800a796:	468b      	mov	fp, r1
 800a798:	e7de      	b.n	800a758 <_strtod_l+0x8b8>
 800a79a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a79e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a7a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a7a6:	f04f 3aff 	mov.w	sl, #4294967295
 800a7aa:	e7d5      	b.n	800a758 <_strtod_l+0x8b8>
 800a7ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7ae:	ea13 0f0a 	tst.w	r3, sl
 800a7b2:	e7e1      	b.n	800a778 <_strtod_l+0x8d8>
 800a7b4:	f7ff fb56 	bl	8009e64 <sulp>
 800a7b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7bc:	ec53 2b10 	vmov	r2, r3, d0
 800a7c0:	f7f5 fd62 	bl	8000288 <__aeabi_dsub>
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4682      	mov	sl, r0
 800a7ca:	468b      	mov	fp, r1
 800a7cc:	f7f6 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d0c1      	beq.n	800a758 <_strtod_l+0x8b8>
 800a7d4:	e61a      	b.n	800a40c <_strtod_l+0x56c>
 800a7d6:	4641      	mov	r1, r8
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f7ff facd 	bl	8009d78 <__ratio>
 800a7de:	ec57 6b10 	vmov	r6, r7, d0
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 f980 	bl	8000af0 <__aeabi_dcmple>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d06f      	beq.n	800a8d4 <_strtod_l+0xa34>
 800a7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d17a      	bne.n	800a8f0 <_strtod_l+0xa50>
 800a7fa:	f1ba 0f00 	cmp.w	sl, #0
 800a7fe:	d158      	bne.n	800a8b2 <_strtod_l+0xa12>
 800a800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a806:	2b00      	cmp	r3, #0
 800a808:	d15a      	bne.n	800a8c0 <_strtod_l+0xa20>
 800a80a:	4b64      	ldr	r3, [pc, #400]	@ (800a99c <_strtod_l+0xafc>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	4630      	mov	r0, r6
 800a810:	4639      	mov	r1, r7
 800a812:	f7f6 f963 	bl	8000adc <__aeabi_dcmplt>
 800a816:	2800      	cmp	r0, #0
 800a818:	d159      	bne.n	800a8ce <_strtod_l+0xa2e>
 800a81a:	4630      	mov	r0, r6
 800a81c:	4639      	mov	r1, r7
 800a81e:	4b60      	ldr	r3, [pc, #384]	@ (800a9a0 <_strtod_l+0xb00>)
 800a820:	2200      	movs	r2, #0
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a82e:	9606      	str	r6, [sp, #24]
 800a830:	9307      	str	r3, [sp, #28]
 800a832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a836:	4d57      	ldr	r5, [pc, #348]	@ (800a994 <_strtod_l+0xaf4>)
 800a838:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a83e:	401d      	ands	r5, r3
 800a840:	4b58      	ldr	r3, [pc, #352]	@ (800a9a4 <_strtod_l+0xb04>)
 800a842:	429d      	cmp	r5, r3
 800a844:	f040 80b2 	bne.w	800a9ac <_strtod_l+0xb0c>
 800a848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a84a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a84e:	ec4b ab10 	vmov	d0, sl, fp
 800a852:	f7ff f9c9 	bl	8009be8 <__ulp>
 800a856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a85a:	ec51 0b10 	vmov	r0, r1, d0
 800a85e:	f7f5 fecb 	bl	80005f8 <__aeabi_dmul>
 800a862:	4652      	mov	r2, sl
 800a864:	465b      	mov	r3, fp
 800a866:	f7f5 fd11 	bl	800028c <__adddf3>
 800a86a:	460b      	mov	r3, r1
 800a86c:	4949      	ldr	r1, [pc, #292]	@ (800a994 <_strtod_l+0xaf4>)
 800a86e:	4a4e      	ldr	r2, [pc, #312]	@ (800a9a8 <_strtod_l+0xb08>)
 800a870:	4019      	ands	r1, r3
 800a872:	4291      	cmp	r1, r2
 800a874:	4682      	mov	sl, r0
 800a876:	d942      	bls.n	800a8fe <_strtod_l+0xa5e>
 800a878:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a87a:	4b47      	ldr	r3, [pc, #284]	@ (800a998 <_strtod_l+0xaf8>)
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d103      	bne.n	800a888 <_strtod_l+0x9e8>
 800a880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a882:	3301      	adds	r3, #1
 800a884:	f43f ad2f 	beq.w	800a2e6 <_strtod_l+0x446>
 800a888:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a998 <_strtod_l+0xaf8>
 800a88c:	f04f 3aff 	mov.w	sl, #4294967295
 800a890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a892:	9805      	ldr	r0, [sp, #20]
 800a894:	f7fe fe7c 	bl	8009590 <_Bfree>
 800a898:	9805      	ldr	r0, [sp, #20]
 800a89a:	4649      	mov	r1, r9
 800a89c:	f7fe fe78 	bl	8009590 <_Bfree>
 800a8a0:	9805      	ldr	r0, [sp, #20]
 800a8a2:	4641      	mov	r1, r8
 800a8a4:	f7fe fe74 	bl	8009590 <_Bfree>
 800a8a8:	9805      	ldr	r0, [sp, #20]
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	f7fe fe70 	bl	8009590 <_Bfree>
 800a8b0:	e619      	b.n	800a4e6 <_strtod_l+0x646>
 800a8b2:	f1ba 0f01 	cmp.w	sl, #1
 800a8b6:	d103      	bne.n	800a8c0 <_strtod_l+0xa20>
 800a8b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f43f ada6 	beq.w	800a40c <_strtod_l+0x56c>
 800a8c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a970 <_strtod_l+0xad0>
 800a8c4:	4f35      	ldr	r7, [pc, #212]	@ (800a99c <_strtod_l+0xafc>)
 800a8c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8ca:	2600      	movs	r6, #0
 800a8cc:	e7b1      	b.n	800a832 <_strtod_l+0x992>
 800a8ce:	4f34      	ldr	r7, [pc, #208]	@ (800a9a0 <_strtod_l+0xb00>)
 800a8d0:	2600      	movs	r6, #0
 800a8d2:	e7aa      	b.n	800a82a <_strtod_l+0x98a>
 800a8d4:	4b32      	ldr	r3, [pc, #200]	@ (800a9a0 <_strtod_l+0xb00>)
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f7f5 fe8c 	bl	80005f8 <__aeabi_dmul>
 800a8e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	460f      	mov	r7, r1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d09f      	beq.n	800a82a <_strtod_l+0x98a>
 800a8ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a8ee:	e7a0      	b.n	800a832 <_strtod_l+0x992>
 800a8f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a978 <_strtod_l+0xad8>
 800a8f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8f8:	ec57 6b17 	vmov	r6, r7, d7
 800a8fc:	e799      	b.n	800a832 <_strtod_l+0x992>
 800a8fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a902:	9b08      	ldr	r3, [sp, #32]
 800a904:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1c1      	bne.n	800a890 <_strtod_l+0x9f0>
 800a90c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a910:	0d1b      	lsrs	r3, r3, #20
 800a912:	051b      	lsls	r3, r3, #20
 800a914:	429d      	cmp	r5, r3
 800a916:	d1bb      	bne.n	800a890 <_strtod_l+0x9f0>
 800a918:	4630      	mov	r0, r6
 800a91a:	4639      	mov	r1, r7
 800a91c:	f7f6 f9cc 	bl	8000cb8 <__aeabi_d2lz>
 800a920:	f7f5 fe3c 	bl	800059c <__aeabi_l2d>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4630      	mov	r0, r6
 800a92a:	4639      	mov	r1, r7
 800a92c:	f7f5 fcac 	bl	8000288 <__aeabi_dsub>
 800a930:	460b      	mov	r3, r1
 800a932:	4602      	mov	r2, r0
 800a934:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a938:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a93e:	ea46 060a 	orr.w	r6, r6, sl
 800a942:	431e      	orrs	r6, r3
 800a944:	d06f      	beq.n	800aa26 <_strtod_l+0xb86>
 800a946:	a30e      	add	r3, pc, #56	@ (adr r3, 800a980 <_strtod_l+0xae0>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f7f6 f8c6 	bl	8000adc <__aeabi_dcmplt>
 800a950:	2800      	cmp	r0, #0
 800a952:	f47f acd3 	bne.w	800a2fc <_strtod_l+0x45c>
 800a956:	a30c      	add	r3, pc, #48	@ (adr r3, 800a988 <_strtod_l+0xae8>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a960:	f7f6 f8da 	bl	8000b18 <__aeabi_dcmpgt>
 800a964:	2800      	cmp	r0, #0
 800a966:	d093      	beq.n	800a890 <_strtod_l+0x9f0>
 800a968:	e4c8      	b.n	800a2fc <_strtod_l+0x45c>
 800a96a:	bf00      	nop
 800a96c:	f3af 8000 	nop.w
 800a970:	00000000 	.word	0x00000000
 800a974:	bff00000 	.word	0xbff00000
 800a978:	00000000 	.word	0x00000000
 800a97c:	3ff00000 	.word	0x3ff00000
 800a980:	94a03595 	.word	0x94a03595
 800a984:	3fdfffff 	.word	0x3fdfffff
 800a988:	35afe535 	.word	0x35afe535
 800a98c:	3fe00000 	.word	0x3fe00000
 800a990:	000fffff 	.word	0x000fffff
 800a994:	7ff00000 	.word	0x7ff00000
 800a998:	7fefffff 	.word	0x7fefffff
 800a99c:	3ff00000 	.word	0x3ff00000
 800a9a0:	3fe00000 	.word	0x3fe00000
 800a9a4:	7fe00000 	.word	0x7fe00000
 800a9a8:	7c9fffff 	.word	0x7c9fffff
 800a9ac:	9b08      	ldr	r3, [sp, #32]
 800a9ae:	b323      	cbz	r3, 800a9fa <_strtod_l+0xb5a>
 800a9b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a9b4:	d821      	bhi.n	800a9fa <_strtod_l+0xb5a>
 800a9b6:	a328      	add	r3, pc, #160	@ (adr r3, 800aa58 <_strtod_l+0xbb8>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	4630      	mov	r0, r6
 800a9be:	4639      	mov	r1, r7
 800a9c0:	f7f6 f896 	bl	8000af0 <__aeabi_dcmple>
 800a9c4:	b1a0      	cbz	r0, 800a9f0 <_strtod_l+0xb50>
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7f6 f8ed 	bl	8000ba8 <__aeabi_d2uiz>
 800a9ce:	2801      	cmp	r0, #1
 800a9d0:	bf38      	it	cc
 800a9d2:	2001      	movcc	r0, #1
 800a9d4:	f7f5 fd96 	bl	8000504 <__aeabi_ui2d>
 800a9d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	b9fb      	cbnz	r3, 800aa20 <_strtod_l+0xb80>
 800a9e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a9e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a9e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a9ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a9f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a9f6:	1b5b      	subs	r3, r3, r5
 800a9f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a9fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aa02:	f7ff f8f1 	bl	8009be8 <__ulp>
 800aa06:	4650      	mov	r0, sl
 800aa08:	ec53 2b10 	vmov	r2, r3, d0
 800aa0c:	4659      	mov	r1, fp
 800aa0e:	f7f5 fdf3 	bl	80005f8 <__aeabi_dmul>
 800aa12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aa16:	f7f5 fc39 	bl	800028c <__adddf3>
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	468b      	mov	fp, r1
 800aa1e:	e770      	b.n	800a902 <_strtod_l+0xa62>
 800aa20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aa24:	e7e0      	b.n	800a9e8 <_strtod_l+0xb48>
 800aa26:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa60 <_strtod_l+0xbc0>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f6 f856 	bl	8000adc <__aeabi_dcmplt>
 800aa30:	e798      	b.n	800a964 <_strtod_l+0xac4>
 800aa32:	2300      	movs	r3, #0
 800aa34:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aa38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	f7ff ba6d 	b.w	8009f1a <_strtod_l+0x7a>
 800aa40:	2a65      	cmp	r2, #101	@ 0x65
 800aa42:	f43f ab68 	beq.w	800a116 <_strtod_l+0x276>
 800aa46:	2a45      	cmp	r2, #69	@ 0x45
 800aa48:	f43f ab65 	beq.w	800a116 <_strtod_l+0x276>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	f7ff bba0 	b.w	800a192 <_strtod_l+0x2f2>
 800aa52:	bf00      	nop
 800aa54:	f3af 8000 	nop.w
 800aa58:	ffc00000 	.word	0xffc00000
 800aa5c:	41dfffff 	.word	0x41dfffff
 800aa60:	94a03595 	.word	0x94a03595
 800aa64:	3fcfffff 	.word	0x3fcfffff

0800aa68 <_strtod_r>:
 800aa68:	4b01      	ldr	r3, [pc, #4]	@ (800aa70 <_strtod_r+0x8>)
 800aa6a:	f7ff ba19 	b.w	8009ea0 <_strtod_l>
 800aa6e:	bf00      	nop
 800aa70:	20000094 	.word	0x20000094

0800aa74 <_strtol_l.isra.0>:
 800aa74:	2b24      	cmp	r3, #36	@ 0x24
 800aa76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7a:	4686      	mov	lr, r0
 800aa7c:	4690      	mov	r8, r2
 800aa7e:	d801      	bhi.n	800aa84 <_strtol_l.isra.0+0x10>
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d106      	bne.n	800aa92 <_strtol_l.isra.0+0x1e>
 800aa84:	f7fd fda8 	bl	80085d8 <__errno>
 800aa88:	2316      	movs	r3, #22
 800aa8a:	6003      	str	r3, [r0, #0]
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa92:	4834      	ldr	r0, [pc, #208]	@ (800ab64 <_strtol_l.isra.0+0xf0>)
 800aa94:	460d      	mov	r5, r1
 800aa96:	462a      	mov	r2, r5
 800aa98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa9c:	5d06      	ldrb	r6, [r0, r4]
 800aa9e:	f016 0608 	ands.w	r6, r6, #8
 800aaa2:	d1f8      	bne.n	800aa96 <_strtol_l.isra.0+0x22>
 800aaa4:	2c2d      	cmp	r4, #45	@ 0x2d
 800aaa6:	d110      	bne.n	800aaca <_strtol_l.isra.0+0x56>
 800aaa8:	782c      	ldrb	r4, [r5, #0]
 800aaaa:	2601      	movs	r6, #1
 800aaac:	1c95      	adds	r5, r2, #2
 800aaae:	f033 0210 	bics.w	r2, r3, #16
 800aab2:	d115      	bne.n	800aae0 <_strtol_l.isra.0+0x6c>
 800aab4:	2c30      	cmp	r4, #48	@ 0x30
 800aab6:	d10d      	bne.n	800aad4 <_strtol_l.isra.0+0x60>
 800aab8:	782a      	ldrb	r2, [r5, #0]
 800aaba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aabe:	2a58      	cmp	r2, #88	@ 0x58
 800aac0:	d108      	bne.n	800aad4 <_strtol_l.isra.0+0x60>
 800aac2:	786c      	ldrb	r4, [r5, #1]
 800aac4:	3502      	adds	r5, #2
 800aac6:	2310      	movs	r3, #16
 800aac8:	e00a      	b.n	800aae0 <_strtol_l.isra.0+0x6c>
 800aaca:	2c2b      	cmp	r4, #43	@ 0x2b
 800aacc:	bf04      	itt	eq
 800aace:	782c      	ldrbeq	r4, [r5, #0]
 800aad0:	1c95      	addeq	r5, r2, #2
 800aad2:	e7ec      	b.n	800aaae <_strtol_l.isra.0+0x3a>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1f6      	bne.n	800aac6 <_strtol_l.isra.0+0x52>
 800aad8:	2c30      	cmp	r4, #48	@ 0x30
 800aada:	bf14      	ite	ne
 800aadc:	230a      	movne	r3, #10
 800aade:	2308      	moveq	r3, #8
 800aae0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aae4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aae8:	2200      	movs	r2, #0
 800aaea:	fbbc f9f3 	udiv	r9, ip, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	fb03 ca19 	mls	sl, r3, r9, ip
 800aaf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aaf8:	2f09      	cmp	r7, #9
 800aafa:	d80f      	bhi.n	800ab1c <_strtol_l.isra.0+0xa8>
 800aafc:	463c      	mov	r4, r7
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	dd1b      	ble.n	800ab3a <_strtol_l.isra.0+0xc6>
 800ab02:	1c57      	adds	r7, r2, #1
 800ab04:	d007      	beq.n	800ab16 <_strtol_l.isra.0+0xa2>
 800ab06:	4581      	cmp	r9, r0
 800ab08:	d314      	bcc.n	800ab34 <_strtol_l.isra.0+0xc0>
 800ab0a:	d101      	bne.n	800ab10 <_strtol_l.isra.0+0x9c>
 800ab0c:	45a2      	cmp	sl, r4
 800ab0e:	db11      	blt.n	800ab34 <_strtol_l.isra.0+0xc0>
 800ab10:	fb00 4003 	mla	r0, r0, r3, r4
 800ab14:	2201      	movs	r2, #1
 800ab16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab1a:	e7eb      	b.n	800aaf4 <_strtol_l.isra.0+0x80>
 800ab1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab20:	2f19      	cmp	r7, #25
 800ab22:	d801      	bhi.n	800ab28 <_strtol_l.isra.0+0xb4>
 800ab24:	3c37      	subs	r4, #55	@ 0x37
 800ab26:	e7ea      	b.n	800aafe <_strtol_l.isra.0+0x8a>
 800ab28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ab2c:	2f19      	cmp	r7, #25
 800ab2e:	d804      	bhi.n	800ab3a <_strtol_l.isra.0+0xc6>
 800ab30:	3c57      	subs	r4, #87	@ 0x57
 800ab32:	e7e4      	b.n	800aafe <_strtol_l.isra.0+0x8a>
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295
 800ab38:	e7ed      	b.n	800ab16 <_strtol_l.isra.0+0xa2>
 800ab3a:	1c53      	adds	r3, r2, #1
 800ab3c:	d108      	bne.n	800ab50 <_strtol_l.isra.0+0xdc>
 800ab3e:	2322      	movs	r3, #34	@ 0x22
 800ab40:	f8ce 3000 	str.w	r3, [lr]
 800ab44:	4660      	mov	r0, ip
 800ab46:	f1b8 0f00 	cmp.w	r8, #0
 800ab4a:	d0a0      	beq.n	800aa8e <_strtol_l.isra.0+0x1a>
 800ab4c:	1e69      	subs	r1, r5, #1
 800ab4e:	e006      	b.n	800ab5e <_strtol_l.isra.0+0xea>
 800ab50:	b106      	cbz	r6, 800ab54 <_strtol_l.isra.0+0xe0>
 800ab52:	4240      	negs	r0, r0
 800ab54:	f1b8 0f00 	cmp.w	r8, #0
 800ab58:	d099      	beq.n	800aa8e <_strtol_l.isra.0+0x1a>
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	d1f6      	bne.n	800ab4c <_strtol_l.isra.0+0xd8>
 800ab5e:	f8c8 1000 	str.w	r1, [r8]
 800ab62:	e794      	b.n	800aa8e <_strtol_l.isra.0+0x1a>
 800ab64:	0800cf39 	.word	0x0800cf39

0800ab68 <_strtol_r>:
 800ab68:	f7ff bf84 	b.w	800aa74 <_strtol_l.isra.0>

0800ab6c <__ssputs_r>:
 800ab6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab70:	688e      	ldr	r6, [r1, #8]
 800ab72:	461f      	mov	r7, r3
 800ab74:	42be      	cmp	r6, r7
 800ab76:	680b      	ldr	r3, [r1, #0]
 800ab78:	4682      	mov	sl, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4690      	mov	r8, r2
 800ab7e:	d82d      	bhi.n	800abdc <__ssputs_r+0x70>
 800ab80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab88:	d026      	beq.n	800abd8 <__ssputs_r+0x6c>
 800ab8a:	6965      	ldr	r5, [r4, #20]
 800ab8c:	6909      	ldr	r1, [r1, #16]
 800ab8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab92:	eba3 0901 	sub.w	r9, r3, r1
 800ab96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab9a:	1c7b      	adds	r3, r7, #1
 800ab9c:	444b      	add	r3, r9
 800ab9e:	106d      	asrs	r5, r5, #1
 800aba0:	429d      	cmp	r5, r3
 800aba2:	bf38      	it	cc
 800aba4:	461d      	movcc	r5, r3
 800aba6:	0553      	lsls	r3, r2, #21
 800aba8:	d527      	bpl.n	800abfa <__ssputs_r+0x8e>
 800abaa:	4629      	mov	r1, r5
 800abac:	f7fe fc24 	bl	80093f8 <_malloc_r>
 800abb0:	4606      	mov	r6, r0
 800abb2:	b360      	cbz	r0, 800ac0e <__ssputs_r+0xa2>
 800abb4:	6921      	ldr	r1, [r4, #16]
 800abb6:	464a      	mov	r2, r9
 800abb8:	f7fd fd3b 	bl	8008632 <memcpy>
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800abc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abc6:	81a3      	strh	r3, [r4, #12]
 800abc8:	6126      	str	r6, [r4, #16]
 800abca:	6165      	str	r5, [r4, #20]
 800abcc:	444e      	add	r6, r9
 800abce:	eba5 0509 	sub.w	r5, r5, r9
 800abd2:	6026      	str	r6, [r4, #0]
 800abd4:	60a5      	str	r5, [r4, #8]
 800abd6:	463e      	mov	r6, r7
 800abd8:	42be      	cmp	r6, r7
 800abda:	d900      	bls.n	800abde <__ssputs_r+0x72>
 800abdc:	463e      	mov	r6, r7
 800abde:	6820      	ldr	r0, [r4, #0]
 800abe0:	4632      	mov	r2, r6
 800abe2:	4641      	mov	r1, r8
 800abe4:	f000 fd57 	bl	800b696 <memmove>
 800abe8:	68a3      	ldr	r3, [r4, #8]
 800abea:	1b9b      	subs	r3, r3, r6
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	4433      	add	r3, r6
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	2000      	movs	r0, #0
 800abf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfa:	462a      	mov	r2, r5
 800abfc:	f001 f90d 	bl	800be1a <_realloc_r>
 800ac00:	4606      	mov	r6, r0
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d1e0      	bne.n	800abc8 <__ssputs_r+0x5c>
 800ac06:	6921      	ldr	r1, [r4, #16]
 800ac08:	4650      	mov	r0, sl
 800ac0a:	f7fe fb81 	bl	8009310 <_free_r>
 800ac0e:	230c      	movs	r3, #12
 800ac10:	f8ca 3000 	str.w	r3, [sl]
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	e7e9      	b.n	800abf6 <__ssputs_r+0x8a>
	...

0800ac24 <_svfiprintf_r>:
 800ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	4698      	mov	r8, r3
 800ac2a:	898b      	ldrh	r3, [r1, #12]
 800ac2c:	061b      	lsls	r3, r3, #24
 800ac2e:	b09d      	sub	sp, #116	@ 0x74
 800ac30:	4607      	mov	r7, r0
 800ac32:	460d      	mov	r5, r1
 800ac34:	4614      	mov	r4, r2
 800ac36:	d510      	bpl.n	800ac5a <_svfiprintf_r+0x36>
 800ac38:	690b      	ldr	r3, [r1, #16]
 800ac3a:	b973      	cbnz	r3, 800ac5a <_svfiprintf_r+0x36>
 800ac3c:	2140      	movs	r1, #64	@ 0x40
 800ac3e:	f7fe fbdb 	bl	80093f8 <_malloc_r>
 800ac42:	6028      	str	r0, [r5, #0]
 800ac44:	6128      	str	r0, [r5, #16]
 800ac46:	b930      	cbnz	r0, 800ac56 <_svfiprintf_r+0x32>
 800ac48:	230c      	movs	r3, #12
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac50:	b01d      	add	sp, #116	@ 0x74
 800ac52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac56:	2340      	movs	r3, #64	@ 0x40
 800ac58:	616b      	str	r3, [r5, #20]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5e:	2320      	movs	r3, #32
 800ac60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac68:	2330      	movs	r3, #48	@ 0x30
 800ac6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae08 <_svfiprintf_r+0x1e4>
 800ac6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac72:	f04f 0901 	mov.w	r9, #1
 800ac76:	4623      	mov	r3, r4
 800ac78:	469a      	mov	sl, r3
 800ac7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac7e:	b10a      	cbz	r2, 800ac84 <_svfiprintf_r+0x60>
 800ac80:	2a25      	cmp	r2, #37	@ 0x25
 800ac82:	d1f9      	bne.n	800ac78 <_svfiprintf_r+0x54>
 800ac84:	ebba 0b04 	subs.w	fp, sl, r4
 800ac88:	d00b      	beq.n	800aca2 <_svfiprintf_r+0x7e>
 800ac8a:	465b      	mov	r3, fp
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7ff ff6b 	bl	800ab6c <__ssputs_r>
 800ac96:	3001      	adds	r0, #1
 800ac98:	f000 80a7 	beq.w	800adea <_svfiprintf_r+0x1c6>
 800ac9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac9e:	445a      	add	r2, fp
 800aca0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aca2:	f89a 3000 	ldrb.w	r3, [sl]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 809f 	beq.w	800adea <_svfiprintf_r+0x1c6>
 800acac:	2300      	movs	r3, #0
 800acae:	f04f 32ff 	mov.w	r2, #4294967295
 800acb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acb6:	f10a 0a01 	add.w	sl, sl, #1
 800acba:	9304      	str	r3, [sp, #16]
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800acc4:	4654      	mov	r4, sl
 800acc6:	2205      	movs	r2, #5
 800acc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800accc:	484e      	ldr	r0, [pc, #312]	@ (800ae08 <_svfiprintf_r+0x1e4>)
 800acce:	f7f5 fa7f 	bl	80001d0 <memchr>
 800acd2:	9a04      	ldr	r2, [sp, #16]
 800acd4:	b9d8      	cbnz	r0, 800ad0e <_svfiprintf_r+0xea>
 800acd6:	06d0      	lsls	r0, r2, #27
 800acd8:	bf44      	itt	mi
 800acda:	2320      	movmi	r3, #32
 800acdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ace0:	0711      	lsls	r1, r2, #28
 800ace2:	bf44      	itt	mi
 800ace4:	232b      	movmi	r3, #43	@ 0x2b
 800ace6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acea:	f89a 3000 	ldrb.w	r3, [sl]
 800acee:	2b2a      	cmp	r3, #42	@ 0x2a
 800acf0:	d015      	beq.n	800ad1e <_svfiprintf_r+0xfa>
 800acf2:	9a07      	ldr	r2, [sp, #28]
 800acf4:	4654      	mov	r4, sl
 800acf6:	2000      	movs	r0, #0
 800acf8:	f04f 0c0a 	mov.w	ip, #10
 800acfc:	4621      	mov	r1, r4
 800acfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad02:	3b30      	subs	r3, #48	@ 0x30
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d94b      	bls.n	800ada0 <_svfiprintf_r+0x17c>
 800ad08:	b1b0      	cbz	r0, 800ad38 <_svfiprintf_r+0x114>
 800ad0a:	9207      	str	r2, [sp, #28]
 800ad0c:	e014      	b.n	800ad38 <_svfiprintf_r+0x114>
 800ad0e:	eba0 0308 	sub.w	r3, r0, r8
 800ad12:	fa09 f303 	lsl.w	r3, r9, r3
 800ad16:	4313      	orrs	r3, r2
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	46a2      	mov	sl, r4
 800ad1c:	e7d2      	b.n	800acc4 <_svfiprintf_r+0xa0>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d19      	adds	r1, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9103      	str	r1, [sp, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfbb      	ittet	lt
 800ad2a:	425b      	neglt	r3, r3
 800ad2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad30:	9307      	strge	r3, [sp, #28]
 800ad32:	9307      	strlt	r3, [sp, #28]
 800ad34:	bfb8      	it	lt
 800ad36:	9204      	strlt	r2, [sp, #16]
 800ad38:	7823      	ldrb	r3, [r4, #0]
 800ad3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad3c:	d10a      	bne.n	800ad54 <_svfiprintf_r+0x130>
 800ad3e:	7863      	ldrb	r3, [r4, #1]
 800ad40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad42:	d132      	bne.n	800adaa <_svfiprintf_r+0x186>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	1d1a      	adds	r2, r3, #4
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	9203      	str	r2, [sp, #12]
 800ad4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad50:	3402      	adds	r4, #2
 800ad52:	9305      	str	r3, [sp, #20]
 800ad54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae18 <_svfiprintf_r+0x1f4>
 800ad58:	7821      	ldrb	r1, [r4, #0]
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	4650      	mov	r0, sl
 800ad5e:	f7f5 fa37 	bl	80001d0 <memchr>
 800ad62:	b138      	cbz	r0, 800ad74 <_svfiprintf_r+0x150>
 800ad64:	9b04      	ldr	r3, [sp, #16]
 800ad66:	eba0 000a 	sub.w	r0, r0, sl
 800ad6a:	2240      	movs	r2, #64	@ 0x40
 800ad6c:	4082      	lsls	r2, r0
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	3401      	adds	r4, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad78:	4824      	ldr	r0, [pc, #144]	@ (800ae0c <_svfiprintf_r+0x1e8>)
 800ad7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad7e:	2206      	movs	r2, #6
 800ad80:	f7f5 fa26 	bl	80001d0 <memchr>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d036      	beq.n	800adf6 <_svfiprintf_r+0x1d2>
 800ad88:	4b21      	ldr	r3, [pc, #132]	@ (800ae10 <_svfiprintf_r+0x1ec>)
 800ad8a:	bb1b      	cbnz	r3, 800add4 <_svfiprintf_r+0x1b0>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	3307      	adds	r3, #7
 800ad90:	f023 0307 	bic.w	r3, r3, #7
 800ad94:	3308      	adds	r3, #8
 800ad96:	9303      	str	r3, [sp, #12]
 800ad98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9a:	4433      	add	r3, r6
 800ad9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad9e:	e76a      	b.n	800ac76 <_svfiprintf_r+0x52>
 800ada0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ada4:	460c      	mov	r4, r1
 800ada6:	2001      	movs	r0, #1
 800ada8:	e7a8      	b.n	800acfc <_svfiprintf_r+0xd8>
 800adaa:	2300      	movs	r3, #0
 800adac:	3401      	adds	r4, #1
 800adae:	9305      	str	r3, [sp, #20]
 800adb0:	4619      	mov	r1, r3
 800adb2:	f04f 0c0a 	mov.w	ip, #10
 800adb6:	4620      	mov	r0, r4
 800adb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adbc:	3a30      	subs	r2, #48	@ 0x30
 800adbe:	2a09      	cmp	r2, #9
 800adc0:	d903      	bls.n	800adca <_svfiprintf_r+0x1a6>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0c6      	beq.n	800ad54 <_svfiprintf_r+0x130>
 800adc6:	9105      	str	r1, [sp, #20]
 800adc8:	e7c4      	b.n	800ad54 <_svfiprintf_r+0x130>
 800adca:	fb0c 2101 	mla	r1, ip, r1, r2
 800adce:	4604      	mov	r4, r0
 800add0:	2301      	movs	r3, #1
 800add2:	e7f0      	b.n	800adb6 <_svfiprintf_r+0x192>
 800add4:	ab03      	add	r3, sp, #12
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	462a      	mov	r2, r5
 800adda:	4b0e      	ldr	r3, [pc, #56]	@ (800ae14 <_svfiprintf_r+0x1f0>)
 800addc:	a904      	add	r1, sp, #16
 800adde:	4638      	mov	r0, r7
 800ade0:	f7fc fc7e 	bl	80076e0 <_printf_float>
 800ade4:	1c42      	adds	r2, r0, #1
 800ade6:	4606      	mov	r6, r0
 800ade8:	d1d6      	bne.n	800ad98 <_svfiprintf_r+0x174>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	065b      	lsls	r3, r3, #25
 800adee:	f53f af2d 	bmi.w	800ac4c <_svfiprintf_r+0x28>
 800adf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adf4:	e72c      	b.n	800ac50 <_svfiprintf_r+0x2c>
 800adf6:	ab03      	add	r3, sp, #12
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	462a      	mov	r2, r5
 800adfc:	4b05      	ldr	r3, [pc, #20]	@ (800ae14 <_svfiprintf_r+0x1f0>)
 800adfe:	a904      	add	r1, sp, #16
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7fc ff05 	bl	8007c10 <_printf_i>
 800ae06:	e7ed      	b.n	800ade4 <_svfiprintf_r+0x1c0>
 800ae08:	0800cd1b 	.word	0x0800cd1b
 800ae0c:	0800cd25 	.word	0x0800cd25
 800ae10:	080076e1 	.word	0x080076e1
 800ae14:	0800ab6d 	.word	0x0800ab6d
 800ae18:	0800cd21 	.word	0x0800cd21

0800ae1c <_sungetc_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	1c4b      	adds	r3, r1, #1
 800ae20:	4614      	mov	r4, r2
 800ae22:	d103      	bne.n	800ae2c <_sungetc_r+0x10>
 800ae24:	f04f 35ff 	mov.w	r5, #4294967295
 800ae28:	4628      	mov	r0, r5
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	8993      	ldrh	r3, [r2, #12]
 800ae2e:	f023 0320 	bic.w	r3, r3, #32
 800ae32:	8193      	strh	r3, [r2, #12]
 800ae34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae36:	6852      	ldr	r2, [r2, #4]
 800ae38:	b2cd      	uxtb	r5, r1
 800ae3a:	b18b      	cbz	r3, 800ae60 <_sungetc_r+0x44>
 800ae3c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	dd08      	ble.n	800ae54 <_sungetc_r+0x38>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	1e5a      	subs	r2, r3, #1
 800ae46:	6022      	str	r2, [r4, #0]
 800ae48:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ae4c:	6863      	ldr	r3, [r4, #4]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	6063      	str	r3, [r4, #4]
 800ae52:	e7e9      	b.n	800ae28 <_sungetc_r+0xc>
 800ae54:	4621      	mov	r1, r4
 800ae56:	f000 fbe4 	bl	800b622 <__submore>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d0f1      	beq.n	800ae42 <_sungetc_r+0x26>
 800ae5e:	e7e1      	b.n	800ae24 <_sungetc_r+0x8>
 800ae60:	6921      	ldr	r1, [r4, #16]
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	b151      	cbz	r1, 800ae7c <_sungetc_r+0x60>
 800ae66:	4299      	cmp	r1, r3
 800ae68:	d208      	bcs.n	800ae7c <_sungetc_r+0x60>
 800ae6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ae6e:	42a9      	cmp	r1, r5
 800ae70:	d104      	bne.n	800ae7c <_sungetc_r+0x60>
 800ae72:	3b01      	subs	r3, #1
 800ae74:	3201      	adds	r2, #1
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	6062      	str	r2, [r4, #4]
 800ae7a:	e7d5      	b.n	800ae28 <_sungetc_r+0xc>
 800ae7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800ae80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae86:	2303      	movs	r3, #3
 800ae88:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ae8a:	4623      	mov	r3, r4
 800ae8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	2301      	movs	r3, #1
 800ae94:	e7dc      	b.n	800ae50 <_sungetc_r+0x34>

0800ae96 <__ssrefill_r>:
 800ae96:	b510      	push	{r4, lr}
 800ae98:	460c      	mov	r4, r1
 800ae9a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ae9c:	b169      	cbz	r1, 800aeba <__ssrefill_r+0x24>
 800ae9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aea2:	4299      	cmp	r1, r3
 800aea4:	d001      	beq.n	800aeaa <__ssrefill_r+0x14>
 800aea6:	f7fe fa33 	bl	8009310 <_free_r>
 800aeaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aeac:	6063      	str	r3, [r4, #4]
 800aeae:	2000      	movs	r0, #0
 800aeb0:	6360      	str	r0, [r4, #52]	@ 0x34
 800aeb2:	b113      	cbz	r3, 800aeba <__ssrefill_r+0x24>
 800aeb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800aeb6:	6023      	str	r3, [r4, #0]
 800aeb8:	bd10      	pop	{r4, pc}
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	2300      	movs	r3, #0
 800aec0:	6063      	str	r3, [r4, #4]
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	f043 0320 	orr.w	r3, r3, #32
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	f04f 30ff 	mov.w	r0, #4294967295
 800aece:	e7f3      	b.n	800aeb8 <__ssrefill_r+0x22>

0800aed0 <__ssvfiscanf_r>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	460c      	mov	r4, r1
 800aed6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800aeda:	2100      	movs	r1, #0
 800aedc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800aee0:	49a6      	ldr	r1, [pc, #664]	@ (800b17c <__ssvfiscanf_r+0x2ac>)
 800aee2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800aee4:	f10d 0804 	add.w	r8, sp, #4
 800aee8:	49a5      	ldr	r1, [pc, #660]	@ (800b180 <__ssvfiscanf_r+0x2b0>)
 800aeea:	4fa6      	ldr	r7, [pc, #664]	@ (800b184 <__ssvfiscanf_r+0x2b4>)
 800aeec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800aef0:	4606      	mov	r6, r0
 800aef2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	f892 9000 	ldrb.w	r9, [r2]
 800aefa:	f1b9 0f00 	cmp.w	r9, #0
 800aefe:	f000 8158 	beq.w	800b1b2 <__ssvfiscanf_r+0x2e2>
 800af02:	f817 3009 	ldrb.w	r3, [r7, r9]
 800af06:	f013 0308 	ands.w	r3, r3, #8
 800af0a:	f102 0501 	add.w	r5, r2, #1
 800af0e:	d019      	beq.n	800af44 <__ssvfiscanf_r+0x74>
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	dd0f      	ble.n	800af36 <__ssvfiscanf_r+0x66>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	781a      	ldrb	r2, [r3, #0]
 800af1a:	5cba      	ldrb	r2, [r7, r2]
 800af1c:	0712      	lsls	r2, r2, #28
 800af1e:	d401      	bmi.n	800af24 <__ssvfiscanf_r+0x54>
 800af20:	462a      	mov	r2, r5
 800af22:	e7e8      	b.n	800aef6 <__ssvfiscanf_r+0x26>
 800af24:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800af26:	3201      	adds	r2, #1
 800af28:	9245      	str	r2, [sp, #276]	@ 0x114
 800af2a:	6862      	ldr	r2, [r4, #4]
 800af2c:	3301      	adds	r3, #1
 800af2e:	3a01      	subs	r2, #1
 800af30:	6062      	str	r2, [r4, #4]
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	e7ec      	b.n	800af10 <__ssvfiscanf_r+0x40>
 800af36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800af38:	4621      	mov	r1, r4
 800af3a:	4630      	mov	r0, r6
 800af3c:	4798      	blx	r3
 800af3e:	2800      	cmp	r0, #0
 800af40:	d0e9      	beq.n	800af16 <__ssvfiscanf_r+0x46>
 800af42:	e7ed      	b.n	800af20 <__ssvfiscanf_r+0x50>
 800af44:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800af48:	f040 8085 	bne.w	800b056 <__ssvfiscanf_r+0x186>
 800af4c:	9341      	str	r3, [sp, #260]	@ 0x104
 800af4e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800af50:	7853      	ldrb	r3, [r2, #1]
 800af52:	2b2a      	cmp	r3, #42	@ 0x2a
 800af54:	bf02      	ittt	eq
 800af56:	2310      	moveq	r3, #16
 800af58:	1c95      	addeq	r5, r2, #2
 800af5a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800af5c:	220a      	movs	r2, #10
 800af5e:	46aa      	mov	sl, r5
 800af60:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800af64:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800af68:	2b09      	cmp	r3, #9
 800af6a:	d91e      	bls.n	800afaa <__ssvfiscanf_r+0xda>
 800af6c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800b188 <__ssvfiscanf_r+0x2b8>
 800af70:	2203      	movs	r2, #3
 800af72:	4658      	mov	r0, fp
 800af74:	f7f5 f92c 	bl	80001d0 <memchr>
 800af78:	b138      	cbz	r0, 800af8a <__ssvfiscanf_r+0xba>
 800af7a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800af7c:	eba0 000b 	sub.w	r0, r0, fp
 800af80:	2301      	movs	r3, #1
 800af82:	4083      	lsls	r3, r0
 800af84:	4313      	orrs	r3, r2
 800af86:	9341      	str	r3, [sp, #260]	@ 0x104
 800af88:	4655      	mov	r5, sl
 800af8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af8e:	2b78      	cmp	r3, #120	@ 0x78
 800af90:	d806      	bhi.n	800afa0 <__ssvfiscanf_r+0xd0>
 800af92:	2b57      	cmp	r3, #87	@ 0x57
 800af94:	d810      	bhi.n	800afb8 <__ssvfiscanf_r+0xe8>
 800af96:	2b25      	cmp	r3, #37	@ 0x25
 800af98:	d05d      	beq.n	800b056 <__ssvfiscanf_r+0x186>
 800af9a:	d857      	bhi.n	800b04c <__ssvfiscanf_r+0x17c>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d075      	beq.n	800b08c <__ssvfiscanf_r+0x1bc>
 800afa0:	2303      	movs	r3, #3
 800afa2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800afa4:	230a      	movs	r3, #10
 800afa6:	9342      	str	r3, [sp, #264]	@ 0x108
 800afa8:	e088      	b.n	800b0bc <__ssvfiscanf_r+0x1ec>
 800afaa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800afac:	fb02 1103 	mla	r1, r2, r3, r1
 800afb0:	3930      	subs	r1, #48	@ 0x30
 800afb2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800afb4:	4655      	mov	r5, sl
 800afb6:	e7d2      	b.n	800af5e <__ssvfiscanf_r+0x8e>
 800afb8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800afbc:	2a20      	cmp	r2, #32
 800afbe:	d8ef      	bhi.n	800afa0 <__ssvfiscanf_r+0xd0>
 800afc0:	a101      	add	r1, pc, #4	@ (adr r1, 800afc8 <__ssvfiscanf_r+0xf8>)
 800afc2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800b09b 	.word	0x0800b09b
 800afcc:	0800afa1 	.word	0x0800afa1
 800afd0:	0800afa1 	.word	0x0800afa1
 800afd4:	0800b0f5 	.word	0x0800b0f5
 800afd8:	0800afa1 	.word	0x0800afa1
 800afdc:	0800afa1 	.word	0x0800afa1
 800afe0:	0800afa1 	.word	0x0800afa1
 800afe4:	0800afa1 	.word	0x0800afa1
 800afe8:	0800afa1 	.word	0x0800afa1
 800afec:	0800afa1 	.word	0x0800afa1
 800aff0:	0800afa1 	.word	0x0800afa1
 800aff4:	0800b10b 	.word	0x0800b10b
 800aff8:	0800b0f1 	.word	0x0800b0f1
 800affc:	0800b053 	.word	0x0800b053
 800b000:	0800b053 	.word	0x0800b053
 800b004:	0800b053 	.word	0x0800b053
 800b008:	0800afa1 	.word	0x0800afa1
 800b00c:	0800b0ad 	.word	0x0800b0ad
 800b010:	0800afa1 	.word	0x0800afa1
 800b014:	0800afa1 	.word	0x0800afa1
 800b018:	0800afa1 	.word	0x0800afa1
 800b01c:	0800afa1 	.word	0x0800afa1
 800b020:	0800b11b 	.word	0x0800b11b
 800b024:	0800b0b5 	.word	0x0800b0b5
 800b028:	0800b093 	.word	0x0800b093
 800b02c:	0800afa1 	.word	0x0800afa1
 800b030:	0800afa1 	.word	0x0800afa1
 800b034:	0800b117 	.word	0x0800b117
 800b038:	0800afa1 	.word	0x0800afa1
 800b03c:	0800b0f1 	.word	0x0800b0f1
 800b040:	0800afa1 	.word	0x0800afa1
 800b044:	0800afa1 	.word	0x0800afa1
 800b048:	0800b09b 	.word	0x0800b09b
 800b04c:	3b45      	subs	r3, #69	@ 0x45
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d8a6      	bhi.n	800afa0 <__ssvfiscanf_r+0xd0>
 800b052:	2305      	movs	r3, #5
 800b054:	e031      	b.n	800b0ba <__ssvfiscanf_r+0x1ea>
 800b056:	6863      	ldr	r3, [r4, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dd0d      	ble.n	800b078 <__ssvfiscanf_r+0x1a8>
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	781a      	ldrb	r2, [r3, #0]
 800b060:	454a      	cmp	r2, r9
 800b062:	f040 80a6 	bne.w	800b1b2 <__ssvfiscanf_r+0x2e2>
 800b066:	3301      	adds	r3, #1
 800b068:	6862      	ldr	r2, [r4, #4]
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b06e:	3a01      	subs	r2, #1
 800b070:	3301      	adds	r3, #1
 800b072:	6062      	str	r2, [r4, #4]
 800b074:	9345      	str	r3, [sp, #276]	@ 0x114
 800b076:	e753      	b.n	800af20 <__ssvfiscanf_r+0x50>
 800b078:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b07a:	4621      	mov	r1, r4
 800b07c:	4630      	mov	r0, r6
 800b07e:	4798      	blx	r3
 800b080:	2800      	cmp	r0, #0
 800b082:	d0eb      	beq.n	800b05c <__ssvfiscanf_r+0x18c>
 800b084:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b086:	2800      	cmp	r0, #0
 800b088:	f040 808b 	bne.w	800b1a2 <__ssvfiscanf_r+0x2d2>
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	e08b      	b.n	800b1aa <__ssvfiscanf_r+0x2da>
 800b092:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b094:	f042 0220 	orr.w	r2, r2, #32
 800b098:	9241      	str	r2, [sp, #260]	@ 0x104
 800b09a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b09c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0a0:	9241      	str	r2, [sp, #260]	@ 0x104
 800b0a2:	2210      	movs	r2, #16
 800b0a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800b0a6:	9242      	str	r2, [sp, #264]	@ 0x108
 800b0a8:	d902      	bls.n	800b0b0 <__ssvfiscanf_r+0x1e0>
 800b0aa:	e005      	b.n	800b0b8 <__ssvfiscanf_r+0x1e8>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9342      	str	r3, [sp, #264]	@ 0x108
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e002      	b.n	800b0ba <__ssvfiscanf_r+0x1ea>
 800b0b4:	2308      	movs	r3, #8
 800b0b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b0bc:	6863      	ldr	r3, [r4, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	dd39      	ble.n	800b136 <__ssvfiscanf_r+0x266>
 800b0c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b0c4:	0659      	lsls	r1, r3, #25
 800b0c6:	d404      	bmi.n	800b0d2 <__ssvfiscanf_r+0x202>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	5cba      	ldrb	r2, [r7, r2]
 800b0ce:	0712      	lsls	r2, r2, #28
 800b0d0:	d438      	bmi.n	800b144 <__ssvfiscanf_r+0x274>
 800b0d2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	dc47      	bgt.n	800b168 <__ssvfiscanf_r+0x298>
 800b0d8:	466b      	mov	r3, sp
 800b0da:	4622      	mov	r2, r4
 800b0dc:	a941      	add	r1, sp, #260	@ 0x104
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f000 f86c 	bl	800b1bc <_scanf_chars>
 800b0e4:	2801      	cmp	r0, #1
 800b0e6:	d064      	beq.n	800b1b2 <__ssvfiscanf_r+0x2e2>
 800b0e8:	2802      	cmp	r0, #2
 800b0ea:	f47f af19 	bne.w	800af20 <__ssvfiscanf_r+0x50>
 800b0ee:	e7c9      	b.n	800b084 <__ssvfiscanf_r+0x1b4>
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	e7d7      	b.n	800b0a4 <__ssvfiscanf_r+0x1d4>
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	f000 fa5a 	bl	800b5b0 <__sccl>
 800b0fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b102:	9341      	str	r3, [sp, #260]	@ 0x104
 800b104:	4605      	mov	r5, r0
 800b106:	2301      	movs	r3, #1
 800b108:	e7d7      	b.n	800b0ba <__ssvfiscanf_r+0x1ea>
 800b10a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b10c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b110:	9341      	str	r3, [sp, #260]	@ 0x104
 800b112:	2300      	movs	r3, #0
 800b114:	e7d1      	b.n	800b0ba <__ssvfiscanf_r+0x1ea>
 800b116:	2302      	movs	r3, #2
 800b118:	e7cf      	b.n	800b0ba <__ssvfiscanf_r+0x1ea>
 800b11a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b11c:	06c3      	lsls	r3, r0, #27
 800b11e:	f53f aeff 	bmi.w	800af20 <__ssvfiscanf_r+0x50>
 800b122:	9b00      	ldr	r3, [sp, #0]
 800b124:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b126:	1d19      	adds	r1, r3, #4
 800b128:	9100      	str	r1, [sp, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	07c0      	lsls	r0, r0, #31
 800b12e:	bf4c      	ite	mi
 800b130:	801a      	strhmi	r2, [r3, #0]
 800b132:	601a      	strpl	r2, [r3, #0]
 800b134:	e6f4      	b.n	800af20 <__ssvfiscanf_r+0x50>
 800b136:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b138:	4621      	mov	r1, r4
 800b13a:	4630      	mov	r0, r6
 800b13c:	4798      	blx	r3
 800b13e:	2800      	cmp	r0, #0
 800b140:	d0bf      	beq.n	800b0c2 <__ssvfiscanf_r+0x1f2>
 800b142:	e79f      	b.n	800b084 <__ssvfiscanf_r+0x1b4>
 800b144:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b146:	3201      	adds	r2, #1
 800b148:	9245      	str	r2, [sp, #276]	@ 0x114
 800b14a:	6862      	ldr	r2, [r4, #4]
 800b14c:	3a01      	subs	r2, #1
 800b14e:	2a00      	cmp	r2, #0
 800b150:	6062      	str	r2, [r4, #4]
 800b152:	dd02      	ble.n	800b15a <__ssvfiscanf_r+0x28a>
 800b154:	3301      	adds	r3, #1
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	e7b6      	b.n	800b0c8 <__ssvfiscanf_r+0x1f8>
 800b15a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b15c:	4621      	mov	r1, r4
 800b15e:	4630      	mov	r0, r6
 800b160:	4798      	blx	r3
 800b162:	2800      	cmp	r0, #0
 800b164:	d0b0      	beq.n	800b0c8 <__ssvfiscanf_r+0x1f8>
 800b166:	e78d      	b.n	800b084 <__ssvfiscanf_r+0x1b4>
 800b168:	2b04      	cmp	r3, #4
 800b16a:	dc0f      	bgt.n	800b18c <__ssvfiscanf_r+0x2bc>
 800b16c:	466b      	mov	r3, sp
 800b16e:	4622      	mov	r2, r4
 800b170:	a941      	add	r1, sp, #260	@ 0x104
 800b172:	4630      	mov	r0, r6
 800b174:	f000 f87c 	bl	800b270 <_scanf_i>
 800b178:	e7b4      	b.n	800b0e4 <__ssvfiscanf_r+0x214>
 800b17a:	bf00      	nop
 800b17c:	0800ae1d 	.word	0x0800ae1d
 800b180:	0800ae97 	.word	0x0800ae97
 800b184:	0800cf39 	.word	0x0800cf39
 800b188:	0800cd21 	.word	0x0800cd21
 800b18c:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b8 <__ssvfiscanf_r+0x2e8>)
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f43f aec6 	beq.w	800af20 <__ssvfiscanf_r+0x50>
 800b194:	466b      	mov	r3, sp
 800b196:	4622      	mov	r2, r4
 800b198:	a941      	add	r1, sp, #260	@ 0x104
 800b19a:	4630      	mov	r0, r6
 800b19c:	f7fc fe56 	bl	8007e4c <_scanf_float>
 800b1a0:	e7a0      	b.n	800b0e4 <__ssvfiscanf_r+0x214>
 800b1a2:	89a3      	ldrh	r3, [r4, #12]
 800b1a4:	065b      	lsls	r3, r3, #25
 800b1a6:	f53f af71 	bmi.w	800b08c <__ssvfiscanf_r+0x1bc>
 800b1aa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800b1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b1b4:	e7f9      	b.n	800b1aa <__ssvfiscanf_r+0x2da>
 800b1b6:	bf00      	nop
 800b1b8:	08007e4d 	.word	0x08007e4d

0800b1bc <_scanf_chars>:
 800b1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c0:	4615      	mov	r5, r2
 800b1c2:	688a      	ldr	r2, [r1, #8]
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	b932      	cbnz	r2, 800b1d8 <_scanf_chars+0x1c>
 800b1ca:	698a      	ldr	r2, [r1, #24]
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	bf14      	ite	ne
 800b1d0:	f04f 32ff 	movne.w	r2, #4294967295
 800b1d4:	2201      	moveq	r2, #1
 800b1d6:	608a      	str	r2, [r1, #8]
 800b1d8:	6822      	ldr	r2, [r4, #0]
 800b1da:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b26c <_scanf_chars+0xb0>
 800b1de:	06d1      	lsls	r1, r2, #27
 800b1e0:	bf5f      	itttt	pl
 800b1e2:	681a      	ldrpl	r2, [r3, #0]
 800b1e4:	1d11      	addpl	r1, r2, #4
 800b1e6:	6019      	strpl	r1, [r3, #0]
 800b1e8:	6816      	ldrpl	r6, [r2, #0]
 800b1ea:	2700      	movs	r7, #0
 800b1ec:	69a0      	ldr	r0, [r4, #24]
 800b1ee:	b188      	cbz	r0, 800b214 <_scanf_chars+0x58>
 800b1f0:	2801      	cmp	r0, #1
 800b1f2:	d107      	bne.n	800b204 <_scanf_chars+0x48>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	6963      	ldr	r3, [r4, #20]
 800b1fa:	5c9b      	ldrb	r3, [r3, r2]
 800b1fc:	b953      	cbnz	r3, 800b214 <_scanf_chars+0x58>
 800b1fe:	2f00      	cmp	r7, #0
 800b200:	d031      	beq.n	800b266 <_scanf_chars+0xaa>
 800b202:	e022      	b.n	800b24a <_scanf_chars+0x8e>
 800b204:	2802      	cmp	r0, #2
 800b206:	d120      	bne.n	800b24a <_scanf_chars+0x8e>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b210:	071b      	lsls	r3, r3, #28
 800b212:	d41a      	bmi.n	800b24a <_scanf_chars+0x8e>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	06da      	lsls	r2, r3, #27
 800b218:	bf5e      	ittt	pl
 800b21a:	682b      	ldrpl	r3, [r5, #0]
 800b21c:	781b      	ldrbpl	r3, [r3, #0]
 800b21e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b222:	682a      	ldr	r2, [r5, #0]
 800b224:	686b      	ldr	r3, [r5, #4]
 800b226:	3201      	adds	r2, #1
 800b228:	602a      	str	r2, [r5, #0]
 800b22a:	68a2      	ldr	r2, [r4, #8]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	3a01      	subs	r2, #1
 800b230:	606b      	str	r3, [r5, #4]
 800b232:	3701      	adds	r7, #1
 800b234:	60a2      	str	r2, [r4, #8]
 800b236:	b142      	cbz	r2, 800b24a <_scanf_chars+0x8e>
 800b238:	2b00      	cmp	r3, #0
 800b23a:	dcd7      	bgt.n	800b1ec <_scanf_chars+0x30>
 800b23c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b240:	4629      	mov	r1, r5
 800b242:	4640      	mov	r0, r8
 800b244:	4798      	blx	r3
 800b246:	2800      	cmp	r0, #0
 800b248:	d0d0      	beq.n	800b1ec <_scanf_chars+0x30>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	f013 0310 	ands.w	r3, r3, #16
 800b250:	d105      	bne.n	800b25e <_scanf_chars+0xa2>
 800b252:	68e2      	ldr	r2, [r4, #12]
 800b254:	3201      	adds	r2, #1
 800b256:	60e2      	str	r2, [r4, #12]
 800b258:	69a2      	ldr	r2, [r4, #24]
 800b25a:	b102      	cbz	r2, 800b25e <_scanf_chars+0xa2>
 800b25c:	7033      	strb	r3, [r6, #0]
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	443b      	add	r3, r7
 800b262:	6123      	str	r3, [r4, #16]
 800b264:	2000      	movs	r0, #0
 800b266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26a:	bf00      	nop
 800b26c:	0800cf39 	.word	0x0800cf39

0800b270 <_scanf_i>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	4698      	mov	r8, r3
 800b276:	4b74      	ldr	r3, [pc, #464]	@ (800b448 <_scanf_i+0x1d8>)
 800b278:	460c      	mov	r4, r1
 800b27a:	4682      	mov	sl, r0
 800b27c:	4616      	mov	r6, r2
 800b27e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b282:	b087      	sub	sp, #28
 800b284:	ab03      	add	r3, sp, #12
 800b286:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b28a:	4b70      	ldr	r3, [pc, #448]	@ (800b44c <_scanf_i+0x1dc>)
 800b28c:	69a1      	ldr	r1, [r4, #24]
 800b28e:	4a70      	ldr	r2, [pc, #448]	@ (800b450 <_scanf_i+0x1e0>)
 800b290:	2903      	cmp	r1, #3
 800b292:	bf08      	it	eq
 800b294:	461a      	moveq	r2, r3
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	9201      	str	r2, [sp, #4]
 800b29a:	1e5a      	subs	r2, r3, #1
 800b29c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b2a0:	bf88      	it	hi
 800b2a2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b2a6:	4627      	mov	r7, r4
 800b2a8:	bf82      	ittt	hi
 800b2aa:	eb03 0905 	addhi.w	r9, r3, r5
 800b2ae:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b2b2:	60a3      	strhi	r3, [r4, #8]
 800b2b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b2b8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b2bc:	bf98      	it	ls
 800b2be:	f04f 0900 	movls.w	r9, #0
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	463d      	mov	r5, r7
 800b2c6:	f04f 0b00 	mov.w	fp, #0
 800b2ca:	6831      	ldr	r1, [r6, #0]
 800b2cc:	ab03      	add	r3, sp, #12
 800b2ce:	7809      	ldrb	r1, [r1, #0]
 800b2d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	f7f4 ff7b 	bl	80001d0 <memchr>
 800b2da:	b328      	cbz	r0, 800b328 <_scanf_i+0xb8>
 800b2dc:	f1bb 0f01 	cmp.w	fp, #1
 800b2e0:	d159      	bne.n	800b396 <_scanf_i+0x126>
 800b2e2:	6862      	ldr	r2, [r4, #4]
 800b2e4:	b92a      	cbnz	r2, 800b2f2 <_scanf_i+0x82>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	2108      	movs	r1, #8
 800b2ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2ee:	6061      	str	r1, [r4, #4]
 800b2f0:	6022      	str	r2, [r4, #0]
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b2f8:	6022      	str	r2, [r4, #0]
 800b2fa:	68a2      	ldr	r2, [r4, #8]
 800b2fc:	1e51      	subs	r1, r2, #1
 800b2fe:	60a1      	str	r1, [r4, #8]
 800b300:	b192      	cbz	r2, 800b328 <_scanf_i+0xb8>
 800b302:	6832      	ldr	r2, [r6, #0]
 800b304:	1c51      	adds	r1, r2, #1
 800b306:	6031      	str	r1, [r6, #0]
 800b308:	7812      	ldrb	r2, [r2, #0]
 800b30a:	f805 2b01 	strb.w	r2, [r5], #1
 800b30e:	6872      	ldr	r2, [r6, #4]
 800b310:	3a01      	subs	r2, #1
 800b312:	2a00      	cmp	r2, #0
 800b314:	6072      	str	r2, [r6, #4]
 800b316:	dc07      	bgt.n	800b328 <_scanf_i+0xb8>
 800b318:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b31c:	4631      	mov	r1, r6
 800b31e:	4650      	mov	r0, sl
 800b320:	4790      	blx	r2
 800b322:	2800      	cmp	r0, #0
 800b324:	f040 8085 	bne.w	800b432 <_scanf_i+0x1c2>
 800b328:	f10b 0b01 	add.w	fp, fp, #1
 800b32c:	f1bb 0f03 	cmp.w	fp, #3
 800b330:	d1cb      	bne.n	800b2ca <_scanf_i+0x5a>
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	b90b      	cbnz	r3, 800b33a <_scanf_i+0xca>
 800b336:	230a      	movs	r3, #10
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	6863      	ldr	r3, [r4, #4]
 800b33c:	4945      	ldr	r1, [pc, #276]	@ (800b454 <_scanf_i+0x1e4>)
 800b33e:	6960      	ldr	r0, [r4, #20]
 800b340:	1ac9      	subs	r1, r1, r3
 800b342:	f000 f935 	bl	800b5b0 <__sccl>
 800b346:	f04f 0b00 	mov.w	fp, #0
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d03d      	beq.n	800b3ce <_scanf_i+0x15e>
 800b352:	6831      	ldr	r1, [r6, #0]
 800b354:	6960      	ldr	r0, [r4, #20]
 800b356:	f891 c000 	ldrb.w	ip, [r1]
 800b35a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b35e:	2800      	cmp	r0, #0
 800b360:	d035      	beq.n	800b3ce <_scanf_i+0x15e>
 800b362:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b366:	d124      	bne.n	800b3b2 <_scanf_i+0x142>
 800b368:	0510      	lsls	r0, r2, #20
 800b36a:	d522      	bpl.n	800b3b2 <_scanf_i+0x142>
 800b36c:	f10b 0b01 	add.w	fp, fp, #1
 800b370:	f1b9 0f00 	cmp.w	r9, #0
 800b374:	d003      	beq.n	800b37e <_scanf_i+0x10e>
 800b376:	3301      	adds	r3, #1
 800b378:	f109 39ff 	add.w	r9, r9, #4294967295
 800b37c:	60a3      	str	r3, [r4, #8]
 800b37e:	6873      	ldr	r3, [r6, #4]
 800b380:	3b01      	subs	r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	6073      	str	r3, [r6, #4]
 800b386:	dd1b      	ble.n	800b3c0 <_scanf_i+0x150>
 800b388:	6833      	ldr	r3, [r6, #0]
 800b38a:	3301      	adds	r3, #1
 800b38c:	6033      	str	r3, [r6, #0]
 800b38e:	68a3      	ldr	r3, [r4, #8]
 800b390:	3b01      	subs	r3, #1
 800b392:	60a3      	str	r3, [r4, #8]
 800b394:	e7d9      	b.n	800b34a <_scanf_i+0xda>
 800b396:	f1bb 0f02 	cmp.w	fp, #2
 800b39a:	d1ae      	bne.n	800b2fa <_scanf_i+0x8a>
 800b39c:	6822      	ldr	r2, [r4, #0]
 800b39e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b3a2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b3a6:	d1c4      	bne.n	800b332 <_scanf_i+0xc2>
 800b3a8:	2110      	movs	r1, #16
 800b3aa:	6061      	str	r1, [r4, #4]
 800b3ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3b0:	e7a2      	b.n	800b2f8 <_scanf_i+0x88>
 800b3b2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b3b6:	6022      	str	r2, [r4, #0]
 800b3b8:	780b      	ldrb	r3, [r1, #0]
 800b3ba:	f805 3b01 	strb.w	r3, [r5], #1
 800b3be:	e7de      	b.n	800b37e <_scanf_i+0x10e>
 800b3c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4650      	mov	r0, sl
 800b3c8:	4798      	blx	r3
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d0df      	beq.n	800b38e <_scanf_i+0x11e>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	05d9      	lsls	r1, r3, #23
 800b3d2:	d50d      	bpl.n	800b3f0 <_scanf_i+0x180>
 800b3d4:	42bd      	cmp	r5, r7
 800b3d6:	d909      	bls.n	800b3ec <_scanf_i+0x17c>
 800b3d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b3dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	4798      	blx	r3
 800b3e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b3ea:	464d      	mov	r5, r9
 800b3ec:	42bd      	cmp	r5, r7
 800b3ee:	d028      	beq.n	800b442 <_scanf_i+0x1d2>
 800b3f0:	6822      	ldr	r2, [r4, #0]
 800b3f2:	f012 0210 	ands.w	r2, r2, #16
 800b3f6:	d113      	bne.n	800b420 <_scanf_i+0x1b0>
 800b3f8:	702a      	strb	r2, [r5, #0]
 800b3fa:	6863      	ldr	r3, [r4, #4]
 800b3fc:	9e01      	ldr	r6, [sp, #4]
 800b3fe:	4639      	mov	r1, r7
 800b400:	4650      	mov	r0, sl
 800b402:	47b0      	blx	r6
 800b404:	f8d8 3000 	ldr.w	r3, [r8]
 800b408:	6821      	ldr	r1, [r4, #0]
 800b40a:	1d1a      	adds	r2, r3, #4
 800b40c:	f8c8 2000 	str.w	r2, [r8]
 800b410:	f011 0f20 	tst.w	r1, #32
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	d00f      	beq.n	800b438 <_scanf_i+0x1c8>
 800b418:	6018      	str	r0, [r3, #0]
 800b41a:	68e3      	ldr	r3, [r4, #12]
 800b41c:	3301      	adds	r3, #1
 800b41e:	60e3      	str	r3, [r4, #12]
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	1bed      	subs	r5, r5, r7
 800b424:	445d      	add	r5, fp
 800b426:	442b      	add	r3, r5
 800b428:	6123      	str	r3, [r4, #16]
 800b42a:	2000      	movs	r0, #0
 800b42c:	b007      	add	sp, #28
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	f04f 0b00 	mov.w	fp, #0
 800b436:	e7ca      	b.n	800b3ce <_scanf_i+0x15e>
 800b438:	07ca      	lsls	r2, r1, #31
 800b43a:	bf4c      	ite	mi
 800b43c:	8018      	strhmi	r0, [r3, #0]
 800b43e:	6018      	strpl	r0, [r3, #0]
 800b440:	e7eb      	b.n	800b41a <_scanf_i+0x1aa>
 800b442:	2001      	movs	r0, #1
 800b444:	e7f2      	b.n	800b42c <_scanf_i+0x1bc>
 800b446:	bf00      	nop
 800b448:	0800c538 	.word	0x0800c538
 800b44c:	0800ab69 	.word	0x0800ab69
 800b450:	0800bf55 	.word	0x0800bf55
 800b454:	0800cd3c 	.word	0x0800cd3c

0800b458 <__sflush_r>:
 800b458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b460:	0716      	lsls	r6, r2, #28
 800b462:	4605      	mov	r5, r0
 800b464:	460c      	mov	r4, r1
 800b466:	d454      	bmi.n	800b512 <__sflush_r+0xba>
 800b468:	684b      	ldr	r3, [r1, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	dc02      	bgt.n	800b474 <__sflush_r+0x1c>
 800b46e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b470:	2b00      	cmp	r3, #0
 800b472:	dd48      	ble.n	800b506 <__sflush_r+0xae>
 800b474:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b476:	2e00      	cmp	r6, #0
 800b478:	d045      	beq.n	800b506 <__sflush_r+0xae>
 800b47a:	2300      	movs	r3, #0
 800b47c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b480:	682f      	ldr	r7, [r5, #0]
 800b482:	6a21      	ldr	r1, [r4, #32]
 800b484:	602b      	str	r3, [r5, #0]
 800b486:	d030      	beq.n	800b4ea <__sflush_r+0x92>
 800b488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	0759      	lsls	r1, r3, #29
 800b48e:	d505      	bpl.n	800b49c <__sflush_r+0x44>
 800b490:	6863      	ldr	r3, [r4, #4]
 800b492:	1ad2      	subs	r2, r2, r3
 800b494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b496:	b10b      	cbz	r3, 800b49c <__sflush_r+0x44>
 800b498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b49a:	1ad2      	subs	r2, r2, r3
 800b49c:	2300      	movs	r3, #0
 800b49e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4a0:	6a21      	ldr	r1, [r4, #32]
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b0      	blx	r6
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	d106      	bne.n	800b4ba <__sflush_r+0x62>
 800b4ac:	6829      	ldr	r1, [r5, #0]
 800b4ae:	291d      	cmp	r1, #29
 800b4b0:	d82b      	bhi.n	800b50a <__sflush_r+0xb2>
 800b4b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b55c <__sflush_r+0x104>)
 800b4b4:	40ca      	lsrs	r2, r1
 800b4b6:	07d6      	lsls	r6, r2, #31
 800b4b8:	d527      	bpl.n	800b50a <__sflush_r+0xb2>
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	6062      	str	r2, [r4, #4]
 800b4be:	04d9      	lsls	r1, r3, #19
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	6022      	str	r2, [r4, #0]
 800b4c4:	d504      	bpl.n	800b4d0 <__sflush_r+0x78>
 800b4c6:	1c42      	adds	r2, r0, #1
 800b4c8:	d101      	bne.n	800b4ce <__sflush_r+0x76>
 800b4ca:	682b      	ldr	r3, [r5, #0]
 800b4cc:	b903      	cbnz	r3, 800b4d0 <__sflush_r+0x78>
 800b4ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4d2:	602f      	str	r7, [r5, #0]
 800b4d4:	b1b9      	cbz	r1, 800b506 <__sflush_r+0xae>
 800b4d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4da:	4299      	cmp	r1, r3
 800b4dc:	d002      	beq.n	800b4e4 <__sflush_r+0x8c>
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f7fd ff16 	bl	8009310 <_free_r>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4e8:	e00d      	b.n	800b506 <__sflush_r+0xae>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	47b0      	blx	r6
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	1c50      	adds	r0, r2, #1
 800b4f4:	d1c9      	bne.n	800b48a <__sflush_r+0x32>
 800b4f6:	682b      	ldr	r3, [r5, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d0c6      	beq.n	800b48a <__sflush_r+0x32>
 800b4fc:	2b1d      	cmp	r3, #29
 800b4fe:	d001      	beq.n	800b504 <__sflush_r+0xac>
 800b500:	2b16      	cmp	r3, #22
 800b502:	d11e      	bne.n	800b542 <__sflush_r+0xea>
 800b504:	602f      	str	r7, [r5, #0]
 800b506:	2000      	movs	r0, #0
 800b508:	e022      	b.n	800b550 <__sflush_r+0xf8>
 800b50a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b50e:	b21b      	sxth	r3, r3
 800b510:	e01b      	b.n	800b54a <__sflush_r+0xf2>
 800b512:	690f      	ldr	r7, [r1, #16]
 800b514:	2f00      	cmp	r7, #0
 800b516:	d0f6      	beq.n	800b506 <__sflush_r+0xae>
 800b518:	0793      	lsls	r3, r2, #30
 800b51a:	680e      	ldr	r6, [r1, #0]
 800b51c:	bf08      	it	eq
 800b51e:	694b      	ldreq	r3, [r1, #20]
 800b520:	600f      	str	r7, [r1, #0]
 800b522:	bf18      	it	ne
 800b524:	2300      	movne	r3, #0
 800b526:	eba6 0807 	sub.w	r8, r6, r7
 800b52a:	608b      	str	r3, [r1, #8]
 800b52c:	f1b8 0f00 	cmp.w	r8, #0
 800b530:	dde9      	ble.n	800b506 <__sflush_r+0xae>
 800b532:	6a21      	ldr	r1, [r4, #32]
 800b534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b536:	4643      	mov	r3, r8
 800b538:	463a      	mov	r2, r7
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b0      	blx	r6
 800b53e:	2800      	cmp	r0, #0
 800b540:	dc08      	bgt.n	800b554 <__sflush_r+0xfc>
 800b542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	f04f 30ff 	mov.w	r0, #4294967295
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	4407      	add	r7, r0
 800b556:	eba8 0800 	sub.w	r8, r8, r0
 800b55a:	e7e7      	b.n	800b52c <__sflush_r+0xd4>
 800b55c:	20400001 	.word	0x20400001

0800b560 <_fflush_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	690b      	ldr	r3, [r1, #16]
 800b564:	4605      	mov	r5, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b913      	cbnz	r3, 800b570 <_fflush_r+0x10>
 800b56a:	2500      	movs	r5, #0
 800b56c:	4628      	mov	r0, r5
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	b118      	cbz	r0, 800b57a <_fflush_r+0x1a>
 800b572:	6a03      	ldr	r3, [r0, #32]
 800b574:	b90b      	cbnz	r3, 800b57a <_fflush_r+0x1a>
 800b576:	f7fc ff03 	bl	8008380 <__sinit>
 800b57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0f3      	beq.n	800b56a <_fflush_r+0xa>
 800b582:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b584:	07d0      	lsls	r0, r2, #31
 800b586:	d404      	bmi.n	800b592 <_fflush_r+0x32>
 800b588:	0599      	lsls	r1, r3, #22
 800b58a:	d402      	bmi.n	800b592 <_fflush_r+0x32>
 800b58c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b58e:	f7fd f84e 	bl	800862e <__retarget_lock_acquire_recursive>
 800b592:	4628      	mov	r0, r5
 800b594:	4621      	mov	r1, r4
 800b596:	f7ff ff5f 	bl	800b458 <__sflush_r>
 800b59a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b59c:	07da      	lsls	r2, r3, #31
 800b59e:	4605      	mov	r5, r0
 800b5a0:	d4e4      	bmi.n	800b56c <_fflush_r+0xc>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	059b      	lsls	r3, r3, #22
 800b5a6:	d4e1      	bmi.n	800b56c <_fflush_r+0xc>
 800b5a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5aa:	f7fd f841 	bl	8008630 <__retarget_lock_release_recursive>
 800b5ae:	e7dd      	b.n	800b56c <_fflush_r+0xc>

0800b5b0 <__sccl>:
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	780b      	ldrb	r3, [r1, #0]
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	2b5e      	cmp	r3, #94	@ 0x5e
 800b5b8:	bf0b      	itete	eq
 800b5ba:	784b      	ldrbeq	r3, [r1, #1]
 800b5bc:	1c4a      	addne	r2, r1, #1
 800b5be:	1c8a      	addeq	r2, r1, #2
 800b5c0:	2100      	movne	r1, #0
 800b5c2:	bf08      	it	eq
 800b5c4:	2101      	moveq	r1, #1
 800b5c6:	3801      	subs	r0, #1
 800b5c8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b5cc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b5d0:	42a8      	cmp	r0, r5
 800b5d2:	d1fb      	bne.n	800b5cc <__sccl+0x1c>
 800b5d4:	b90b      	cbnz	r3, 800b5da <__sccl+0x2a>
 800b5d6:	1e50      	subs	r0, r2, #1
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
 800b5da:	f081 0101 	eor.w	r1, r1, #1
 800b5de:	54e1      	strb	r1, [r4, r3]
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b5e8:	2d2d      	cmp	r5, #45	@ 0x2d
 800b5ea:	d005      	beq.n	800b5f8 <__sccl+0x48>
 800b5ec:	2d5d      	cmp	r5, #93	@ 0x5d
 800b5ee:	d016      	beq.n	800b61e <__sccl+0x6e>
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	d0f1      	beq.n	800b5d8 <__sccl+0x28>
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	e7f2      	b.n	800b5de <__sccl+0x2e>
 800b5f8:	7846      	ldrb	r6, [r0, #1]
 800b5fa:	2e5d      	cmp	r6, #93	@ 0x5d
 800b5fc:	d0fa      	beq.n	800b5f4 <__sccl+0x44>
 800b5fe:	42b3      	cmp	r3, r6
 800b600:	dcf8      	bgt.n	800b5f4 <__sccl+0x44>
 800b602:	3002      	adds	r0, #2
 800b604:	461a      	mov	r2, r3
 800b606:	3201      	adds	r2, #1
 800b608:	4296      	cmp	r6, r2
 800b60a:	54a1      	strb	r1, [r4, r2]
 800b60c:	dcfb      	bgt.n	800b606 <__sccl+0x56>
 800b60e:	1af2      	subs	r2, r6, r3
 800b610:	3a01      	subs	r2, #1
 800b612:	1c5d      	adds	r5, r3, #1
 800b614:	42b3      	cmp	r3, r6
 800b616:	bfa8      	it	ge
 800b618:	2200      	movge	r2, #0
 800b61a:	18ab      	adds	r3, r5, r2
 800b61c:	e7e1      	b.n	800b5e2 <__sccl+0x32>
 800b61e:	4610      	mov	r0, r2
 800b620:	e7da      	b.n	800b5d8 <__sccl+0x28>

0800b622 <__submore>:
 800b622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b626:	460c      	mov	r4, r1
 800b628:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b62a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b62e:	4299      	cmp	r1, r3
 800b630:	d11d      	bne.n	800b66e <__submore+0x4c>
 800b632:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b636:	f7fd fedf 	bl	80093f8 <_malloc_r>
 800b63a:	b918      	cbnz	r0, 800b644 <__submore+0x22>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b644:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b648:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b64a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b64e:	6360      	str	r0, [r4, #52]	@ 0x34
 800b650:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b654:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b658:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b65c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b660:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b664:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b668:	6020      	str	r0, [r4, #0]
 800b66a:	2000      	movs	r0, #0
 800b66c:	e7e8      	b.n	800b640 <__submore+0x1e>
 800b66e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b670:	0077      	lsls	r7, r6, #1
 800b672:	463a      	mov	r2, r7
 800b674:	f000 fbd1 	bl	800be1a <_realloc_r>
 800b678:	4605      	mov	r5, r0
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d0de      	beq.n	800b63c <__submore+0x1a>
 800b67e:	eb00 0806 	add.w	r8, r0, r6
 800b682:	4601      	mov	r1, r0
 800b684:	4632      	mov	r2, r6
 800b686:	4640      	mov	r0, r8
 800b688:	f7fc ffd3 	bl	8008632 <memcpy>
 800b68c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b690:	f8c4 8000 	str.w	r8, [r4]
 800b694:	e7e9      	b.n	800b66a <__submore+0x48>

0800b696 <memmove>:
 800b696:	4288      	cmp	r0, r1
 800b698:	b510      	push	{r4, lr}
 800b69a:	eb01 0402 	add.w	r4, r1, r2
 800b69e:	d902      	bls.n	800b6a6 <memmove+0x10>
 800b6a0:	4284      	cmp	r4, r0
 800b6a2:	4623      	mov	r3, r4
 800b6a4:	d807      	bhi.n	800b6b6 <memmove+0x20>
 800b6a6:	1e43      	subs	r3, r0, #1
 800b6a8:	42a1      	cmp	r1, r4
 800b6aa:	d008      	beq.n	800b6be <memmove+0x28>
 800b6ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6b4:	e7f8      	b.n	800b6a8 <memmove+0x12>
 800b6b6:	4402      	add	r2, r0
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	428a      	cmp	r2, r1
 800b6bc:	d100      	bne.n	800b6c0 <memmove+0x2a>
 800b6be:	bd10      	pop	{r4, pc}
 800b6c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6c8:	e7f7      	b.n	800b6ba <memmove+0x24>

0800b6ca <strncmp>:
 800b6ca:	b510      	push	{r4, lr}
 800b6cc:	b16a      	cbz	r2, 800b6ea <strncmp+0x20>
 800b6ce:	3901      	subs	r1, #1
 800b6d0:	1884      	adds	r4, r0, r2
 800b6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d103      	bne.n	800b6e6 <strncmp+0x1c>
 800b6de:	42a0      	cmp	r0, r4
 800b6e0:	d001      	beq.n	800b6e6 <strncmp+0x1c>
 800b6e2:	2a00      	cmp	r2, #0
 800b6e4:	d1f5      	bne.n	800b6d2 <strncmp+0x8>
 800b6e6:	1ad0      	subs	r0, r2, r3
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	4610      	mov	r0, r2
 800b6ec:	e7fc      	b.n	800b6e8 <strncmp+0x1e>
	...

0800b6f0 <_sbrk_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d06      	ldr	r5, [pc, #24]	@ (800b70c <_sbrk_r+0x1c>)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	f7f6 fa54 	bl	8001ba8 <_sbrk>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d102      	bne.n	800b70a <_sbrk_r+0x1a>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	b103      	cbz	r3, 800b70a <_sbrk_r+0x1a>
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	200013fc 	.word	0x200013fc

0800b710 <nan>:
 800b710:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b718 <nan+0x8>
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	00000000 	.word	0x00000000
 800b71c:	7ff80000 	.word	0x7ff80000

0800b720 <__assert_func>:
 800b720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b722:	4614      	mov	r4, r2
 800b724:	461a      	mov	r2, r3
 800b726:	4b09      	ldr	r3, [pc, #36]	@ (800b74c <__assert_func+0x2c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4605      	mov	r5, r0
 800b72c:	68d8      	ldr	r0, [r3, #12]
 800b72e:	b14c      	cbz	r4, 800b744 <__assert_func+0x24>
 800b730:	4b07      	ldr	r3, [pc, #28]	@ (800b750 <__assert_func+0x30>)
 800b732:	9100      	str	r1, [sp, #0]
 800b734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b738:	4906      	ldr	r1, [pc, #24]	@ (800b754 <__assert_func+0x34>)
 800b73a:	462b      	mov	r3, r5
 800b73c:	f000 fc1a 	bl	800bf74 <fiprintf>
 800b740:	f000 fc2a 	bl	800bf98 <abort>
 800b744:	4b04      	ldr	r3, [pc, #16]	@ (800b758 <__assert_func+0x38>)
 800b746:	461c      	mov	r4, r3
 800b748:	e7f3      	b.n	800b732 <__assert_func+0x12>
 800b74a:	bf00      	nop
 800b74c:	20000044 	.word	0x20000044
 800b750:	0800cd4f 	.word	0x0800cd4f
 800b754:	0800cd5c 	.word	0x0800cd5c
 800b758:	0800cd8a 	.word	0x0800cd8a

0800b75c <_calloc_r>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	fba1 5402 	umull	r5, r4, r1, r2
 800b762:	b934      	cbnz	r4, 800b772 <_calloc_r+0x16>
 800b764:	4629      	mov	r1, r5
 800b766:	f7fd fe47 	bl	80093f8 <_malloc_r>
 800b76a:	4606      	mov	r6, r0
 800b76c:	b928      	cbnz	r0, 800b77a <_calloc_r+0x1e>
 800b76e:	4630      	mov	r0, r6
 800b770:	bd70      	pop	{r4, r5, r6, pc}
 800b772:	220c      	movs	r2, #12
 800b774:	6002      	str	r2, [r0, #0]
 800b776:	2600      	movs	r6, #0
 800b778:	e7f9      	b.n	800b76e <_calloc_r+0x12>
 800b77a:	462a      	mov	r2, r5
 800b77c:	4621      	mov	r1, r4
 800b77e:	f7fc fed8 	bl	8008532 <memset>
 800b782:	e7f4      	b.n	800b76e <_calloc_r+0x12>

0800b784 <rshift>:
 800b784:	6903      	ldr	r3, [r0, #16]
 800b786:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b78a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b78e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b792:	f100 0414 	add.w	r4, r0, #20
 800b796:	dd45      	ble.n	800b824 <rshift+0xa0>
 800b798:	f011 011f 	ands.w	r1, r1, #31
 800b79c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7a4:	d10c      	bne.n	800b7c0 <rshift+0x3c>
 800b7a6:	f100 0710 	add.w	r7, r0, #16
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	42b1      	cmp	r1, r6
 800b7ae:	d334      	bcc.n	800b81a <rshift+0x96>
 800b7b0:	1a9b      	subs	r3, r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	1eea      	subs	r2, r5, #3
 800b7b6:	4296      	cmp	r6, r2
 800b7b8:	bf38      	it	cc
 800b7ba:	2300      	movcc	r3, #0
 800b7bc:	4423      	add	r3, r4
 800b7be:	e015      	b.n	800b7ec <rshift+0x68>
 800b7c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7c4:	f1c1 0820 	rsb	r8, r1, #32
 800b7c8:	40cf      	lsrs	r7, r1
 800b7ca:	f105 0e04 	add.w	lr, r5, #4
 800b7ce:	46a1      	mov	r9, r4
 800b7d0:	4576      	cmp	r6, lr
 800b7d2:	46f4      	mov	ip, lr
 800b7d4:	d815      	bhi.n	800b802 <rshift+0x7e>
 800b7d6:	1a9a      	subs	r2, r3, r2
 800b7d8:	0092      	lsls	r2, r2, #2
 800b7da:	3a04      	subs	r2, #4
 800b7dc:	3501      	adds	r5, #1
 800b7de:	42ae      	cmp	r6, r5
 800b7e0:	bf38      	it	cc
 800b7e2:	2200      	movcc	r2, #0
 800b7e4:	18a3      	adds	r3, r4, r2
 800b7e6:	50a7      	str	r7, [r4, r2]
 800b7e8:	b107      	cbz	r7, 800b7ec <rshift+0x68>
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	1b1a      	subs	r2, r3, r4
 800b7ee:	42a3      	cmp	r3, r4
 800b7f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b7f4:	bf08      	it	eq
 800b7f6:	2300      	moveq	r3, #0
 800b7f8:	6102      	str	r2, [r0, #16]
 800b7fa:	bf08      	it	eq
 800b7fc:	6143      	streq	r3, [r0, #20]
 800b7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b802:	f8dc c000 	ldr.w	ip, [ip]
 800b806:	fa0c fc08 	lsl.w	ip, ip, r8
 800b80a:	ea4c 0707 	orr.w	r7, ip, r7
 800b80e:	f849 7b04 	str.w	r7, [r9], #4
 800b812:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b816:	40cf      	lsrs	r7, r1
 800b818:	e7da      	b.n	800b7d0 <rshift+0x4c>
 800b81a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b81e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b822:	e7c3      	b.n	800b7ac <rshift+0x28>
 800b824:	4623      	mov	r3, r4
 800b826:	e7e1      	b.n	800b7ec <rshift+0x68>

0800b828 <__hexdig_fun>:
 800b828:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b82c:	2b09      	cmp	r3, #9
 800b82e:	d802      	bhi.n	800b836 <__hexdig_fun+0xe>
 800b830:	3820      	subs	r0, #32
 800b832:	b2c0      	uxtb	r0, r0
 800b834:	4770      	bx	lr
 800b836:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b83a:	2b05      	cmp	r3, #5
 800b83c:	d801      	bhi.n	800b842 <__hexdig_fun+0x1a>
 800b83e:	3847      	subs	r0, #71	@ 0x47
 800b840:	e7f7      	b.n	800b832 <__hexdig_fun+0xa>
 800b842:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b846:	2b05      	cmp	r3, #5
 800b848:	d801      	bhi.n	800b84e <__hexdig_fun+0x26>
 800b84a:	3827      	subs	r0, #39	@ 0x27
 800b84c:	e7f1      	b.n	800b832 <__hexdig_fun+0xa>
 800b84e:	2000      	movs	r0, #0
 800b850:	4770      	bx	lr
	...

0800b854 <__gethex>:
 800b854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	b085      	sub	sp, #20
 800b85a:	468a      	mov	sl, r1
 800b85c:	9302      	str	r3, [sp, #8]
 800b85e:	680b      	ldr	r3, [r1, #0]
 800b860:	9001      	str	r0, [sp, #4]
 800b862:	4690      	mov	r8, r2
 800b864:	1c9c      	adds	r4, r3, #2
 800b866:	46a1      	mov	r9, r4
 800b868:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b86c:	2830      	cmp	r0, #48	@ 0x30
 800b86e:	d0fa      	beq.n	800b866 <__gethex+0x12>
 800b870:	eba9 0303 	sub.w	r3, r9, r3
 800b874:	f1a3 0b02 	sub.w	fp, r3, #2
 800b878:	f7ff ffd6 	bl	800b828 <__hexdig_fun>
 800b87c:	4605      	mov	r5, r0
 800b87e:	2800      	cmp	r0, #0
 800b880:	d168      	bne.n	800b954 <__gethex+0x100>
 800b882:	49a0      	ldr	r1, [pc, #640]	@ (800bb04 <__gethex+0x2b0>)
 800b884:	2201      	movs	r2, #1
 800b886:	4648      	mov	r0, r9
 800b888:	f7ff ff1f 	bl	800b6ca <strncmp>
 800b88c:	4607      	mov	r7, r0
 800b88e:	2800      	cmp	r0, #0
 800b890:	d167      	bne.n	800b962 <__gethex+0x10e>
 800b892:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b896:	4626      	mov	r6, r4
 800b898:	f7ff ffc6 	bl	800b828 <__hexdig_fun>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d062      	beq.n	800b966 <__gethex+0x112>
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	7818      	ldrb	r0, [r3, #0]
 800b8a4:	2830      	cmp	r0, #48	@ 0x30
 800b8a6:	4699      	mov	r9, r3
 800b8a8:	f103 0301 	add.w	r3, r3, #1
 800b8ac:	d0f9      	beq.n	800b8a2 <__gethex+0x4e>
 800b8ae:	f7ff ffbb 	bl	800b828 <__hexdig_fun>
 800b8b2:	fab0 f580 	clz	r5, r0
 800b8b6:	096d      	lsrs	r5, r5, #5
 800b8b8:	f04f 0b01 	mov.w	fp, #1
 800b8bc:	464a      	mov	r2, r9
 800b8be:	4616      	mov	r6, r2
 800b8c0:	3201      	adds	r2, #1
 800b8c2:	7830      	ldrb	r0, [r6, #0]
 800b8c4:	f7ff ffb0 	bl	800b828 <__hexdig_fun>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1f8      	bne.n	800b8be <__gethex+0x6a>
 800b8cc:	498d      	ldr	r1, [pc, #564]	@ (800bb04 <__gethex+0x2b0>)
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f7ff fefa 	bl	800b6ca <strncmp>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d13f      	bne.n	800b95a <__gethex+0x106>
 800b8da:	b944      	cbnz	r4, 800b8ee <__gethex+0x9a>
 800b8dc:	1c74      	adds	r4, r6, #1
 800b8de:	4622      	mov	r2, r4
 800b8e0:	4616      	mov	r6, r2
 800b8e2:	3201      	adds	r2, #1
 800b8e4:	7830      	ldrb	r0, [r6, #0]
 800b8e6:	f7ff ff9f 	bl	800b828 <__hexdig_fun>
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	d1f8      	bne.n	800b8e0 <__gethex+0x8c>
 800b8ee:	1ba4      	subs	r4, r4, r6
 800b8f0:	00a7      	lsls	r7, r4, #2
 800b8f2:	7833      	ldrb	r3, [r6, #0]
 800b8f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b8f8:	2b50      	cmp	r3, #80	@ 0x50
 800b8fa:	d13e      	bne.n	800b97a <__gethex+0x126>
 800b8fc:	7873      	ldrb	r3, [r6, #1]
 800b8fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800b900:	d033      	beq.n	800b96a <__gethex+0x116>
 800b902:	2b2d      	cmp	r3, #45	@ 0x2d
 800b904:	d034      	beq.n	800b970 <__gethex+0x11c>
 800b906:	1c71      	adds	r1, r6, #1
 800b908:	2400      	movs	r4, #0
 800b90a:	7808      	ldrb	r0, [r1, #0]
 800b90c:	f7ff ff8c 	bl	800b828 <__hexdig_fun>
 800b910:	1e43      	subs	r3, r0, #1
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b18      	cmp	r3, #24
 800b916:	d830      	bhi.n	800b97a <__gethex+0x126>
 800b918:	f1a0 0210 	sub.w	r2, r0, #16
 800b91c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b920:	f7ff ff82 	bl	800b828 <__hexdig_fun>
 800b924:	f100 3cff 	add.w	ip, r0, #4294967295
 800b928:	fa5f fc8c 	uxtb.w	ip, ip
 800b92c:	f1bc 0f18 	cmp.w	ip, #24
 800b930:	f04f 030a 	mov.w	r3, #10
 800b934:	d91e      	bls.n	800b974 <__gethex+0x120>
 800b936:	b104      	cbz	r4, 800b93a <__gethex+0xe6>
 800b938:	4252      	negs	r2, r2
 800b93a:	4417      	add	r7, r2
 800b93c:	f8ca 1000 	str.w	r1, [sl]
 800b940:	b1ed      	cbz	r5, 800b97e <__gethex+0x12a>
 800b942:	f1bb 0f00 	cmp.w	fp, #0
 800b946:	bf0c      	ite	eq
 800b948:	2506      	moveq	r5, #6
 800b94a:	2500      	movne	r5, #0
 800b94c:	4628      	mov	r0, r5
 800b94e:	b005      	add	sp, #20
 800b950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b954:	2500      	movs	r5, #0
 800b956:	462c      	mov	r4, r5
 800b958:	e7b0      	b.n	800b8bc <__gethex+0x68>
 800b95a:	2c00      	cmp	r4, #0
 800b95c:	d1c7      	bne.n	800b8ee <__gethex+0x9a>
 800b95e:	4627      	mov	r7, r4
 800b960:	e7c7      	b.n	800b8f2 <__gethex+0x9e>
 800b962:	464e      	mov	r6, r9
 800b964:	462f      	mov	r7, r5
 800b966:	2501      	movs	r5, #1
 800b968:	e7c3      	b.n	800b8f2 <__gethex+0x9e>
 800b96a:	2400      	movs	r4, #0
 800b96c:	1cb1      	adds	r1, r6, #2
 800b96e:	e7cc      	b.n	800b90a <__gethex+0xb6>
 800b970:	2401      	movs	r4, #1
 800b972:	e7fb      	b.n	800b96c <__gethex+0x118>
 800b974:	fb03 0002 	mla	r0, r3, r2, r0
 800b978:	e7ce      	b.n	800b918 <__gethex+0xc4>
 800b97a:	4631      	mov	r1, r6
 800b97c:	e7de      	b.n	800b93c <__gethex+0xe8>
 800b97e:	eba6 0309 	sub.w	r3, r6, r9
 800b982:	3b01      	subs	r3, #1
 800b984:	4629      	mov	r1, r5
 800b986:	2b07      	cmp	r3, #7
 800b988:	dc0a      	bgt.n	800b9a0 <__gethex+0x14c>
 800b98a:	9801      	ldr	r0, [sp, #4]
 800b98c:	f7fd fdc0 	bl	8009510 <_Balloc>
 800b990:	4604      	mov	r4, r0
 800b992:	b940      	cbnz	r0, 800b9a6 <__gethex+0x152>
 800b994:	4b5c      	ldr	r3, [pc, #368]	@ (800bb08 <__gethex+0x2b4>)
 800b996:	4602      	mov	r2, r0
 800b998:	21e4      	movs	r1, #228	@ 0xe4
 800b99a:	485c      	ldr	r0, [pc, #368]	@ (800bb0c <__gethex+0x2b8>)
 800b99c:	f7ff fec0 	bl	800b720 <__assert_func>
 800b9a0:	3101      	adds	r1, #1
 800b9a2:	105b      	asrs	r3, r3, #1
 800b9a4:	e7ef      	b.n	800b986 <__gethex+0x132>
 800b9a6:	f100 0a14 	add.w	sl, r0, #20
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4655      	mov	r5, sl
 800b9ae:	469b      	mov	fp, r3
 800b9b0:	45b1      	cmp	r9, r6
 800b9b2:	d337      	bcc.n	800ba24 <__gethex+0x1d0>
 800b9b4:	f845 bb04 	str.w	fp, [r5], #4
 800b9b8:	eba5 050a 	sub.w	r5, r5, sl
 800b9bc:	10ad      	asrs	r5, r5, #2
 800b9be:	6125      	str	r5, [r4, #16]
 800b9c0:	4658      	mov	r0, fp
 800b9c2:	f7fd fe97 	bl	80096f4 <__hi0bits>
 800b9c6:	016d      	lsls	r5, r5, #5
 800b9c8:	f8d8 6000 	ldr.w	r6, [r8]
 800b9cc:	1a2d      	subs	r5, r5, r0
 800b9ce:	42b5      	cmp	r5, r6
 800b9d0:	dd54      	ble.n	800ba7c <__gethex+0x228>
 800b9d2:	1bad      	subs	r5, r5, r6
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f7fe fa23 	bl	8009e22 <__any_on>
 800b9dc:	4681      	mov	r9, r0
 800b9de:	b178      	cbz	r0, 800ba00 <__gethex+0x1ac>
 800b9e0:	1e6b      	subs	r3, r5, #1
 800b9e2:	1159      	asrs	r1, r3, #5
 800b9e4:	f003 021f 	and.w	r2, r3, #31
 800b9e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b9ec:	f04f 0901 	mov.w	r9, #1
 800b9f0:	fa09 f202 	lsl.w	r2, r9, r2
 800b9f4:	420a      	tst	r2, r1
 800b9f6:	d003      	beq.n	800ba00 <__gethex+0x1ac>
 800b9f8:	454b      	cmp	r3, r9
 800b9fa:	dc36      	bgt.n	800ba6a <__gethex+0x216>
 800b9fc:	f04f 0902 	mov.w	r9, #2
 800ba00:	4629      	mov	r1, r5
 800ba02:	4620      	mov	r0, r4
 800ba04:	f7ff febe 	bl	800b784 <rshift>
 800ba08:	442f      	add	r7, r5
 800ba0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba0e:	42bb      	cmp	r3, r7
 800ba10:	da42      	bge.n	800ba98 <__gethex+0x244>
 800ba12:	9801      	ldr	r0, [sp, #4]
 800ba14:	4621      	mov	r1, r4
 800ba16:	f7fd fdbb 	bl	8009590 <_Bfree>
 800ba1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	25a3      	movs	r5, #163	@ 0xa3
 800ba22:	e793      	b.n	800b94c <__gethex+0xf8>
 800ba24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ba28:	2a2e      	cmp	r2, #46	@ 0x2e
 800ba2a:	d012      	beq.n	800ba52 <__gethex+0x1fe>
 800ba2c:	2b20      	cmp	r3, #32
 800ba2e:	d104      	bne.n	800ba3a <__gethex+0x1e6>
 800ba30:	f845 bb04 	str.w	fp, [r5], #4
 800ba34:	f04f 0b00 	mov.w	fp, #0
 800ba38:	465b      	mov	r3, fp
 800ba3a:	7830      	ldrb	r0, [r6, #0]
 800ba3c:	9303      	str	r3, [sp, #12]
 800ba3e:	f7ff fef3 	bl	800b828 <__hexdig_fun>
 800ba42:	9b03      	ldr	r3, [sp, #12]
 800ba44:	f000 000f 	and.w	r0, r0, #15
 800ba48:	4098      	lsls	r0, r3
 800ba4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ba4e:	3304      	adds	r3, #4
 800ba50:	e7ae      	b.n	800b9b0 <__gethex+0x15c>
 800ba52:	45b1      	cmp	r9, r6
 800ba54:	d8ea      	bhi.n	800ba2c <__gethex+0x1d8>
 800ba56:	492b      	ldr	r1, [pc, #172]	@ (800bb04 <__gethex+0x2b0>)
 800ba58:	9303      	str	r3, [sp, #12]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f7ff fe34 	bl	800b6ca <strncmp>
 800ba62:	9b03      	ldr	r3, [sp, #12]
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d1e1      	bne.n	800ba2c <__gethex+0x1d8>
 800ba68:	e7a2      	b.n	800b9b0 <__gethex+0x15c>
 800ba6a:	1ea9      	subs	r1, r5, #2
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7fe f9d8 	bl	8009e22 <__any_on>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d0c2      	beq.n	800b9fc <__gethex+0x1a8>
 800ba76:	f04f 0903 	mov.w	r9, #3
 800ba7a:	e7c1      	b.n	800ba00 <__gethex+0x1ac>
 800ba7c:	da09      	bge.n	800ba92 <__gethex+0x23e>
 800ba7e:	1b75      	subs	r5, r6, r5
 800ba80:	4621      	mov	r1, r4
 800ba82:	9801      	ldr	r0, [sp, #4]
 800ba84:	462a      	mov	r2, r5
 800ba86:	f7fd ff93 	bl	80099b0 <__lshift>
 800ba8a:	1b7f      	subs	r7, r7, r5
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	f100 0a14 	add.w	sl, r0, #20
 800ba92:	f04f 0900 	mov.w	r9, #0
 800ba96:	e7b8      	b.n	800ba0a <__gethex+0x1b6>
 800ba98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba9c:	42bd      	cmp	r5, r7
 800ba9e:	dd6f      	ble.n	800bb80 <__gethex+0x32c>
 800baa0:	1bed      	subs	r5, r5, r7
 800baa2:	42ae      	cmp	r6, r5
 800baa4:	dc34      	bgt.n	800bb10 <__gethex+0x2bc>
 800baa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d022      	beq.n	800baf4 <__gethex+0x2a0>
 800baae:	2b03      	cmp	r3, #3
 800bab0:	d024      	beq.n	800bafc <__gethex+0x2a8>
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d115      	bne.n	800bae2 <__gethex+0x28e>
 800bab6:	42ae      	cmp	r6, r5
 800bab8:	d113      	bne.n	800bae2 <__gethex+0x28e>
 800baba:	2e01      	cmp	r6, #1
 800babc:	d10b      	bne.n	800bad6 <__gethex+0x282>
 800babe:	9a02      	ldr	r2, [sp, #8]
 800bac0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bac4:	6013      	str	r3, [r2, #0]
 800bac6:	2301      	movs	r3, #1
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	f8ca 3000 	str.w	r3, [sl]
 800bace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bad0:	2562      	movs	r5, #98	@ 0x62
 800bad2:	601c      	str	r4, [r3, #0]
 800bad4:	e73a      	b.n	800b94c <__gethex+0xf8>
 800bad6:	1e71      	subs	r1, r6, #1
 800bad8:	4620      	mov	r0, r4
 800bada:	f7fe f9a2 	bl	8009e22 <__any_on>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d1ed      	bne.n	800babe <__gethex+0x26a>
 800bae2:	9801      	ldr	r0, [sp, #4]
 800bae4:	4621      	mov	r1, r4
 800bae6:	f7fd fd53 	bl	8009590 <_Bfree>
 800baea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800baec:	2300      	movs	r3, #0
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	2550      	movs	r5, #80	@ 0x50
 800baf2:	e72b      	b.n	800b94c <__gethex+0xf8>
 800baf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1f3      	bne.n	800bae2 <__gethex+0x28e>
 800bafa:	e7e0      	b.n	800babe <__gethex+0x26a>
 800bafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1dd      	bne.n	800babe <__gethex+0x26a>
 800bb02:	e7ee      	b.n	800bae2 <__gethex+0x28e>
 800bb04:	0800cd19 	.word	0x0800cd19
 800bb08:	0800ccaf 	.word	0x0800ccaf
 800bb0c:	0800cd8b 	.word	0x0800cd8b
 800bb10:	1e6f      	subs	r7, r5, #1
 800bb12:	f1b9 0f00 	cmp.w	r9, #0
 800bb16:	d130      	bne.n	800bb7a <__gethex+0x326>
 800bb18:	b127      	cbz	r7, 800bb24 <__gethex+0x2d0>
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f7fe f980 	bl	8009e22 <__any_on>
 800bb22:	4681      	mov	r9, r0
 800bb24:	117a      	asrs	r2, r7, #5
 800bb26:	2301      	movs	r3, #1
 800bb28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bb2c:	f007 071f 	and.w	r7, r7, #31
 800bb30:	40bb      	lsls	r3, r7
 800bb32:	4213      	tst	r3, r2
 800bb34:	4629      	mov	r1, r5
 800bb36:	4620      	mov	r0, r4
 800bb38:	bf18      	it	ne
 800bb3a:	f049 0902 	orrne.w	r9, r9, #2
 800bb3e:	f7ff fe21 	bl	800b784 <rshift>
 800bb42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bb46:	1b76      	subs	r6, r6, r5
 800bb48:	2502      	movs	r5, #2
 800bb4a:	f1b9 0f00 	cmp.w	r9, #0
 800bb4e:	d047      	beq.n	800bbe0 <__gethex+0x38c>
 800bb50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d015      	beq.n	800bb84 <__gethex+0x330>
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d017      	beq.n	800bb8c <__gethex+0x338>
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d109      	bne.n	800bb74 <__gethex+0x320>
 800bb60:	f019 0f02 	tst.w	r9, #2
 800bb64:	d006      	beq.n	800bb74 <__gethex+0x320>
 800bb66:	f8da 3000 	ldr.w	r3, [sl]
 800bb6a:	ea49 0903 	orr.w	r9, r9, r3
 800bb6e:	f019 0f01 	tst.w	r9, #1
 800bb72:	d10e      	bne.n	800bb92 <__gethex+0x33e>
 800bb74:	f045 0510 	orr.w	r5, r5, #16
 800bb78:	e032      	b.n	800bbe0 <__gethex+0x38c>
 800bb7a:	f04f 0901 	mov.w	r9, #1
 800bb7e:	e7d1      	b.n	800bb24 <__gethex+0x2d0>
 800bb80:	2501      	movs	r5, #1
 800bb82:	e7e2      	b.n	800bb4a <__gethex+0x2f6>
 800bb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb86:	f1c3 0301 	rsb	r3, r3, #1
 800bb8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d0f0      	beq.n	800bb74 <__gethex+0x320>
 800bb92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bb96:	f104 0314 	add.w	r3, r4, #20
 800bb9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bb9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bba2:	f04f 0c00 	mov.w	ip, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bbb0:	d01b      	beq.n	800bbea <__gethex+0x396>
 800bbb2:	3201      	adds	r2, #1
 800bbb4:	6002      	str	r2, [r0, #0]
 800bbb6:	2d02      	cmp	r5, #2
 800bbb8:	f104 0314 	add.w	r3, r4, #20
 800bbbc:	d13c      	bne.n	800bc38 <__gethex+0x3e4>
 800bbbe:	f8d8 2000 	ldr.w	r2, [r8]
 800bbc2:	3a01      	subs	r2, #1
 800bbc4:	42b2      	cmp	r2, r6
 800bbc6:	d109      	bne.n	800bbdc <__gethex+0x388>
 800bbc8:	1171      	asrs	r1, r6, #5
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bbd0:	f006 061f 	and.w	r6, r6, #31
 800bbd4:	fa02 f606 	lsl.w	r6, r2, r6
 800bbd8:	421e      	tst	r6, r3
 800bbda:	d13a      	bne.n	800bc52 <__gethex+0x3fe>
 800bbdc:	f045 0520 	orr.w	r5, r5, #32
 800bbe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbe2:	601c      	str	r4, [r3, #0]
 800bbe4:	9b02      	ldr	r3, [sp, #8]
 800bbe6:	601f      	str	r7, [r3, #0]
 800bbe8:	e6b0      	b.n	800b94c <__gethex+0xf8>
 800bbea:	4299      	cmp	r1, r3
 800bbec:	f843 cc04 	str.w	ip, [r3, #-4]
 800bbf0:	d8d9      	bhi.n	800bba6 <__gethex+0x352>
 800bbf2:	68a3      	ldr	r3, [r4, #8]
 800bbf4:	459b      	cmp	fp, r3
 800bbf6:	db17      	blt.n	800bc28 <__gethex+0x3d4>
 800bbf8:	6861      	ldr	r1, [r4, #4]
 800bbfa:	9801      	ldr	r0, [sp, #4]
 800bbfc:	3101      	adds	r1, #1
 800bbfe:	f7fd fc87 	bl	8009510 <_Balloc>
 800bc02:	4681      	mov	r9, r0
 800bc04:	b918      	cbnz	r0, 800bc0e <__gethex+0x3ba>
 800bc06:	4b1a      	ldr	r3, [pc, #104]	@ (800bc70 <__gethex+0x41c>)
 800bc08:	4602      	mov	r2, r0
 800bc0a:	2184      	movs	r1, #132	@ 0x84
 800bc0c:	e6c5      	b.n	800b99a <__gethex+0x146>
 800bc0e:	6922      	ldr	r2, [r4, #16]
 800bc10:	3202      	adds	r2, #2
 800bc12:	f104 010c 	add.w	r1, r4, #12
 800bc16:	0092      	lsls	r2, r2, #2
 800bc18:	300c      	adds	r0, #12
 800bc1a:	f7fc fd0a 	bl	8008632 <memcpy>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	9801      	ldr	r0, [sp, #4]
 800bc22:	f7fd fcb5 	bl	8009590 <_Bfree>
 800bc26:	464c      	mov	r4, r9
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc30:	6122      	str	r2, [r4, #16]
 800bc32:	2201      	movs	r2, #1
 800bc34:	615a      	str	r2, [r3, #20]
 800bc36:	e7be      	b.n	800bbb6 <__gethex+0x362>
 800bc38:	6922      	ldr	r2, [r4, #16]
 800bc3a:	455a      	cmp	r2, fp
 800bc3c:	dd0b      	ble.n	800bc56 <__gethex+0x402>
 800bc3e:	2101      	movs	r1, #1
 800bc40:	4620      	mov	r0, r4
 800bc42:	f7ff fd9f 	bl	800b784 <rshift>
 800bc46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc4a:	3701      	adds	r7, #1
 800bc4c:	42bb      	cmp	r3, r7
 800bc4e:	f6ff aee0 	blt.w	800ba12 <__gethex+0x1be>
 800bc52:	2501      	movs	r5, #1
 800bc54:	e7c2      	b.n	800bbdc <__gethex+0x388>
 800bc56:	f016 061f 	ands.w	r6, r6, #31
 800bc5a:	d0fa      	beq.n	800bc52 <__gethex+0x3fe>
 800bc5c:	4453      	add	r3, sl
 800bc5e:	f1c6 0620 	rsb	r6, r6, #32
 800bc62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bc66:	f7fd fd45 	bl	80096f4 <__hi0bits>
 800bc6a:	42b0      	cmp	r0, r6
 800bc6c:	dbe7      	blt.n	800bc3e <__gethex+0x3ea>
 800bc6e:	e7f0      	b.n	800bc52 <__gethex+0x3fe>
 800bc70:	0800ccaf 	.word	0x0800ccaf

0800bc74 <L_shift>:
 800bc74:	f1c2 0208 	rsb	r2, r2, #8
 800bc78:	0092      	lsls	r2, r2, #2
 800bc7a:	b570      	push	{r4, r5, r6, lr}
 800bc7c:	f1c2 0620 	rsb	r6, r2, #32
 800bc80:	6843      	ldr	r3, [r0, #4]
 800bc82:	6804      	ldr	r4, [r0, #0]
 800bc84:	fa03 f506 	lsl.w	r5, r3, r6
 800bc88:	432c      	orrs	r4, r5
 800bc8a:	40d3      	lsrs	r3, r2
 800bc8c:	6004      	str	r4, [r0, #0]
 800bc8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bc92:	4288      	cmp	r0, r1
 800bc94:	d3f4      	bcc.n	800bc80 <L_shift+0xc>
 800bc96:	bd70      	pop	{r4, r5, r6, pc}

0800bc98 <__match>:
 800bc98:	b530      	push	{r4, r5, lr}
 800bc9a:	6803      	ldr	r3, [r0, #0]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bca2:	b914      	cbnz	r4, 800bcaa <__match+0x12>
 800bca4:	6003      	str	r3, [r0, #0]
 800bca6:	2001      	movs	r0, #1
 800bca8:	bd30      	pop	{r4, r5, pc}
 800bcaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bcb2:	2d19      	cmp	r5, #25
 800bcb4:	bf98      	it	ls
 800bcb6:	3220      	addls	r2, #32
 800bcb8:	42a2      	cmp	r2, r4
 800bcba:	d0f0      	beq.n	800bc9e <__match+0x6>
 800bcbc:	2000      	movs	r0, #0
 800bcbe:	e7f3      	b.n	800bca8 <__match+0x10>

0800bcc0 <__hexnan>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	680b      	ldr	r3, [r1, #0]
 800bcc6:	6801      	ldr	r1, [r0, #0]
 800bcc8:	115e      	asrs	r6, r3, #5
 800bcca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bcce:	f013 031f 	ands.w	r3, r3, #31
 800bcd2:	b087      	sub	sp, #28
 800bcd4:	bf18      	it	ne
 800bcd6:	3604      	addne	r6, #4
 800bcd8:	2500      	movs	r5, #0
 800bcda:	1f37      	subs	r7, r6, #4
 800bcdc:	4682      	mov	sl, r0
 800bcde:	4690      	mov	r8, r2
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bce6:	46b9      	mov	r9, r7
 800bce8:	463c      	mov	r4, r7
 800bcea:	9502      	str	r5, [sp, #8]
 800bcec:	46ab      	mov	fp, r5
 800bcee:	784a      	ldrb	r2, [r1, #1]
 800bcf0:	1c4b      	adds	r3, r1, #1
 800bcf2:	9303      	str	r3, [sp, #12]
 800bcf4:	b342      	cbz	r2, 800bd48 <__hexnan+0x88>
 800bcf6:	4610      	mov	r0, r2
 800bcf8:	9105      	str	r1, [sp, #20]
 800bcfa:	9204      	str	r2, [sp, #16]
 800bcfc:	f7ff fd94 	bl	800b828 <__hexdig_fun>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d151      	bne.n	800bda8 <__hexnan+0xe8>
 800bd04:	9a04      	ldr	r2, [sp, #16]
 800bd06:	9905      	ldr	r1, [sp, #20]
 800bd08:	2a20      	cmp	r2, #32
 800bd0a:	d818      	bhi.n	800bd3e <__hexnan+0x7e>
 800bd0c:	9b02      	ldr	r3, [sp, #8]
 800bd0e:	459b      	cmp	fp, r3
 800bd10:	dd13      	ble.n	800bd3a <__hexnan+0x7a>
 800bd12:	454c      	cmp	r4, r9
 800bd14:	d206      	bcs.n	800bd24 <__hexnan+0x64>
 800bd16:	2d07      	cmp	r5, #7
 800bd18:	dc04      	bgt.n	800bd24 <__hexnan+0x64>
 800bd1a:	462a      	mov	r2, r5
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7ff ffa8 	bl	800bc74 <L_shift>
 800bd24:	4544      	cmp	r4, r8
 800bd26:	d952      	bls.n	800bdce <__hexnan+0x10e>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f1a4 0904 	sub.w	r9, r4, #4
 800bd2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd32:	f8cd b008 	str.w	fp, [sp, #8]
 800bd36:	464c      	mov	r4, r9
 800bd38:	461d      	mov	r5, r3
 800bd3a:	9903      	ldr	r1, [sp, #12]
 800bd3c:	e7d7      	b.n	800bcee <__hexnan+0x2e>
 800bd3e:	2a29      	cmp	r2, #41	@ 0x29
 800bd40:	d157      	bne.n	800bdf2 <__hexnan+0x132>
 800bd42:	3102      	adds	r1, #2
 800bd44:	f8ca 1000 	str.w	r1, [sl]
 800bd48:	f1bb 0f00 	cmp.w	fp, #0
 800bd4c:	d051      	beq.n	800bdf2 <__hexnan+0x132>
 800bd4e:	454c      	cmp	r4, r9
 800bd50:	d206      	bcs.n	800bd60 <__hexnan+0xa0>
 800bd52:	2d07      	cmp	r5, #7
 800bd54:	dc04      	bgt.n	800bd60 <__hexnan+0xa0>
 800bd56:	462a      	mov	r2, r5
 800bd58:	4649      	mov	r1, r9
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f7ff ff8a 	bl	800bc74 <L_shift>
 800bd60:	4544      	cmp	r4, r8
 800bd62:	d936      	bls.n	800bdd2 <__hexnan+0x112>
 800bd64:	f1a8 0204 	sub.w	r2, r8, #4
 800bd68:	4623      	mov	r3, r4
 800bd6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bd72:	429f      	cmp	r7, r3
 800bd74:	d2f9      	bcs.n	800bd6a <__hexnan+0xaa>
 800bd76:	1b3b      	subs	r3, r7, r4
 800bd78:	f023 0303 	bic.w	r3, r3, #3
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	3401      	adds	r4, #1
 800bd80:	3e03      	subs	r6, #3
 800bd82:	42b4      	cmp	r4, r6
 800bd84:	bf88      	it	hi
 800bd86:	2304      	movhi	r3, #4
 800bd88:	4443      	add	r3, r8
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f843 2b04 	str.w	r2, [r3], #4
 800bd90:	429f      	cmp	r7, r3
 800bd92:	d2fb      	bcs.n	800bd8c <__hexnan+0xcc>
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	b91b      	cbnz	r3, 800bda0 <__hexnan+0xe0>
 800bd98:	4547      	cmp	r7, r8
 800bd9a:	d128      	bne.n	800bdee <__hexnan+0x12e>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	2005      	movs	r0, #5
 800bda2:	b007      	add	sp, #28
 800bda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda8:	3501      	adds	r5, #1
 800bdaa:	2d08      	cmp	r5, #8
 800bdac:	f10b 0b01 	add.w	fp, fp, #1
 800bdb0:	dd06      	ble.n	800bdc0 <__hexnan+0x100>
 800bdb2:	4544      	cmp	r4, r8
 800bdb4:	d9c1      	bls.n	800bd3a <__hexnan+0x7a>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdbc:	2501      	movs	r5, #1
 800bdbe:	3c04      	subs	r4, #4
 800bdc0:	6822      	ldr	r2, [r4, #0]
 800bdc2:	f000 000f 	and.w	r0, r0, #15
 800bdc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bdca:	6020      	str	r0, [r4, #0]
 800bdcc:	e7b5      	b.n	800bd3a <__hexnan+0x7a>
 800bdce:	2508      	movs	r5, #8
 800bdd0:	e7b3      	b.n	800bd3a <__hexnan+0x7a>
 800bdd2:	9b01      	ldr	r3, [sp, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d0dd      	beq.n	800bd94 <__hexnan+0xd4>
 800bdd8:	f1c3 0320 	rsb	r3, r3, #32
 800bddc:	f04f 32ff 	mov.w	r2, #4294967295
 800bde0:	40da      	lsrs	r2, r3
 800bde2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bde6:	4013      	ands	r3, r2
 800bde8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bdec:	e7d2      	b.n	800bd94 <__hexnan+0xd4>
 800bdee:	3f04      	subs	r7, #4
 800bdf0:	e7d0      	b.n	800bd94 <__hexnan+0xd4>
 800bdf2:	2004      	movs	r0, #4
 800bdf4:	e7d5      	b.n	800bda2 <__hexnan+0xe2>

0800bdf6 <__ascii_mbtowc>:
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	b901      	cbnz	r1, 800bdfc <__ascii_mbtowc+0x6>
 800bdfa:	a901      	add	r1, sp, #4
 800bdfc:	b142      	cbz	r2, 800be10 <__ascii_mbtowc+0x1a>
 800bdfe:	b14b      	cbz	r3, 800be14 <__ascii_mbtowc+0x1e>
 800be00:	7813      	ldrb	r3, [r2, #0]
 800be02:	600b      	str	r3, [r1, #0]
 800be04:	7812      	ldrb	r2, [r2, #0]
 800be06:	1e10      	subs	r0, r2, #0
 800be08:	bf18      	it	ne
 800be0a:	2001      	movne	r0, #1
 800be0c:	b002      	add	sp, #8
 800be0e:	4770      	bx	lr
 800be10:	4610      	mov	r0, r2
 800be12:	e7fb      	b.n	800be0c <__ascii_mbtowc+0x16>
 800be14:	f06f 0001 	mvn.w	r0, #1
 800be18:	e7f8      	b.n	800be0c <__ascii_mbtowc+0x16>

0800be1a <_realloc_r>:
 800be1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1e:	4607      	mov	r7, r0
 800be20:	4614      	mov	r4, r2
 800be22:	460d      	mov	r5, r1
 800be24:	b921      	cbnz	r1, 800be30 <_realloc_r+0x16>
 800be26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be2a:	4611      	mov	r1, r2
 800be2c:	f7fd bae4 	b.w	80093f8 <_malloc_r>
 800be30:	b92a      	cbnz	r2, 800be3e <_realloc_r+0x24>
 800be32:	f7fd fa6d 	bl	8009310 <_free_r>
 800be36:	4625      	mov	r5, r4
 800be38:	4628      	mov	r0, r5
 800be3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be3e:	f000 f8b2 	bl	800bfa6 <_malloc_usable_size_r>
 800be42:	4284      	cmp	r4, r0
 800be44:	4606      	mov	r6, r0
 800be46:	d802      	bhi.n	800be4e <_realloc_r+0x34>
 800be48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be4c:	d8f4      	bhi.n	800be38 <_realloc_r+0x1e>
 800be4e:	4621      	mov	r1, r4
 800be50:	4638      	mov	r0, r7
 800be52:	f7fd fad1 	bl	80093f8 <_malloc_r>
 800be56:	4680      	mov	r8, r0
 800be58:	b908      	cbnz	r0, 800be5e <_realloc_r+0x44>
 800be5a:	4645      	mov	r5, r8
 800be5c:	e7ec      	b.n	800be38 <_realloc_r+0x1e>
 800be5e:	42b4      	cmp	r4, r6
 800be60:	4622      	mov	r2, r4
 800be62:	4629      	mov	r1, r5
 800be64:	bf28      	it	cs
 800be66:	4632      	movcs	r2, r6
 800be68:	f7fc fbe3 	bl	8008632 <memcpy>
 800be6c:	4629      	mov	r1, r5
 800be6e:	4638      	mov	r0, r7
 800be70:	f7fd fa4e 	bl	8009310 <_free_r>
 800be74:	e7f1      	b.n	800be5a <_realloc_r+0x40>
	...

0800be78 <_strtoul_l.isra.0>:
 800be78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be7c:	4e34      	ldr	r6, [pc, #208]	@ (800bf50 <_strtoul_l.isra.0+0xd8>)
 800be7e:	4686      	mov	lr, r0
 800be80:	460d      	mov	r5, r1
 800be82:	4628      	mov	r0, r5
 800be84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be88:	5d37      	ldrb	r7, [r6, r4]
 800be8a:	f017 0708 	ands.w	r7, r7, #8
 800be8e:	d1f8      	bne.n	800be82 <_strtoul_l.isra.0+0xa>
 800be90:	2c2d      	cmp	r4, #45	@ 0x2d
 800be92:	d110      	bne.n	800beb6 <_strtoul_l.isra.0+0x3e>
 800be94:	782c      	ldrb	r4, [r5, #0]
 800be96:	2701      	movs	r7, #1
 800be98:	1c85      	adds	r5, r0, #2
 800be9a:	f033 0010 	bics.w	r0, r3, #16
 800be9e:	d115      	bne.n	800becc <_strtoul_l.isra.0+0x54>
 800bea0:	2c30      	cmp	r4, #48	@ 0x30
 800bea2:	d10d      	bne.n	800bec0 <_strtoul_l.isra.0+0x48>
 800bea4:	7828      	ldrb	r0, [r5, #0]
 800bea6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800beaa:	2858      	cmp	r0, #88	@ 0x58
 800beac:	d108      	bne.n	800bec0 <_strtoul_l.isra.0+0x48>
 800beae:	786c      	ldrb	r4, [r5, #1]
 800beb0:	3502      	adds	r5, #2
 800beb2:	2310      	movs	r3, #16
 800beb4:	e00a      	b.n	800becc <_strtoul_l.isra.0+0x54>
 800beb6:	2c2b      	cmp	r4, #43	@ 0x2b
 800beb8:	bf04      	itt	eq
 800beba:	782c      	ldrbeq	r4, [r5, #0]
 800bebc:	1c85      	addeq	r5, r0, #2
 800bebe:	e7ec      	b.n	800be9a <_strtoul_l.isra.0+0x22>
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1f6      	bne.n	800beb2 <_strtoul_l.isra.0+0x3a>
 800bec4:	2c30      	cmp	r4, #48	@ 0x30
 800bec6:	bf14      	ite	ne
 800bec8:	230a      	movne	r3, #10
 800beca:	2308      	moveq	r3, #8
 800becc:	f04f 38ff 	mov.w	r8, #4294967295
 800bed0:	2600      	movs	r6, #0
 800bed2:	fbb8 f8f3 	udiv	r8, r8, r3
 800bed6:	fb03 f908 	mul.w	r9, r3, r8
 800beda:	ea6f 0909 	mvn.w	r9, r9
 800bede:	4630      	mov	r0, r6
 800bee0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bee4:	f1bc 0f09 	cmp.w	ip, #9
 800bee8:	d810      	bhi.n	800bf0c <_strtoul_l.isra.0+0x94>
 800beea:	4664      	mov	r4, ip
 800beec:	42a3      	cmp	r3, r4
 800beee:	dd1e      	ble.n	800bf2e <_strtoul_l.isra.0+0xb6>
 800bef0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800bef4:	d007      	beq.n	800bf06 <_strtoul_l.isra.0+0x8e>
 800bef6:	4580      	cmp	r8, r0
 800bef8:	d316      	bcc.n	800bf28 <_strtoul_l.isra.0+0xb0>
 800befa:	d101      	bne.n	800bf00 <_strtoul_l.isra.0+0x88>
 800befc:	45a1      	cmp	r9, r4
 800befe:	db13      	blt.n	800bf28 <_strtoul_l.isra.0+0xb0>
 800bf00:	fb00 4003 	mla	r0, r0, r3, r4
 800bf04:	2601      	movs	r6, #1
 800bf06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf0a:	e7e9      	b.n	800bee0 <_strtoul_l.isra.0+0x68>
 800bf0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bf10:	f1bc 0f19 	cmp.w	ip, #25
 800bf14:	d801      	bhi.n	800bf1a <_strtoul_l.isra.0+0xa2>
 800bf16:	3c37      	subs	r4, #55	@ 0x37
 800bf18:	e7e8      	b.n	800beec <_strtoul_l.isra.0+0x74>
 800bf1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bf1e:	f1bc 0f19 	cmp.w	ip, #25
 800bf22:	d804      	bhi.n	800bf2e <_strtoul_l.isra.0+0xb6>
 800bf24:	3c57      	subs	r4, #87	@ 0x57
 800bf26:	e7e1      	b.n	800beec <_strtoul_l.isra.0+0x74>
 800bf28:	f04f 36ff 	mov.w	r6, #4294967295
 800bf2c:	e7eb      	b.n	800bf06 <_strtoul_l.isra.0+0x8e>
 800bf2e:	1c73      	adds	r3, r6, #1
 800bf30:	d106      	bne.n	800bf40 <_strtoul_l.isra.0+0xc8>
 800bf32:	2322      	movs	r3, #34	@ 0x22
 800bf34:	f8ce 3000 	str.w	r3, [lr]
 800bf38:	4630      	mov	r0, r6
 800bf3a:	b932      	cbnz	r2, 800bf4a <_strtoul_l.isra.0+0xd2>
 800bf3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf40:	b107      	cbz	r7, 800bf44 <_strtoul_l.isra.0+0xcc>
 800bf42:	4240      	negs	r0, r0
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	d0f9      	beq.n	800bf3c <_strtoul_l.isra.0+0xc4>
 800bf48:	b106      	cbz	r6, 800bf4c <_strtoul_l.isra.0+0xd4>
 800bf4a:	1e69      	subs	r1, r5, #1
 800bf4c:	6011      	str	r1, [r2, #0]
 800bf4e:	e7f5      	b.n	800bf3c <_strtoul_l.isra.0+0xc4>
 800bf50:	0800cf39 	.word	0x0800cf39

0800bf54 <_strtoul_r>:
 800bf54:	f7ff bf90 	b.w	800be78 <_strtoul_l.isra.0>

0800bf58 <__ascii_wctomb>:
 800bf58:	4603      	mov	r3, r0
 800bf5a:	4608      	mov	r0, r1
 800bf5c:	b141      	cbz	r1, 800bf70 <__ascii_wctomb+0x18>
 800bf5e:	2aff      	cmp	r2, #255	@ 0xff
 800bf60:	d904      	bls.n	800bf6c <__ascii_wctomb+0x14>
 800bf62:	228a      	movs	r2, #138	@ 0x8a
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6a:	4770      	bx	lr
 800bf6c:	700a      	strb	r2, [r1, #0]
 800bf6e:	2001      	movs	r0, #1
 800bf70:	4770      	bx	lr
	...

0800bf74 <fiprintf>:
 800bf74:	b40e      	push	{r1, r2, r3}
 800bf76:	b503      	push	{r0, r1, lr}
 800bf78:	4601      	mov	r1, r0
 800bf7a:	ab03      	add	r3, sp, #12
 800bf7c:	4805      	ldr	r0, [pc, #20]	@ (800bf94 <fiprintf+0x20>)
 800bf7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf82:	6800      	ldr	r0, [r0, #0]
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	f000 f83f 	bl	800c008 <_vfiprintf_r>
 800bf8a:	b002      	add	sp, #8
 800bf8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf90:	b003      	add	sp, #12
 800bf92:	4770      	bx	lr
 800bf94:	20000044 	.word	0x20000044

0800bf98 <abort>:
 800bf98:	b508      	push	{r3, lr}
 800bf9a:	2006      	movs	r0, #6
 800bf9c:	f000 fa08 	bl	800c3b0 <raise>
 800bfa0:	2001      	movs	r0, #1
 800bfa2:	f7f5 fd89 	bl	8001ab8 <_exit>

0800bfa6 <_malloc_usable_size_r>:
 800bfa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfaa:	1f18      	subs	r0, r3, #4
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	bfbc      	itt	lt
 800bfb0:	580b      	ldrlt	r3, [r1, r0]
 800bfb2:	18c0      	addlt	r0, r0, r3
 800bfb4:	4770      	bx	lr

0800bfb6 <__sfputc_r>:
 800bfb6:	6893      	ldr	r3, [r2, #8]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	b410      	push	{r4}
 800bfbe:	6093      	str	r3, [r2, #8]
 800bfc0:	da08      	bge.n	800bfd4 <__sfputc_r+0x1e>
 800bfc2:	6994      	ldr	r4, [r2, #24]
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	db01      	blt.n	800bfcc <__sfputc_r+0x16>
 800bfc8:	290a      	cmp	r1, #10
 800bfca:	d103      	bne.n	800bfd4 <__sfputc_r+0x1e>
 800bfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd0:	f000 b932 	b.w	800c238 <__swbuf_r>
 800bfd4:	6813      	ldr	r3, [r2, #0]
 800bfd6:	1c58      	adds	r0, r3, #1
 800bfd8:	6010      	str	r0, [r2, #0]
 800bfda:	7019      	strb	r1, [r3, #0]
 800bfdc:	4608      	mov	r0, r1
 800bfde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <__sfputs_r>:
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	460f      	mov	r7, r1
 800bfea:	4614      	mov	r4, r2
 800bfec:	18d5      	adds	r5, r2, r3
 800bfee:	42ac      	cmp	r4, r5
 800bff0:	d101      	bne.n	800bff6 <__sfputs_r+0x12>
 800bff2:	2000      	movs	r0, #0
 800bff4:	e007      	b.n	800c006 <__sfputs_r+0x22>
 800bff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bffa:	463a      	mov	r2, r7
 800bffc:	4630      	mov	r0, r6
 800bffe:	f7ff ffda 	bl	800bfb6 <__sfputc_r>
 800c002:	1c43      	adds	r3, r0, #1
 800c004:	d1f3      	bne.n	800bfee <__sfputs_r+0xa>
 800c006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c008 <_vfiprintf_r>:
 800c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	460d      	mov	r5, r1
 800c00e:	b09d      	sub	sp, #116	@ 0x74
 800c010:	4614      	mov	r4, r2
 800c012:	4698      	mov	r8, r3
 800c014:	4606      	mov	r6, r0
 800c016:	b118      	cbz	r0, 800c020 <_vfiprintf_r+0x18>
 800c018:	6a03      	ldr	r3, [r0, #32]
 800c01a:	b90b      	cbnz	r3, 800c020 <_vfiprintf_r+0x18>
 800c01c:	f7fc f9b0 	bl	8008380 <__sinit>
 800c020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c022:	07d9      	lsls	r1, r3, #31
 800c024:	d405      	bmi.n	800c032 <_vfiprintf_r+0x2a>
 800c026:	89ab      	ldrh	r3, [r5, #12]
 800c028:	059a      	lsls	r2, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_vfiprintf_r+0x2a>
 800c02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c02e:	f7fc fafe 	bl	800862e <__retarget_lock_acquire_recursive>
 800c032:	89ab      	ldrh	r3, [r5, #12]
 800c034:	071b      	lsls	r3, r3, #28
 800c036:	d501      	bpl.n	800c03c <_vfiprintf_r+0x34>
 800c038:	692b      	ldr	r3, [r5, #16]
 800c03a:	b99b      	cbnz	r3, 800c064 <_vfiprintf_r+0x5c>
 800c03c:	4629      	mov	r1, r5
 800c03e:	4630      	mov	r0, r6
 800c040:	f000 f938 	bl	800c2b4 <__swsetup_r>
 800c044:	b170      	cbz	r0, 800c064 <_vfiprintf_r+0x5c>
 800c046:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c048:	07dc      	lsls	r4, r3, #31
 800c04a:	d504      	bpl.n	800c056 <_vfiprintf_r+0x4e>
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295
 800c050:	b01d      	add	sp, #116	@ 0x74
 800c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	0598      	lsls	r0, r3, #22
 800c05a:	d4f7      	bmi.n	800c04c <_vfiprintf_r+0x44>
 800c05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c05e:	f7fc fae7 	bl	8008630 <__retarget_lock_release_recursive>
 800c062:	e7f3      	b.n	800c04c <_vfiprintf_r+0x44>
 800c064:	2300      	movs	r3, #0
 800c066:	9309      	str	r3, [sp, #36]	@ 0x24
 800c068:	2320      	movs	r3, #32
 800c06a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c072:	2330      	movs	r3, #48	@ 0x30
 800c074:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c224 <_vfiprintf_r+0x21c>
 800c078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c07c:	f04f 0901 	mov.w	r9, #1
 800c080:	4623      	mov	r3, r4
 800c082:	469a      	mov	sl, r3
 800c084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c088:	b10a      	cbz	r2, 800c08e <_vfiprintf_r+0x86>
 800c08a:	2a25      	cmp	r2, #37	@ 0x25
 800c08c:	d1f9      	bne.n	800c082 <_vfiprintf_r+0x7a>
 800c08e:	ebba 0b04 	subs.w	fp, sl, r4
 800c092:	d00b      	beq.n	800c0ac <_vfiprintf_r+0xa4>
 800c094:	465b      	mov	r3, fp
 800c096:	4622      	mov	r2, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7ff ffa2 	bl	800bfe4 <__sfputs_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	f000 80a7 	beq.w	800c1f4 <_vfiprintf_r+0x1ec>
 800c0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0a8:	445a      	add	r2, fp
 800c0aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 809f 	beq.w	800c1f4 <_vfiprintf_r+0x1ec>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c0:	f10a 0a01 	add.w	sl, sl, #1
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	9307      	str	r3, [sp, #28]
 800c0c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0ce:	4654      	mov	r4, sl
 800c0d0:	2205      	movs	r2, #5
 800c0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d6:	4853      	ldr	r0, [pc, #332]	@ (800c224 <_vfiprintf_r+0x21c>)
 800c0d8:	f7f4 f87a 	bl	80001d0 <memchr>
 800c0dc:	9a04      	ldr	r2, [sp, #16]
 800c0de:	b9d8      	cbnz	r0, 800c118 <_vfiprintf_r+0x110>
 800c0e0:	06d1      	lsls	r1, r2, #27
 800c0e2:	bf44      	itt	mi
 800c0e4:	2320      	movmi	r3, #32
 800c0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ea:	0713      	lsls	r3, r2, #28
 800c0ec:	bf44      	itt	mi
 800c0ee:	232b      	movmi	r3, #43	@ 0x2b
 800c0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0fa:	d015      	beq.n	800c128 <_vfiprintf_r+0x120>
 800c0fc:	9a07      	ldr	r2, [sp, #28]
 800c0fe:	4654      	mov	r4, sl
 800c100:	2000      	movs	r0, #0
 800c102:	f04f 0c0a 	mov.w	ip, #10
 800c106:	4621      	mov	r1, r4
 800c108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c10c:	3b30      	subs	r3, #48	@ 0x30
 800c10e:	2b09      	cmp	r3, #9
 800c110:	d94b      	bls.n	800c1aa <_vfiprintf_r+0x1a2>
 800c112:	b1b0      	cbz	r0, 800c142 <_vfiprintf_r+0x13a>
 800c114:	9207      	str	r2, [sp, #28]
 800c116:	e014      	b.n	800c142 <_vfiprintf_r+0x13a>
 800c118:	eba0 0308 	sub.w	r3, r0, r8
 800c11c:	fa09 f303 	lsl.w	r3, r9, r3
 800c120:	4313      	orrs	r3, r2
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	46a2      	mov	sl, r4
 800c126:	e7d2      	b.n	800c0ce <_vfiprintf_r+0xc6>
 800c128:	9b03      	ldr	r3, [sp, #12]
 800c12a:	1d19      	adds	r1, r3, #4
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	9103      	str	r1, [sp, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	bfbb      	ittet	lt
 800c134:	425b      	neglt	r3, r3
 800c136:	f042 0202 	orrlt.w	r2, r2, #2
 800c13a:	9307      	strge	r3, [sp, #28]
 800c13c:	9307      	strlt	r3, [sp, #28]
 800c13e:	bfb8      	it	lt
 800c140:	9204      	strlt	r2, [sp, #16]
 800c142:	7823      	ldrb	r3, [r4, #0]
 800c144:	2b2e      	cmp	r3, #46	@ 0x2e
 800c146:	d10a      	bne.n	800c15e <_vfiprintf_r+0x156>
 800c148:	7863      	ldrb	r3, [r4, #1]
 800c14a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c14c:	d132      	bne.n	800c1b4 <_vfiprintf_r+0x1ac>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	1d1a      	adds	r2, r3, #4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	9203      	str	r2, [sp, #12]
 800c156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c15a:	3402      	adds	r4, #2
 800c15c:	9305      	str	r3, [sp, #20]
 800c15e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c234 <_vfiprintf_r+0x22c>
 800c162:	7821      	ldrb	r1, [r4, #0]
 800c164:	2203      	movs	r2, #3
 800c166:	4650      	mov	r0, sl
 800c168:	f7f4 f832 	bl	80001d0 <memchr>
 800c16c:	b138      	cbz	r0, 800c17e <_vfiprintf_r+0x176>
 800c16e:	9b04      	ldr	r3, [sp, #16]
 800c170:	eba0 000a 	sub.w	r0, r0, sl
 800c174:	2240      	movs	r2, #64	@ 0x40
 800c176:	4082      	lsls	r2, r0
 800c178:	4313      	orrs	r3, r2
 800c17a:	3401      	adds	r4, #1
 800c17c:	9304      	str	r3, [sp, #16]
 800c17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c182:	4829      	ldr	r0, [pc, #164]	@ (800c228 <_vfiprintf_r+0x220>)
 800c184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c188:	2206      	movs	r2, #6
 800c18a:	f7f4 f821 	bl	80001d0 <memchr>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d03f      	beq.n	800c212 <_vfiprintf_r+0x20a>
 800c192:	4b26      	ldr	r3, [pc, #152]	@ (800c22c <_vfiprintf_r+0x224>)
 800c194:	bb1b      	cbnz	r3, 800c1de <_vfiprintf_r+0x1d6>
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	3307      	adds	r3, #7
 800c19a:	f023 0307 	bic.w	r3, r3, #7
 800c19e:	3308      	adds	r3, #8
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1a4:	443b      	add	r3, r7
 800c1a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1a8:	e76a      	b.n	800c080 <_vfiprintf_r+0x78>
 800c1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	2001      	movs	r0, #1
 800c1b2:	e7a8      	b.n	800c106 <_vfiprintf_r+0xfe>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	3401      	adds	r4, #1
 800c1b8:	9305      	str	r3, [sp, #20]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	f04f 0c0a 	mov.w	ip, #10
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1c6:	3a30      	subs	r2, #48	@ 0x30
 800c1c8:	2a09      	cmp	r2, #9
 800c1ca:	d903      	bls.n	800c1d4 <_vfiprintf_r+0x1cc>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d0c6      	beq.n	800c15e <_vfiprintf_r+0x156>
 800c1d0:	9105      	str	r1, [sp, #20]
 800c1d2:	e7c4      	b.n	800c15e <_vfiprintf_r+0x156>
 800c1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1d8:	4604      	mov	r4, r0
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e7f0      	b.n	800c1c0 <_vfiprintf_r+0x1b8>
 800c1de:	ab03      	add	r3, sp, #12
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	462a      	mov	r2, r5
 800c1e4:	4b12      	ldr	r3, [pc, #72]	@ (800c230 <_vfiprintf_r+0x228>)
 800c1e6:	a904      	add	r1, sp, #16
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f7fb fa79 	bl	80076e0 <_printf_float>
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	1c78      	adds	r0, r7, #1
 800c1f2:	d1d6      	bne.n	800c1a2 <_vfiprintf_r+0x19a>
 800c1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1f6:	07d9      	lsls	r1, r3, #31
 800c1f8:	d405      	bmi.n	800c206 <_vfiprintf_r+0x1fe>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	059a      	lsls	r2, r3, #22
 800c1fe:	d402      	bmi.n	800c206 <_vfiprintf_r+0x1fe>
 800c200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c202:	f7fc fa15 	bl	8008630 <__retarget_lock_release_recursive>
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	065b      	lsls	r3, r3, #25
 800c20a:	f53f af1f 	bmi.w	800c04c <_vfiprintf_r+0x44>
 800c20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c210:	e71e      	b.n	800c050 <_vfiprintf_r+0x48>
 800c212:	ab03      	add	r3, sp, #12
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	462a      	mov	r2, r5
 800c218:	4b05      	ldr	r3, [pc, #20]	@ (800c230 <_vfiprintf_r+0x228>)
 800c21a:	a904      	add	r1, sp, #16
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7fb fcf7 	bl	8007c10 <_printf_i>
 800c222:	e7e4      	b.n	800c1ee <_vfiprintf_r+0x1e6>
 800c224:	0800cd1b 	.word	0x0800cd1b
 800c228:	0800cd25 	.word	0x0800cd25
 800c22c:	080076e1 	.word	0x080076e1
 800c230:	0800bfe5 	.word	0x0800bfe5
 800c234:	0800cd21 	.word	0x0800cd21

0800c238 <__swbuf_r>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	460e      	mov	r6, r1
 800c23c:	4614      	mov	r4, r2
 800c23e:	4605      	mov	r5, r0
 800c240:	b118      	cbz	r0, 800c24a <__swbuf_r+0x12>
 800c242:	6a03      	ldr	r3, [r0, #32]
 800c244:	b90b      	cbnz	r3, 800c24a <__swbuf_r+0x12>
 800c246:	f7fc f89b 	bl	8008380 <__sinit>
 800c24a:	69a3      	ldr	r3, [r4, #24]
 800c24c:	60a3      	str	r3, [r4, #8]
 800c24e:	89a3      	ldrh	r3, [r4, #12]
 800c250:	071a      	lsls	r2, r3, #28
 800c252:	d501      	bpl.n	800c258 <__swbuf_r+0x20>
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	b943      	cbnz	r3, 800c26a <__swbuf_r+0x32>
 800c258:	4621      	mov	r1, r4
 800c25a:	4628      	mov	r0, r5
 800c25c:	f000 f82a 	bl	800c2b4 <__swsetup_r>
 800c260:	b118      	cbz	r0, 800c26a <__swbuf_r+0x32>
 800c262:	f04f 37ff 	mov.w	r7, #4294967295
 800c266:	4638      	mov	r0, r7
 800c268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	6922      	ldr	r2, [r4, #16]
 800c26e:	1a98      	subs	r0, r3, r2
 800c270:	6963      	ldr	r3, [r4, #20]
 800c272:	b2f6      	uxtb	r6, r6
 800c274:	4283      	cmp	r3, r0
 800c276:	4637      	mov	r7, r6
 800c278:	dc05      	bgt.n	800c286 <__swbuf_r+0x4e>
 800c27a:	4621      	mov	r1, r4
 800c27c:	4628      	mov	r0, r5
 800c27e:	f7ff f96f 	bl	800b560 <_fflush_r>
 800c282:	2800      	cmp	r0, #0
 800c284:	d1ed      	bne.n	800c262 <__swbuf_r+0x2a>
 800c286:	68a3      	ldr	r3, [r4, #8]
 800c288:	3b01      	subs	r3, #1
 800c28a:	60a3      	str	r3, [r4, #8]
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	1c5a      	adds	r2, r3, #1
 800c290:	6022      	str	r2, [r4, #0]
 800c292:	701e      	strb	r6, [r3, #0]
 800c294:	6962      	ldr	r2, [r4, #20]
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	429a      	cmp	r2, r3
 800c29a:	d004      	beq.n	800c2a6 <__swbuf_r+0x6e>
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	07db      	lsls	r3, r3, #31
 800c2a0:	d5e1      	bpl.n	800c266 <__swbuf_r+0x2e>
 800c2a2:	2e0a      	cmp	r6, #10
 800c2a4:	d1df      	bne.n	800c266 <__swbuf_r+0x2e>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f7ff f959 	bl	800b560 <_fflush_r>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d0d9      	beq.n	800c266 <__swbuf_r+0x2e>
 800c2b2:	e7d6      	b.n	800c262 <__swbuf_r+0x2a>

0800c2b4 <__swsetup_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4b29      	ldr	r3, [pc, #164]	@ (800c35c <__swsetup_r+0xa8>)
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	6818      	ldr	r0, [r3, #0]
 800c2bc:	460c      	mov	r4, r1
 800c2be:	b118      	cbz	r0, 800c2c8 <__swsetup_r+0x14>
 800c2c0:	6a03      	ldr	r3, [r0, #32]
 800c2c2:	b90b      	cbnz	r3, 800c2c8 <__swsetup_r+0x14>
 800c2c4:	f7fc f85c 	bl	8008380 <__sinit>
 800c2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2cc:	0719      	lsls	r1, r3, #28
 800c2ce:	d422      	bmi.n	800c316 <__swsetup_r+0x62>
 800c2d0:	06da      	lsls	r2, r3, #27
 800c2d2:	d407      	bmi.n	800c2e4 <__swsetup_r+0x30>
 800c2d4:	2209      	movs	r2, #9
 800c2d6:	602a      	str	r2, [r5, #0]
 800c2d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e2:	e033      	b.n	800c34c <__swsetup_r+0x98>
 800c2e4:	0758      	lsls	r0, r3, #29
 800c2e6:	d512      	bpl.n	800c30e <__swsetup_r+0x5a>
 800c2e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2ea:	b141      	cbz	r1, 800c2fe <__swsetup_r+0x4a>
 800c2ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2f0:	4299      	cmp	r1, r3
 800c2f2:	d002      	beq.n	800c2fa <__swsetup_r+0x46>
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f7fd f80b 	bl	8009310 <_free_r>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c304:	81a3      	strh	r3, [r4, #12]
 800c306:	2300      	movs	r3, #0
 800c308:	6063      	str	r3, [r4, #4]
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	f043 0308 	orr.w	r3, r3, #8
 800c314:	81a3      	strh	r3, [r4, #12]
 800c316:	6923      	ldr	r3, [r4, #16]
 800c318:	b94b      	cbnz	r3, 800c32e <__swsetup_r+0x7a>
 800c31a:	89a3      	ldrh	r3, [r4, #12]
 800c31c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c324:	d003      	beq.n	800c32e <__swsetup_r+0x7a>
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f000 f883 	bl	800c434 <__smakebuf_r>
 800c32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c332:	f013 0201 	ands.w	r2, r3, #1
 800c336:	d00a      	beq.n	800c34e <__swsetup_r+0x9a>
 800c338:	2200      	movs	r2, #0
 800c33a:	60a2      	str	r2, [r4, #8]
 800c33c:	6962      	ldr	r2, [r4, #20]
 800c33e:	4252      	negs	r2, r2
 800c340:	61a2      	str	r2, [r4, #24]
 800c342:	6922      	ldr	r2, [r4, #16]
 800c344:	b942      	cbnz	r2, 800c358 <__swsetup_r+0xa4>
 800c346:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c34a:	d1c5      	bne.n	800c2d8 <__swsetup_r+0x24>
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	0799      	lsls	r1, r3, #30
 800c350:	bf58      	it	pl
 800c352:	6962      	ldrpl	r2, [r4, #20]
 800c354:	60a2      	str	r2, [r4, #8]
 800c356:	e7f4      	b.n	800c342 <__swsetup_r+0x8e>
 800c358:	2000      	movs	r0, #0
 800c35a:	e7f7      	b.n	800c34c <__swsetup_r+0x98>
 800c35c:	20000044 	.word	0x20000044

0800c360 <_raise_r>:
 800c360:	291f      	cmp	r1, #31
 800c362:	b538      	push	{r3, r4, r5, lr}
 800c364:	4605      	mov	r5, r0
 800c366:	460c      	mov	r4, r1
 800c368:	d904      	bls.n	800c374 <_raise_r+0x14>
 800c36a:	2316      	movs	r3, #22
 800c36c:	6003      	str	r3, [r0, #0]
 800c36e:	f04f 30ff 	mov.w	r0, #4294967295
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c376:	b112      	cbz	r2, 800c37e <_raise_r+0x1e>
 800c378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c37c:	b94b      	cbnz	r3, 800c392 <_raise_r+0x32>
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 f830 	bl	800c3e4 <_getpid_r>
 800c384:	4622      	mov	r2, r4
 800c386:	4601      	mov	r1, r0
 800c388:	4628      	mov	r0, r5
 800c38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c38e:	f000 b817 	b.w	800c3c0 <_kill_r>
 800c392:	2b01      	cmp	r3, #1
 800c394:	d00a      	beq.n	800c3ac <_raise_r+0x4c>
 800c396:	1c59      	adds	r1, r3, #1
 800c398:	d103      	bne.n	800c3a2 <_raise_r+0x42>
 800c39a:	2316      	movs	r3, #22
 800c39c:	6003      	str	r3, [r0, #0]
 800c39e:	2001      	movs	r0, #1
 800c3a0:	e7e7      	b.n	800c372 <_raise_r+0x12>
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	4798      	blx	r3
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	e7e0      	b.n	800c372 <_raise_r+0x12>

0800c3b0 <raise>:
 800c3b0:	4b02      	ldr	r3, [pc, #8]	@ (800c3bc <raise+0xc>)
 800c3b2:	4601      	mov	r1, r0
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	f7ff bfd3 	b.w	800c360 <_raise_r>
 800c3ba:	bf00      	nop
 800c3bc:	20000044 	.word	0x20000044

0800c3c0 <_kill_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d07      	ldr	r5, [pc, #28]	@ (800c3e0 <_kill_r+0x20>)
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	602b      	str	r3, [r5, #0]
 800c3ce:	f7f5 fb63 	bl	8001a98 <_kill>
 800c3d2:	1c43      	adds	r3, r0, #1
 800c3d4:	d102      	bne.n	800c3dc <_kill_r+0x1c>
 800c3d6:	682b      	ldr	r3, [r5, #0]
 800c3d8:	b103      	cbz	r3, 800c3dc <_kill_r+0x1c>
 800c3da:	6023      	str	r3, [r4, #0]
 800c3dc:	bd38      	pop	{r3, r4, r5, pc}
 800c3de:	bf00      	nop
 800c3e0:	200013fc 	.word	0x200013fc

0800c3e4 <_getpid_r>:
 800c3e4:	f7f5 bb50 	b.w	8001a88 <_getpid>

0800c3e8 <__swhatbuf_r>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f0:	2900      	cmp	r1, #0
 800c3f2:	b096      	sub	sp, #88	@ 0x58
 800c3f4:	4615      	mov	r5, r2
 800c3f6:	461e      	mov	r6, r3
 800c3f8:	da0d      	bge.n	800c416 <__swhatbuf_r+0x2e>
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	bf14      	ite	ne
 800c406:	2340      	movne	r3, #64	@ 0x40
 800c408:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c40c:	2000      	movs	r0, #0
 800c40e:	6031      	str	r1, [r6, #0]
 800c410:	602b      	str	r3, [r5, #0]
 800c412:	b016      	add	sp, #88	@ 0x58
 800c414:	bd70      	pop	{r4, r5, r6, pc}
 800c416:	466a      	mov	r2, sp
 800c418:	f000 f848 	bl	800c4ac <_fstat_r>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	dbec      	blt.n	800c3fa <__swhatbuf_r+0x12>
 800c420:	9901      	ldr	r1, [sp, #4]
 800c422:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c426:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c42a:	4259      	negs	r1, r3
 800c42c:	4159      	adcs	r1, r3
 800c42e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c432:	e7eb      	b.n	800c40c <__swhatbuf_r+0x24>

0800c434 <__smakebuf_r>:
 800c434:	898b      	ldrh	r3, [r1, #12]
 800c436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c438:	079d      	lsls	r5, r3, #30
 800c43a:	4606      	mov	r6, r0
 800c43c:	460c      	mov	r4, r1
 800c43e:	d507      	bpl.n	800c450 <__smakebuf_r+0x1c>
 800c440:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	6123      	str	r3, [r4, #16]
 800c448:	2301      	movs	r3, #1
 800c44a:	6163      	str	r3, [r4, #20]
 800c44c:	b003      	add	sp, #12
 800c44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c450:	ab01      	add	r3, sp, #4
 800c452:	466a      	mov	r2, sp
 800c454:	f7ff ffc8 	bl	800c3e8 <__swhatbuf_r>
 800c458:	9f00      	ldr	r7, [sp, #0]
 800c45a:	4605      	mov	r5, r0
 800c45c:	4639      	mov	r1, r7
 800c45e:	4630      	mov	r0, r6
 800c460:	f7fc ffca 	bl	80093f8 <_malloc_r>
 800c464:	b948      	cbnz	r0, 800c47a <__smakebuf_r+0x46>
 800c466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c46a:	059a      	lsls	r2, r3, #22
 800c46c:	d4ee      	bmi.n	800c44c <__smakebuf_r+0x18>
 800c46e:	f023 0303 	bic.w	r3, r3, #3
 800c472:	f043 0302 	orr.w	r3, r3, #2
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	e7e2      	b.n	800c440 <__smakebuf_r+0xc>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	6020      	str	r0, [r4, #0]
 800c47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c482:	81a3      	strh	r3, [r4, #12]
 800c484:	9b01      	ldr	r3, [sp, #4]
 800c486:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c48a:	b15b      	cbz	r3, 800c4a4 <__smakebuf_r+0x70>
 800c48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c490:	4630      	mov	r0, r6
 800c492:	f000 f81d 	bl	800c4d0 <_isatty_r>
 800c496:	b128      	cbz	r0, 800c4a4 <__smakebuf_r+0x70>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	f023 0303 	bic.w	r3, r3, #3
 800c49e:	f043 0301 	orr.w	r3, r3, #1
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	89a3      	ldrh	r3, [r4, #12]
 800c4a6:	431d      	orrs	r5, r3
 800c4a8:	81a5      	strh	r5, [r4, #12]
 800c4aa:	e7cf      	b.n	800c44c <__smakebuf_r+0x18>

0800c4ac <_fstat_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d07      	ldr	r5, [pc, #28]	@ (800c4cc <_fstat_r+0x20>)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	602b      	str	r3, [r5, #0]
 800c4ba:	f7f5 fb4d 	bl	8001b58 <_fstat>
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	d102      	bne.n	800c4c8 <_fstat_r+0x1c>
 800c4c2:	682b      	ldr	r3, [r5, #0]
 800c4c4:	b103      	cbz	r3, 800c4c8 <_fstat_r+0x1c>
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ca:	bf00      	nop
 800c4cc:	200013fc 	.word	0x200013fc

0800c4d0 <_isatty_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4d06      	ldr	r5, [pc, #24]	@ (800c4ec <_isatty_r+0x1c>)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	4608      	mov	r0, r1
 800c4da:	602b      	str	r3, [r5, #0]
 800c4dc:	f7f5 fb4c 	bl	8001b78 <_isatty>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d102      	bne.n	800c4ea <_isatty_r+0x1a>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	b103      	cbz	r3, 800c4ea <_isatty_r+0x1a>
 800c4e8:	6023      	str	r3, [r4, #0]
 800c4ea:	bd38      	pop	{r3, r4, r5, pc}
 800c4ec:	200013fc 	.word	0x200013fc

0800c4f0 <_init>:
 800c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f2:	bf00      	nop
 800c4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4f6:	bc08      	pop	{r3}
 800c4f8:	469e      	mov	lr, r3
 800c4fa:	4770      	bx	lr

0800c4fc <_fini>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	bf00      	nop
 800c500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c502:	bc08      	pop	{r3}
 800c504:	469e      	mov	lr, r3
 800c506:	4770      	bx	lr
